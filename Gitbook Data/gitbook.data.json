[{"name":"Introduction","url":"/introduction","objectId":"P6d8U5wMGRClNstComSO","item":[],"category":"introduction","service":""},{"name":"introduction","url":"/introduction","item":[{"name":"Introduction","url":"/introduction/guides","objectId":"-LKUXrO9fdqyDaU9B-kx","item":[],"category":"guides","service":"introduction"},{"name":"guides","url":"/introduction/guides","item":[{"name":"Quick Start Guide","url":"/introduction/guides/quick-start-guide","objectId":"-Mdx9TuVjERM9CqBI8XA","item":[],"content":"---\ndescription: >-\n  A brief overview on getting started with the Zesty.io WebEngine. Includes\n  links to additional Zesty and Parsley documentation.\n---\n\n# Quick Start Guide\n\n### Overview\n\nThe Zesty WebEngine has several features to ensure a smooth integration of you content. Throughout the quick start guide, we highlight some of these features that you will need to get started. Once familiar with general process of creating an Instance and content, a user can take a deep dive into the additional features with ease. Let's get started!\n\n{% hint style=\"info\" %}\n**Hint:** Inside the WebEngine you will notice the Docs button on several screens. These helpers will take you directly to the search results, in the Zesty Docs, that pertain to what you are working on. Try them out!&#x20;\n{% endhint %}\n\n### Logging into the Account Manager\n\nThe Account Manager houses all of your **instances**. Your instances are your unique projects created in the Zesty.io platform.\n\nUpon logging into your account, you are brought to the Account Manager. Within this interface you have administrative control over creating new instances, access to current instances, creating and updating  teams. Viewing options for your interface can be toggled and shown below.\n\n{% hint style=\"info\" %}\nToggling between a List view or Tile view can be done by selecting the option in the top right corner\n{% endhint %}\n\n#### Grid view\n\n![Thumbnail View of all Instances](../../../.gitbook/assets/instance-created-interface.png)\n\n#### List View\n\n![List View of all Instnaces](../../../.gitbook/assets/instances-created-list-view.png)\n\n### Creating a Team\n\nCreating a team facilitates adding an entire team to an instance. This may be most beneficial for extensive platform use that includes several instances and a large roster of developers. By creating a break down of teams by project, you can easily apply an entire team where needed. Navigate to the Teams  interface by selecting the Teams tab located in the top navigation.&#x20;\n\n{% hint style=\"info\" %}\nFollow the link for an in-depth look at [Teams](../../../accounts/ui/teams.md#overview)&#x20;\n{% endhint %}\n\n### Instance Settings\n\nInstance settings can also be accessed from the Account Manager. Selecting an Instance provides access to the Instance Setting Drawer. From here you will have the ability to view and update the **** [**Instance Settings**](instance-settings.md) **** below:\n\n* Add and update domains\n* Find the Instance [ZUID](../glossary.md#zuid) and creation information&#x20;\n* Create access to the Instance\n  * You can add an [individual User](../../../accounts/ui/instance-settings-drawer.md#user-access) to the access of the Instance &#x20;\n  * Or you can create [Team](../../../accounts/ui/instance-settings-drawer.md#team-access) access to an Instance&#x20;\n* Create Access Tokens for:\n  * Atom IDE Plugin\n  * Node SDK\n  * Outside User\n* View Blueprint selected for the Instance\n\nThis process will be covered in more detail in an upcoming section of the Quick Start Guide.\n\n### Next Steps\n\nIn the following several sections, you will be introduced the process of using the Zesty platform. Including creating a new Instance, content and publishing all through the WebEngine.\n","category":"guides","service":"introduction"},{"name":"quick-start-guide","url":"/introduction/guides/quick-start-guide","item":[{"name":"Create a New Instance","url":"/introduction/guides/quick-start-guide/create-a-new-instance","objectId":"-Mdxd2CIRxG52zYvs0b1","item":[],"content":"---\ndescription: >-\n  The Account Manager houses all of your instances. Your instances are your\n  unique projects created in the Zesty.io platform. Creating a new Instance is\n  the first step in building out your content.\n---\n\n# Create a New Instance\n\n### 1. Create the Instance\n\nFrom the Account Manager, select the green  \"**+ CREATE INSTANCE**\" button. You will be prompted to name your new project.&#x20;\n\n{% hint style=\"info\" %}\nInstances can be networked through an [EcoSystem](../../../accounts/guides/ecosystems.md#zesty-io-ecosystems). If you do not have an EcoSystem, leaving this selection as -None- is sufficient.\n{% endhint %}\n\n![](../../../.gitbook/assets/create\\_instance.png)\n\n![Creating a Zesty Instance](../../../.gitbook/assets/instance\\_build.gif)\n\n### 2. Choose a Blueprint\n\nYou will be given the option to select a pre built **blueprint** or \"Blank Slate.\"\n\n* **Blank Slate:** provides a Zesty instance with no inherent CSS styling\n* **Styled Blueprints:** these blueprints provide a Zesty instance that has prebuilt styling characteristics based on a CSS framework. (i.e.: Bootstrap). The previews provide a look into the prebuilt styling.\n\n![Selecting a Zesty Blueprint](../../../.gitbook/assets/environment.gif)\n\n### Next Steps\n\nAfter selecting your blueprint Zesty will navigate you directly into the Instance Settings. Continue to see a breakdown of the settings and configurations available\n","category":"guides","service":"introduction"},{"name":"Instance Settings","url":"/introduction/guides/quick-start-guide/instance-settings","objectId":"-Me_z4PqOAmWWxo-8FGw","item":[],"content":"---\ndescription: >-\n  The Instance Settings interface provides administrative control over\n  publishing domains, vanity domains, users and team access, access tokens, and\n  blueprints.\n---\n\n# Instance Settings\n\n### Overview\n\nAfter creating your instance you will be redirected to that instance's Settings displayed in the Account Manager. You can also access settings by selecting any of your currently created instance from the Account Manager. The Instance Settings configure key aspects of your project including:\n\n* Domain & DNS configuration\n* Zesty vanity domains\n* User and Team access\n* Access token creation\n* View selected and change blueprint\n\n### Domain & DNS Configuration\n\nHere you can added in your owned custom domains and access DNS configurations. The DNS A records can be added to your domain's DNS settings. For additional setup information, see [How To Launch an Instance](../../../instances/guides/how-tos/how-to-launch-an-instance.md).\n\n![](<../../../.gitbook/assets/image (90).png>)\n\n### Zesty Vanity Domains\n\nYou can create domains using the default 'zesty.dev' vanity domain. These can be create in a live or dev environment by selecting the live or dev branch from the dropdown. &#x20;\n\n{% hint style=\"info\" %}\nZesty vanity domain example: myblog.zesty.dev\n{% endhint %}\n\n* **Live domains:** will display only the published content\n* **Dev domains:** will display the latest draft of your content which will include published content and updated/new content that has been saved as a version but not yet published\n\n![Zesty live and dev vanity domains](<../../../.gitbook/assets/image (10).png>)\n\n### ZUID & Instance Details\n\nEach instance created with a ZUID (Zesty.io Unique Identifier). This number creates accessibility to your instance. It will be used when running API calls, seeking support, and more.&#x20;\n\nAdditional details regarding your instance are provided as well, shown below:&#x20;\n\n![Instance details located in Instance Settings](<../../../.gitbook/assets/image (19).png>)\n\n### Adding Users and Teams\n\nEach instance will need users and/or a team added. The user that creates the instance is given ownership and may add in the desired users/team. Users are assigned a role, which governs their control in the instance.&#x20;\n\n{% hint style=\"info\" %}\n[Roles & Permissions](../getting-started/roles-and-permissions.md#base-roles-types) provides a breakdown of each role and their access reach\n{% endhint %}\n\n![User invite and role selection ](<../../../.gitbook/assets/image (53).png>)\n\n{% hint style=\"info\" %}\nTeams will need to be created prior to adding them -- [Team creation instructions](../../../accounts/ui/teams.md#overview)\n{% endhint %}\n\n![Team invite](<../../../.gitbook/assets/image (36).png>)\n\n### Access Tokens\n\nAccess tokens can be created for a variety of uses. Including to gain access to your instance via Atom IDE plugin, Node SDK as well as other workflows.&#x20;\n\nThese will need to be renewed every 90 days and can be so directly in the instance settings as shown below.\n\n![Access Token Creation](<../../../.gitbook/assets/image (65).png>)\n\n### Blueprints&#x20;\n\nFrom this interface you can view the blueprint that was chosen for the instance on creation. You may change the blueprint that was chosen by selecting the Change Blueprint button, however it will reset the instance. If you wish to change your blueprint after creation try to do so before adding content to avoid any loss of work.\n\n{% hint style=\"danger\" %}\n**Warning:** Changing your Blueprint after the creation of an instance will cause the instance to be reset and content, code, etc. to be removed. If you do not want to lose the contents of your instance **do not** change your blueprint.\n{% endhint %}\n\n![](<../../../.gitbook/assets/image (17).png>)\n\n### Next Steps\n\nAfter configuring your project, you can begin adding your content and creating your views. Continue to Content Manager for more information.\n","category":"guides","service":"introduction"},{"name":"Content Manager","url":"/introduction/guides/quick-start-guide/content-manager","objectId":"-Me1gbty79f88rXluU5B","item":[],"content":"---\ndescription: >-\n  In the Content Manager Interface you have access to an Instance's content and\n  the website or endpoints that content is distributed through.\n---\n\n# Content Manager\n\n### Accessing Content Manager\n\nYou can access the Content Manager of any Instance from the Instance Setting drawer by the blue \"Open Content Manager\" button, as shown below. Once selected, you will be redirected to your dashboard that provide a complete overview of your project.\n\n![](<../../../.gitbook/assets/Screen Shot 2021-07-09 at 3.23.08 PM.png>)\n\n### Content Manager Dashboard\n\nInside the dashboard you are provided an overview of your instance. The overview includes:\n\n* Quick access links to your live & dev domains, Instance settings, favicon setup, navigation to various content management sections and their documentation, and any open work tabs\n\n![](<../../../.gitbook/assets/image (85).png>)\n\n* Content of your project grouped by relationship within the content section, parentless data models under headless content models section, platform navigational sidebar, quick content model create and search\n\n![](<../../../.gitbook/assets/image (78).png>)\n\n* Latest edits and published content with links to the corresponding content model and content\n\n![](<../../../.gitbook/assets/image (107).png>)\n\n* Overview of work completed in the last 30 days, breakdown by day, recently edited sections for easy workflow continuation&#x20;\n\n![](<../../../.gitbook/assets/image (6).png>)\n\n### Next Steps\n\nFrom here you can begin creating content. Up next is a complete breakdown of the types of content models available and how to utilize them.&#x20;\n","category":"guides","service":"introduction"},{"name":"Creating a Content Model","url":"/introduction/guides/quick-start-guide/creating-a-content-model","objectId":"-Me1ZtjwCXY9Lte31djC","item":[],"content":"---\ndescription: >-\n  Content Model is a collection of content entries with shared settings and\n  defined fields.\n---\n\n# Creating a Content Model\n\n### Types of Content Models\n\nContent models can be formatted based on the needs of the content and how it is to be displayed. There are three types of Content Models:\n\n* **Single Entry** Item&#x20;\n  * Includes Meta fields & URLs\n* **Multi-Entry** Item Groupings\n  * Includes Meta fields & URLs\n* Parented or Non-parented **Dataset**\n  * Does not include Meta fields nor URLs\n\n### Which Content Model Should I Choose?\n\nChoosing a Content Model type should be based on the needs of viewing and accessing the content within. Which list of options best suits your needs for your content item-set ?\n\n#### \\~ Single Entry Item\n\n* [ ] Includes a view located in the Code tab after creation\n* [ ] Each field will only need 1 content entry\n* [ ] Autogenerated Meta fields and URLs\n* [ ] Can be parented&#x20;\n\n#### \\~ Multi-Entry Item Groupings\n\n* [ ] Includes a view located in the Code tab after creation&#x20;\n* [ ] Fields are grouped together in rows allowing for multiple entries for the same field grouping.&#x20;\n* [ ] Each grouping will have its own autogenerated Meta fields and corresponding URLs\n* [ ] Can be parented\n* [ ] Can be built with a one-to-one Or one-to-many relationship\n\n#### \\~ Parented & Non-Parented Dataset\n\n* [ ] Does NOT include views for each grouping ( i.e.: Items that do not require unique URLs)\n  * [ ] Does not have autogenerated Meta fields nor URLs\n* [ ] Fields are grouped together in rows allowing for multiple entries for the same field grouping\n* [ ] Can be parented OR non-parented (allowing access in any view)\n  * [ ] Non-parented datasets will be located under the Parentless Dataset tab on the Content Manager Dashboard for easy access and organization&#x20;\n  * [ ] Non-parented datasets can be thought of as **global**.&#x20;\n\n### Creating the Model\n\nNavigate to the Schema tab in the sidebar to the left. On the schema home screen will be provided with a blank content model creation form. You can also trigger this form manually with the create model button from the schema screen in the top left corner.\n\n![](<../../../.gitbook/assets/image (42).png>)\n\nWithin the content model creation form, you will have the ability to choose the content model that suits your content based on the parameters above. Parent your model, if necessary, an more\n\n![Creating a content model](<../../../.gitbook/assets/image (18).png>)\n\n### Defining a Content Model's Schematics\n\nDefining fields within your Content Model allow you to define the type of content to be included, as well as the relationship those fields may have to other Content Models. For example a _One-to-One_ OR _One-to-Many_ correlation. Each type of Field will have specific functionality and output based on the selection. For a complete list of fields and definitions, please click [here](../../../instances/ui/schema/fields.md#overview).&#x20;\n\n### 1. Selecting your Content Model&#x20;\n\nAfter creating your Content Models, you can find your complete list of models in the Schema tab. If you have just created your content model you will automatically be redirected to the content model. If not, select the Content Model you would like to define a schema for. Upon selection you will be presented with a screen that looks like the one below. From this screen you will be able to see the details of the Content Model on the right including:&#x20;\n\n* Content model type\n* Content model ZUID\n* Label and Parsley reference name\n* URL and multi-item details&#x20;\n* Model settings and Delete Model&#x20;\n* and quick access links to edit content or code&#x20;\n\n![](<../../../.gitbook/assets/image (68).png>)\n\n### 2. Adding and Defining Fields\n\nTo add content you will select a filed type that will define the type of content held within. Once selected you will be presented with a form to complete regarding the field being created. The form will include:\n\n* Field Label\n* Field Name (the name used to reference this field via Parsley)\n* Tool Tip display\n* Description displayed to content editors\n* Is this field required toggle\n* Show value in table toggle\n* And specific field needs based on the type of field selected. (i.e.: Parent for One-to-One or One-to-Many field types)\n\n![](<../../../.gitbook/assets/image (60).png>)\n\n### 3. Proceed to Adding content\n\nAfter completing all of the field additions needed for a Content Model, you can proceed to the to Content tab and select the model you would like to begin adding content to.\n\n{% hint style=\"info\" %}\n**Hint**: You can continue to add fields to your schema at any time after creating your Content Model. As additional field needs arise, simply proceed to the corresponding schema and build on to the content.\n{% endhint %}\n\n### Next Steps\n\nCovered in the next section is adding and updating content. Along with adding unique Meta data and Head tags to content models.\n","category":"guides","service":"introduction"},{"name":"Adding Content","url":"/introduction/guides/quick-start-guide/adding-content","objectId":"-Me1_W_3dHzVZjBOdTq7","item":[],"content":"---\ndescription: >-\n  Once the setup of your Content Models and Schema fields is complete, you can\n  add content entries and fill those fields with text, images, selections,\n  files, etc.\n---\n\n# Adding Content\n\n### 1. Accessing Content\n\nTo access your content, for adding or updating, select the Content Tab. From this view you can select the Content Model you would like to add content to. Depending on the type of Content Model, you will see one of two views after selecting the model as shown below.&#x20;\n\n#### Single Entry Item View\n\n![Single entry format](<../../../.gitbook/assets/image (45).png>)\n\n#### Multi Entry Items or Dataset Views\n\n![Multi entry & Dataset format](<../../../.gitbook/assets/image (91).png>)\n\n### 2. Adding Content&#x20;\n\nBased on the type of content model, you will have two ways of adding content into your models fields. If the field has relationship to another model, you will be provided a dropdown with the selections available based on that relationship.&#x20;\n\n#### Single Entry Item View\n\nFor single entry items you will be presented with each of fields in a form layout, that you can directly add your content to. After adding your content, click the green Save Version button to complete the addition of content.  As seen below:\n\n![](<../../../.gitbook/assets/image (27).png>)\n\n#### Multi Entry Items or Dataset Views\n\nFor both Multi Entry Items and Datasets, adding content is done in 3 steps.\n\n1.Select the Create Item button in the top navigation of the content model\n\n![](<../../../.gitbook/assets/image (73).png>)\n\n{% hint style=\"info\" %}\n**Note:** The Create Item button will include the name of the content model you are currently working in. I.e.: '+CREATE BLOG ITEM'\n{% endhint %}\n\n2\\. After selecting Create Item, a content page for a row of data will open. Adding the content from here is done in two parts. On the immediate page, you are able to add content into the fields form just as you would a Single Entry Item model. It will also include the SEO & Meta (URL is included for Multi Entry) information that is associated to the content. Once completed, click the Create Item green save button. This action navigates the user to the full content page of this item. Within this view you are able to update your content, view the item status breakdown, save drafts, publish a specific draft, gain access to Head Tags for Multi Entry, utilize WebEngine Preview and more.\n\n{% hint style=\"info\" %}\n**Note:** If the content model type is a Multi Entry Item grouping, you will have the ability to update the SEO & Meta, Head Tags and URL paths\n{% endhint %}\n\n**Multi Entry View**\n\n![Initial Multi Entry Item Creation View](<../../../.gitbook/assets/image (40).png>)\n\n![Within Multi Entry Content Page of Item ](<../../../.gitbook/assets/image (99).png>)\n\n{% hint style=\"warning\" %}\n**Attn:** If the content model type is a Dataset, the content will not have Head Tags, WebEngine Preview nor URL paths\n{% endhint %}\n\n**Dataset View**\n\n![Initial Dataset Item Creation View](<../../../.gitbook/assets/image (30).png>)\n\n![Within Dataset Content Page of Item](<../../../.gitbook/assets/image (69).png>)\n\n3\\. After adding necessary content to you set, click the green Save Version button in the top right-hand corner. Once saved, navigate back to the table view of the content model by selecting it from the file structure layout on the left and repeat steps 1-3 to add additional data.\n\n![](<../../../.gitbook/assets/image (11).png>)\n\n### 3. Updating Content&#x20;\n\nUpdating content in models has a simple workflow. Select the content model you want to access from the Content Tab.&#x20;\n\n* For **Single Entry Item** model:\n  * update any fields you wish to change and click the green Save Version button when complete\n* For **Multi Entry** & **Dataset** models:\n  * Select the row you wish to update\n  * In the content page update any fields you wish to change and click the green Save Version button when complete&#x20;\n\n### 4. Adding Unique Meta Data/Head Tags to Content Models\n\nWithin the Content Manager meta data and head tags can be added to individual Content Models to be applied locally.&#x20;\n\n{% hint style=\"info\" %}\nHead tags and meta data must be added in [Settings](content-manager-settings.md) to be applied globally\n{% endhint %}\n\n* For **Single** and **Multi Entry Item** models:\n  * Select the model you wish to add head tags and/or other meta data\n  * Within the content model, located at the top of the model you will see **Edit Content**, **SEO & Meta**, **Head Tags** and **WebEngine Preview**\n* Selecting **SEO & Meta**, allows the user the ability to change the meta title, description, keywords, navigation link text, URL path part and more.&#x20;\n  * this view also provides SEO Content Insights and an example search engine listing link\n\n![](<../../../.gitbook/assets/image (76).png>)\n\n* In **Head** **Tags** you can create custom head tags. Select the type of tag necessary, _Script, Meta,_ or _Link_ tag, then complete the tag template. You can also delete the populated attributes and input your own.\n  * these head tags will only be applied to this view page, please see [Content Manager Settings](content-manager-settings.md) to setup global head tags\n\n![Head Tag Creation View](<../../../.gitbook/assets/image (98).png>)\n\n### Next Steps\n\nCovered next are the steps for adding media files for your content, which can images, PDFs and more. These items can be utilized in any media fields of your content.\n","category":"guides","service":"introduction"},{"name":"Adding Media Items","url":"/introduction/guides/quick-start-guide/adding-media-items","objectId":"-Me1_gAKUo_XyhF17adC","item":[],"content":"---\ndescription: >-\n  Add a variety of media types to your instance: SVG, PDF, MOV, Mp4, GIF, JPEG,\n  and more.\n---\n\n# Adding Media Items\n\n### Accessing Media Items\n\nMedia items can be any number of file types, including SVG, PDF, MOV, Mp4, GIF, JPEG and more. Selecting the Media tab, located on the sidebar of your Content Manager, redirects to all of your media assets. Within this screen, you have the ability to add all of the media assets of a given instance. Files can be uploaded or dragged and dropped from this location.&#x20;\n\n{% hint style=\"info\" %}\nThe media section also allows you to organize the content within by creating groups. These groups can also be nested.\n{% endhint %}\n\n![Media Section](<../../../.gitbook/assets/image (1).png>)\n\n### Organizing Media Files\n\nKeep your content organized by creating folders to store items accordingly. Each folder is considered a group.&#x20;\n\nTo create a folder, click the Create Sub Group button(top right corner) after highlighting the group your wish it to be nested under(group listings on left). Choose a name you find suitable and click create.\n\n![Creating Subgroup](<../../../.gitbook/assets/image (80).png>)\n\n![Naming Subgroup](<../../../.gitbook/assets/image (12).png>)\n\n### Upload Media\n\nSelect the grouping you would like to add items to. There are 2 options to add media: either select the blue Upload button and choose the desired file OR simply drag 'n' drop your media file directly onto the screen.\n\n![Drag and Drop OR Upload](<../../../.gitbook/assets/image (59).png>)\n\n### Media File Details\n\nEach media file uploaded is equipped with details pertaining the file, including:\n\n* Zesty provided URL directly to file\n* Title\n* Filename&#x20;\n* ZUID\n* Created At timestamp\n\nTo access the details of a media file simply click on the :gear: cog in the bottom left-hand corner of the item tile\n\n![Media Item Details](<../../../.gitbook/assets/image (29).png>)\n\n### Accessing Media Files in Content\n\nOnce your media files have been added you can access all items through the _media_ _fields_  that have been created within your **schemas**. Once the media field has been created, Zesty provides an add button in the content page that will allow you to select & add from all of your media files.\n\n### Next Steps\n\nNext to be covered are the Content Settings that are available and specifically highlighting how to add global head tags.\n","category":"guides","service":"introduction"},{"name":"Content Manager Settings","url":"/introduction/guides/quick-start-guide/content-manager-settings","objectId":"-Me1aHuk6bvppKXIHDQJ","item":[],"content":"---\ndescription: >-\n  Within the Settings tab of the Content Manager you are presented with several\n  options that directly affect the Instance in its entirety. Including the\n  ability to add global Head Tags.\n---\n\n# Content Manager Settings\n\n### Accessing Content Settings\n\nThe Settings tab shown below gives access to customize your instance. There are several tools available to you, highlighted below are the sections within settings as well as a guide to adding global head tags from the **WebEngine Global Settings**.\n\n![Settings navigation](<../../../.gitbook/assets/image (24).png>)\n\n### Instance Settings\n\nInstance Settings are developer-oriented settings to customize an instance's backend functionality. Generally, the most commonly edited configurations are Google Analytics, contact form options, and HTTPS settings. For an in-depth look at each of these, see [Settings](../../../instances/ui/settings/instance-settings.md).\n\nBelow is a view from the General Settings within the content Instance Settings.\n\n![General Settings Options](<../../../.gitbook/assets/image (9).png>)\n\n### WebEngine Global\n\nWhile you can add head tags to individual content models, there are times that global head tags will be more appropriate. This can be done in the WebEngine Global settings, along with customizing the instance's Robots.txt file.\n\nSelecting **Head Tags**, directs you to the management of the current global head tags of the instance and creation of new tags. Zesty complies and attaches tags for the CSS, SCSS, and JavaScript files included in the Code section automatically. Any additional head or meta tags can be added here.&#x20;\n\n#### Adding global head tags\n\nInside **Head Tags,** select + Create Head Tag button to create an addition. The template accommodates  tag type selection, landing order in the head using sort, addition & deletion of attributes, saving and deleting the tag itself.\n\nAs you are creating tags, Zesty provides a dynamic rendering of how the head will appear on the published instance. The prepopulated meta tags can also be reordered and deleted.\n\n![Adding Global Head Tags](<../../../.gitbook/assets/image (94).png>)\n\n### WebEngine Styles & Fonts\n\nGlobal styling settings can be created and updated from here. If you have selected a prebuilt blueprint, this is where you can adjust color schemes and and fonts that have been pre-determined by the blueprint. When working with a blank slate blueprint you can create your own styling themes and utilizes the variable  names provided to reference them in your styling sheets. For an deep dive into styling settings, see [Instance Styles](../../../instances/ui/settings/less-variables.md).\n\n![Body Colors & Shaping located in WebEngine Styles & Fonts](<../../../.gitbook/assets/image (72).png>)\n\n### Next Steps\n\nNow that you have created you content and customized your settings, let's take that content and begin adding it to your code. In the next section, we'll cover Parsley, loader and ATOM.\n","category":"guides","service":"introduction"},{"name":"Coding & Parsley","url":"/introduction/guides/quick-start-guide/coding-and-parsley","objectId":"-Me1aIgR6N5cfUskU1jE","item":[],"content":"---\ndescription: Parsley — the language of Zesty.io\n---\n\n# Coding & Parsley\n\n### Overview\n\nNow that the content has been added to the instance, the assembly of the code and design may begin. Upon entering the Code screen, the user is presented with all the content model associated views. Views are automatically generated for single entry and multi entry content models and carry the same naming conventions.&#x20;\n\n![Code Section Navigation](<../../../.gitbook/assets/image (95).png>)\n\nIn addition to generated views, the files will include the loader, site CSS and JavaScript files. The loader has significance into the layout of the site, which will be discussed in further detail below. Both the CSS and the JavaScript have autogenerated compiled minified files. Zesty WebEngine will create a corresponding link and script tag, respectively,  that are added to the head automatically. For further details, see [CSS & JS Processing Flow](../../../webengine/guides/web-engine/css-processing-flow.md).&#x20;\n\nParsley is used to add stored content into the code. It includes several built-in functionalities aid in development of the code, which will be discussed in further detail below.&#x20;\n\nFrom Code app of Zesty, additional code files may be added. These additional files will not have an associated content model but will have the ability to call in all content via Parsley. For content that will need it's own view, best practice is to create a Content Model. Content stored within any model can be called into any code file.  CSS and JS files that are created will automatically be organized into their respective sections\n\n![Adding another code file](<../../../.gitbook/assets/image (89).png>)\n\n![File types offered](<../../../.gitbook/assets/image (79).png>)\n\n### What is Parsley?\n\nParsley is the dot-notation-style templating language of Zesty.io. Used to create the presentation layer of an Instance, it accesses and displays the content stored within the models. It also performs logic operations, provides shortcuts for reused code segments and other programming-type functions, in easy to read syntax.\n\nUtilizing Parsley makes it easy to dynamically render content without sacrificing load times. It can reference any Field from any content entry, from any content model available on the instance. It will then replace the Parsley call with the value stored to that field when the file is rendered to a browser or endpoint request.\n\nParsley uses curly brackets to indicate a call initiation. Enclosed within the curly brackets, the key word this can be used to refer to the content that is associated to that view(shown below). It can also be used to iterate through content collections, evaluate conditionals, execute Math statements, each loops (shown below) and more.&#x20;\n\n```\n<h1>{{ this.my_title_field }}</h1>\n\n<ul class=\"product-list\">  \n{{ each products as product }}\n    <li class=\"product\">{{ product.name }}</li>\n{{ end-each }}\n</ul>\n```\n\n{% hint style=\"info\" %}\nFor additional information, syntax and practice, review [Parsley](../../../webengine/guides/web-engine/introduction-to-parsley/) and the [REPL ](https://parsley.zesty.io/)to try out Parsley lessons.\n{% endhint %}\n\n### What is the loader?\n\nThe [loader](../glossary.md#loader) file in the Code app is required when using the Zesty WebEngine for an instance. It is the app shell used by a WebEngine application to display the content.\n\nThe Parsley call `{{ current_view }}` within the loader is required to dynamically render the view files . Additional calls can be incorporated to include global elements, such as a header, navigation or footer. To do so, the `{{ include }}` Parsley call will be used, shown below.&#x20;\n\n```\n{{ include header}}\n{{current_view}}\n{{ include footer}}\n```\n\nParsley `{{ include }}` also affords the opportunity to include snippets and endpoints onto other views. For additional documentation on usage, see [Include](../../../webengine/guides/web-engine/introduction-to-parsley/include.md).\n\n### Global Content\n\nAll content is accessible in any view. In addition to this, Global Content Models are designed to store content not assigned to any one page or other content entry. These content pieces are often used site wide, e.g. navigation, site logo, etc.\n\nThese global Content Models can be accessed with Parsley. This is done by calling the content model Parsley reference name and the corresponding Parsley reference name of the Field that has the desired content, seen below.\n\n```\n{{ globals.field_name }}\n```\n\n&#x20;For additional documentation on global Content Model, see [Globals](../../../instances/ui/content/globals.md).\n\n### Code Creation\n\nWhen creating code the Zesty WebEngine provides version control on code files, as well as version comparison. Parsley calls are made directly in the code syntax. As changes are made to the code, a new preview is available to view of the version immediately after saving. This will not affect the published version until the new version is published, discussed [here](publishing.md).\n\nBy the selecting the 'Diff Versions' button in the top left-hand corner,  WebEngine provides the ability to directly compare versions to one another. From this screen (shown below), different version can be selected, compared and loaded.&#x20;\n\n![Version comparison and loading](<../../../.gitbook/assets/image (100).png>)\n\nParsley comes equipped with the ability to provide an auto-layout, also known as Parsley AutoLayout (PAL). When this Parsley call (shown below) is made, it will render the corresponding content in the view based on the order of the Fields in the Content Model schema. PAL does not have to be used but is available when wanted. For additional information, see [Parsley AutoLayout](../../../webengine/guides/web-engine/introduction-to-parsley/parsley-autolayout.md).\n\n![Parsley AutoLayout(PAL) using this property](<../../../.gitbook/assets/image (35).png>)\n\nCode creation moving forward is straight forward. Build the layout as you see fit, implement content from the Models using Parsley calls, save and publish.\n\n![Header with each loop to distribute navigation items from content](<../../../.gitbook/assets/image (2).png>)\n\n### Next Steps\n\nWith content created and code completed the next step is to publish. Publishing takes you content live. Continue to the next section for details on publishing content and code.\n","category":"guides","service":"introduction"},{"name":"Publishing","url":"/introduction/guides/quick-start-guide/publishing","objectId":"-MeQqf2QUsfbj-dlGfwi","item":[],"content":"---\ndescription: >-\n  Publishing is the process of taking your content live. Zesty provides control\n  to the user on which saved drafts they would like to publish.\n---\n\n# Publishing\n\n### Overview\n\nZesty provides version control when publishing. Each time a user saves content it creates a version. Those versions can viewed, updated to create a new version, and selected to be published. It allows for more control and continuing development on drafts without disturbing currently published content.\n\n{% hint style=\"warning\" %}\nNote: Once Content has been published it will be live. Verifying that your content & code is setup accurately is vital to ensure that you are not publishing unfinished work. If you have published unfinished work, you can re-publish a previous working version until you complete your current draft.&#x20;\n{% endhint %}\n\n### Version Selection&#x20;\n\nVersion selection can be done on any content model. Within the model you will find a drop down with all saved drafts. The publish button will display as gray if the version is the currently published version and blue for a version that can be published. The save button will light up green and active if changes need to be saved.&#x20;\n\n{% hint style=\"info\" %}\nIf you try to navigate away or close you content model before saving, Zesty prompts you to save or discard your changes.\n{% endhint %}\n\n### Publishing Process\n\nIn order for an instance to go live, the content and the code must be published. The key to this process is verifying that the correct draft version is published. The WebEngine Preview plays a vital role in this. It assembles what the draft version will produce when published, located directly in the content manager.&#x20;\n\nAfter constructing you content and code, users are able to select the version they wish to publish and go live with. Once a version is live, a user can create updates to that version save a new version and publish it immediately or create a scheduled publish for a future date. Scheduling a publish empowers the user to setup rollouts for upcoming changes and events.\n\n### Publishing Content\n\nInside each content model, the user has control over the versions, publishing specific versions of content, scheduling publishes, and version updates for new drafts. Below shows the layout, within each model, of version control and publishing tools.\n\n1. Navigate to the content model that is to be published. IF the model is a multi entry or dataset you will need to open each row of content in order to publish the entries you want live individually.\n2. Select the version you want published. Note that on load the current version is shown.&#x20;\n3. Select the publish button to publish the version immediately OR select the calendar to delay a publish until a specified date.\n\n![Publishing within Content Model](<../../../.gitbook/assets/image (25).png>)\n\n### Publishing Code\n\nPublishing the instance's code follows a similar format. As the code is edited, it creates a new draft version. In order to see these draft changes in the WebEngine Preview, be sure to save the edits before selecting the preview. Versions can be compared and selected using the Diff Version option, shown below.\n\n![Version comparison and selection](<../../../.gitbook/assets/image (26).png>)\n\nOnce the draft meets the user's approval, verify that all changes have been saved and select the publish button. The version that is published will show as the 'Live' version, as seen above within the version comparison screen.\n\n![Publishing & Saving Code draft](<../../../.gitbook/assets/image (83).png>)\n\n### Scheduling a Publish\n\nScheduling a publish can be utilized on code and content. Selecting the publish calendar presents the form below. With options for time zone and publish date and time. It should be noted that the wanted version should be selected before clicking the schedule publish button.\n\n![Selecting version & Scheduling publish buttons](<../../../.gitbook/assets/image (61).png>)\n\n![Schedule a Publish](<../../../.gitbook/assets/image (49).png>)\n\nAfter selecting the green schedule publishing button you are presented with a confirmation. The confirmation allows you to make adjustments or cancel the schedule all together.&#x20;\n\n![Scheduling confirmation](<../../../.gitbook/assets/image (82).png>)\n\n### Next Steps\n\nYour Instance is published! At this point you are ready to take a deep dive into what Zesty has to offer. Update your instance as you see fit and more.&#x20;\n","category":"guides","service":"introduction"},{"name":"TroubleShooting","url":"/introduction/guides/quick-start-guide/troubleshooting","objectId":"2in9ZM9GwMrdRVDMuJ4Q","item":[],"content":"---\ndescription: Common occurrences in the Zesty.io Ecosystem and how to troubleshoot them\n---\n\n# TroubleShooting\n\nIn a system as large as Zesty.io there are bound to be small items that can be overlooked. These common mistakes and workflows will need troubleshooting to move forward. Some of these items can change how your Instance renders and should be paid close attention to.&#x20;\n\nThe following sub-articles cover a variety of topics, from Parsley to Webengine Mode. Each article will detail errors that may be seen, rendering issues, Parsley errors, etc.&#x20;\n\nIf you are unable to troubleshoot and resolve the issue, please feel free to reach out to our Support Engineers at support@zesty.io.&#x20;\n\n","category":"guides","service":"introduction"},{"name":"troubleshooting","url":"/introduction/guides/quick-start-guide/troubleshooting","item":[{"name":"Duplicate Path Part","url":"/introduction/guides/quick-start-guide/troubleshooting/duplicate-path-part","objectId":"RCSCpRuC3njZxBATXQEo","item":[],"content":"---\ndescription: Duplicate path part errors.\n---\n\n# Duplicate Path Part\n\nAs your content grows there are times that may arise when content overlaps. These overlaps can prevent Content Items from saving and publishing. Duplicate Content Item URL path parts will return an error in the Manager when trying to save or create the item. &#x20;\n\n### URL Path Part\n\nURL path parts are located in the SEO & Meta section of the Content Item. When creating an Item the initial URL path part is established by the content of the first text field. There are two aspects at play that can cause a duplication of path parts:\n\n1. The Item's Parent path: this is located in the _**Select this Page's Parent**_ field of the SEO & Meta section.\n2. The Item's URL path part: this is located in the _**URL Path Part**_ field of the SEO & Meta section.&#x20;\n\n![Meta settings in the creation of an Item & updating an Item](../../../../.gitbook/assets/meta\\_settings.png)\n\n#### Duplication Error During Creation\n\nCreating two Content Items with the **same** parent and URL path part will block the item from creating. Content Items that have the same URL path part **but** different parent path routing will not block one another. At the bottom of the Item creation screen, the user will have access the to parent path and URL path part. These can be modified before the item is created and &#x20;\n\nWhen creating an item that has a duplicate path, the user will be presented with the following error:\n\n![Duplicate URL routing error on creation of new Content Item](../../../../.gitbook/assets/dup\\_url\\_creation.png)\n\nScrolling to the bottom of Item creation will give the user access to the SEO & Meta fields shown below:\n\n#### Duplication Error During Saving\n\nA similar error will occur when trying to save an item with duplicate routing. Updating the parent path and/or URL path part to a URL that is currently assigned to another Item, causes the Manager to respond with the following error:&#x20;\n\n![Duplicate URL routing error on update and save of Content Item](../../../../.gitbook/assets/dup\\_url\\_save.png)\n\nThe duplication can be seen in the SEO & Meta section of the content item, shown below. It will show the assigned parent URL routing as well as the item specific URL path part.&#x20;\n\n### Resolving Duplication Errors\n\nTo resolve either of these errors one of the following updates will need to be made:\n\n1. Update the URL path part to an endpoint not currently assigned to another item with the same parent page routing.&#x20;\n   * Updating an Item's URL path part may better suit use cases where the parent path lends additional information about the content or categorizes the content based on its relationship with another set of data.&#x20;\n   * By changing the content in the _**URL Path Part**_ field, the item keeps its parent routing but removes the conflict of two different sets of content routed to the same endpoint.&#x20;\n   * _**Note:**_ Changes do not have to be made to the first text field of the content item, in order to change the path part. These two items can be updated independently of one another.\n2. Change the Page's Parent routing by selecting a different parenting path.\n   * When changing the parent routing, the user ensures the two items that have the same URL path part are routed from different parent locations. This removes the conflict between the two items.\n   * _**Note:**_ updating the Page's Parent routing may not always be ideal, especially in circumstances where the parent routing lends additional information regarding the content. _For example_, the parent routing establishes an item category and its relationship to a category model. In these use cases, option two is more appropriate.\n","category":"guides","service":"introduction"}],"content":"---\ndescription: Duplicate path part errors.\n---\n\n# Duplicate Path Part\n\nAs your content grows there are times that may arise when content overlaps. These overlaps can prevent Content Items from saving and publishing. Duplicate Content Item URL path parts will return an error in the Manager when trying to save or create the item. &#x20;\n\n### URL Path Part\n\nURL path parts are located in the SEO & Meta section of the Content Item. When creating an Item the initial URL path part is established by the content of the first text field. There are two aspects at play that can cause a duplication of path parts:\n\n1. The Item's Parent path: this is located in the _**Select this Page's Parent**_ field of the SEO & Meta section.\n2. The Item's URL path part: this is located in the _**URL Path Part**_ field of the SEO & Meta section.&#x20;\n\n![Meta settings in the creation of an Item & updating an Item](../../../../.gitbook/assets/meta\\_settings.png)\n\n#### Duplication Error During Creation\n\nCreating two Content Items with the **same** parent and URL path part will block the item from creating. Content Items that have the same URL path part **but** different parent path routing will not block one another. At the bottom of the Item creation screen, the user will have access the to parent path and URL path part. These can be modified before the item is created and &#x20;\n\nWhen creating an item that has a duplicate path, the user will be presented with the following error:\n\n![Duplicate URL routing error on creation of new Content Item](../../../../.gitbook/assets/dup\\_url\\_creation.png)\n\nScrolling to the bottom of Item creation will give the user access to the SEO & Meta fields shown below:\n\n#### Duplication Error During Saving\n\nA similar error will occur when trying to save an item with duplicate routing. Updating the parent path and/or URL path part to a URL that is currently assigned to another Item, causes the Manager to respond with the following error:&#x20;\n\n![Duplicate URL routing error on update and save of Content Item](../../../../.gitbook/assets/dup\\_url\\_save.png)\n\nThe duplication can be seen in the SEO & Meta section of the content item, shown below. It will show the assigned parent URL routing as well as the item specific URL path part.&#x20;\n\n### Resolving Duplication Errors\n\nTo resolve either of these errors one of the following updates will need to be made:\n\n1. Update the URL path part to an endpoint not currently assigned to another item with the same parent page routing.&#x20;\n   * Updating an Item's URL path part may better suit use cases where the parent path lends additional information about the content or categorizes the content based on its relationship with another set of data.&#x20;\n   * By changing the content in the _**URL Path Part**_ field, the item keeps its parent routing but removes the conflict of two different sets of content routed to the same endpoint.&#x20;\n   * _**Note:**_ Changes do not have to be made to the first text field of the content item, in order to change the path part. These two items can be updated independently of one another.\n2. Change the Page's Parent routing by selecting a different parenting path.\n   * When changing the parent routing, the user ensures the two items that have the same URL path part are routed from different parent locations. This removes the conflict between the two items.\n   * _**Note:**_ updating the Page's Parent routing may not always be ideal, especially in circumstances where the parent routing lends additional information regarding the content. _For example_, the parent routing establishes an item category and its relationship to a category model. In these use cases, option two is more appropriate.\n","category":"guides","service":"introduction"}],"content":"---\ndescription: >-\n  The Account Manager houses all of your instances. Your instances are your\n  unique projects created in the Zesty.io platform. Creating a new Instance is\n  the first step in building out your content.\n---\n\n# Create a New Instance\n\n### 1. Create the Instance\n\nFrom the Account Manager, select the green  \"**+ CREATE INSTANCE**\" button. You will be prompted to name your new project.&#x20;\n\n{% hint style=\"info\" %}\nInstances can be networked through an [EcoSystem](../../../accounts/guides/ecosystems.md#zesty-io-ecosystems). If you do not have an EcoSystem, leaving this selection as -None- is sufficient.\n{% endhint %}\n\n![](../../../.gitbook/assets/create\\_instance.png)\n\n![Creating a Zesty Instance](../../../.gitbook/assets/instance\\_build.gif)\n\n### 2. Choose a Blueprint\n\nYou will be given the option to select a pre built **blueprint** or \"Blank Slate.\"\n\n* **Blank Slate:** provides a Zesty instance with no inherent CSS styling\n* **Styled Blueprints:** these blueprints provide a Zesty instance that has prebuilt styling characteristics based on a CSS framework. (i.e.: Bootstrap). The previews provide a look into the prebuilt styling.\n\n![Selecting a Zesty Blueprint](../../../.gitbook/assets/environment.gif)\n\n### Next Steps\n\nAfter selecting your blueprint Zesty will navigate you directly into the Instance Settings. Continue to see a breakdown of the settings and configurations available\n","category":"guides","service":"introduction"},{"name":"Zesty APIs","url":"/introduction/guides/api-overview","objectId":"-M4tgaDi7E62MTyKXL-T","item":[],"content":"---\ndescription: >-\n  In addition to webpage delivery from WebEngine templating, developers have\n  access to multiple headless API options which can power additional or\n  supplemental website, mobile, or IoT experiences.\n---\n\n# Zesty APIs\n\n## Available APIs\n\nEvery item of content that is authored in Zesty.io has a paired API endpoint that gives developers JSON access. Two are auto generated, Instance Content API (open) and Instances REST API (authenticated).\n\n{% content-ref url=\"../../webengine/guides/json-endpoints/instant-content-api.md\" %}\n[instant-content-api.md](../../webengine/guides/json-endpoints/instant-content-api.md)\n{% endcontent-ref %}\n\n{% content-ref url=\"broken-reference\" %}\n[Broken link](broken-reference)\n{% endcontent-ref %}\n\nSpecific custom endpoints which can combine data and other information can be created through the zesty.io code editor.\n\n{% content-ref url=\"../../instances/guides/how-tos/how-to-create-a-customizable-json-endpoint-for-content.md\" %}\n[how-to-create-a-customizable-json-endpoint-for-content.md](../../instances/guides/how-tos/how-to-create-a-customizable-json-endpoint-for-content.md)\n{% endcontent-ref %}\n\n## API Data flows Diagram\n\nSee the following graphic for data flow examples which can be used to apply your custom workflows for headless, desktop, or IoT applications.\n\n![Example Delivery Data Flows](<../../.gitbook/assets/Data Flow - Zesty.io APIs and WebEngine.png>)\n","category":"guides","service":"introduction"},{"name":"Glossary","url":"/introduction/guides/glossary","objectId":"-M6b7jS8ose00LFQMnc-","item":[],"content":"---\ndescription: Learn the language of Zesty.io.\n---\n\n# Glossary\n\n## Account Settings\n\nThe Account Settings, accessed through the accounts interface, allow users to update their profile, email, password, and other preferences.\n\n## Accounts Interface (also see [Instances Dashboard](https://zesty.org/glossary#instances-dashboard))\n\nThe Accounts Interface is accessed after a user logs in to Zesty.io, [https://accounts.zesty.io](https://accounts.zesty.io). It allows users to access all their instances, custom blueprints, teams, account settings, and more.\n\n## Audit Trail Section\n\nThe Audit Trail section shows a log of actions (such as creating a new item, adding a field to a content model, publishing items, etc.) that users have taken in an instance.\n\n## Blueprint\n\nA Blueprint is the starting content, content models, and files for a new instance.\n\n## Content Dashboard\n\nThe Content Dashboard is the content manager interface homescreen that shows a business overview of analytics, \"Recently Edited\" items, and \"Platform Updates\". This dashboard also provides access to all of the current content entries through the left hand column.\n\n## Content Entry Editing View\n\nThe Content Entry Editing View is the view in the Content Tab where the data for an individual entry is viewed and edited.\n\n## Content Manager Interface\n\nThe Content Manager Interface is where a user can manage their instance's content and the website or endpoints that content is distributed through. Each unique instance in Zesty.io has it's own content management interface and is connected to a single domain for publishing.\n\n## Content Models\n\nContent Models is a collection of content entries with shared settings and defined fields. Content models can be a single page, page group or dataset.\n\n## Content Section\n\nThe Content Section (formerly called content tab) is the sections of Zesty.io where users can create, modify and delete content entries.\n\n## Create New Entry View\n\nThe Create New Entry View is a view for creating a new entry for a content model with all fields blank, with their autogenerated value, or their default value.\n\n## Custom Blueprint Overview\n\nThe Custom Blueprint Overview allows users to review and edit a blueprint or fork a blueprint repo.\n\n## Custom Blueprints Dashboard\n\nThe Custom Blueprints Dashboard is the view of all of a user's custom blueprints.\n\n## Display Name/name\\_friendly\n\nThis is the field label shown in the Content section. This should be a description shown to content users who will be managing content.\n\n## Editor Section\n\nThe Editor Section (formerly called Editor Tab) is where the HTML, Endpoints, CSS and Javascript files and code is created, edited and managed.\n\n## Editor Utilities\n\nThe Editor Utilities can be found at the bottom of the Editor section and includes a Parsley code bank, publish history, access to an instance's media, webfonts, meta tags and other `head` items, as well as links to documentation.\n\n## Entry Settings\n\nEntry Settings consist of meta data and SEO settings for a Page or Page Group entry. Data set entries do not have settings.\n\n## Globals\n\nGlobals (formerly called Content Clippings) is a unique dataset that every Zesty.io instance has. Clippings has fields for the static content used on multiple pages or endpoints on the instance, such as the logo, site name and footer/copyright text.\n\n## Headless Sets\n\nHeadless Sets (formerly called Data Sets) are a type of content model. Headless Sets do not have paths or view files associated with them. Headless Sets, like all content models, are globally available with Parsley using the reference name. Use headless sets for repeated design elements on a page, such as homepage sliders, or FAQ.\n\n## Health Section\n\nThe Health Section (formerly called Health tab or SEO tab) provides an interface to manage redirects, create a robot.txt, and crawl an instance for broken links.\n\n## Instance\n\nAn Instance is a single account (website/web instance) in Zesty.io. Each instance is a collection of content models, content entries, and files for generating websites, endpoints and data feeds.\n\n## Instances Dashboard\n\nThe Instances Dashboard is the homescreen of the accounts interface. It lists all of the instances a user has access to, a prompt to create new instances, and will display any open invites.\n\n## Instance Settings Drawer\n\nThe Instance Settings Drawer contains an instance's administrative settings such as domain, user access, adding a team, and more. The drawer is accessed via the Accounts interface's instance card which has a cog icon which opens the instance settings drawer when clicked.\n\n## LESS Variables\n\nLESS Variables are variables you can access and edit through the Schema Section (formerly called Config Tab) using a non-technical interface to update colors, fonts, and other design elements. LESS Variables can also be access via the palette icon in the Editor section.\n\n## Live Preview\n\nThe Live Preview is a separate window to view the preview version of your instance. The window loads the view you're working on and refreshes on save.\n\n## Loader\n\nThe Loader is a special snippet file included in and required on every Zesty.io instance. The loader creates the body of the page and is loaded inside of a page's \\<body> tags. It's common to include global elements such as headers and footers in the loader file too. At minimum the loader _must_ have the Parsley call `{{ current_view }}` in order to view any content.\n\n## Media Folders\n\nMedia Folders or groups are located under the top-level Media Bin and are used for organizing an instance's media files.\n\n## Media Section\n\nThe Media Section is for uploading and organizing an instance's media.\n\n## Page Group\n\nPage Groups (also known as Page Sets or Group with a View) are type of Content Model. Page group entries all share a view file for their template in the Editor tab, have meta info and urls paths, and are displayed in a table view in the Content Tab. Used for groups of like pages that share a parent page like articles or team members.\n\n## Parsley\n\nParsley is the contextual templating language of Zesty.io. Parsley is used inline with HTML and other markup languages to dynamically reference content and data from the Content section of Zesty.io. Parsley uses double curly braces or braces `{{ }}` to open and close template expressions. Inside these braces a developer can use Parsley functions, reference content schema properties, and create database queries. These templating expressions are written alongside standard HTML.\n\n## Parsley Reference Name\n\nThe Parsley Reference Name is a user-set value that's used to reference a content model or field using Parsley.\n\n## Publishing Sidebar\n\nThe Publishing Sidebar is located to the right of the content editing view.\n\n## Schema Section\n\nThe Schema Section (formerly called Config Tab) controls the instance settings, LESS variables, and content structure, including creating and editing content models and fields.\n\n## Single Instance Overview\n\nThe Single Instance Overview is a view in the accounts interface providing details and options for an instance and its users and teams. It is accessed through the gear icon in the grid view and in the list view is accessed by selecting an instance.\n\n## Single Page\n\nThe Single Page is a type of content model. Single pages can be used to create a single content entry listed in the content tab. Each single page entry is connected to a view file in the editor and has meta info and a url path.\n\n## Site Crawler\n\nSite Crawler will check your site for any bad links and suggest ways to fix them. You can find it in the Health Section.\n\n## Snippet\n\nA snippet is a file in the Editor that contains a piece of code that is abstracted from a view(s). Snippets are often used for repetitive pieces of code such as a header or footer and for complex pieces of codes to simplify a view. To add a snippet in a view use the [Parsley include](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#include) call.\n\n## Support Page\n\nThe Support Page is a view in the Accounts interface which shows users how to access various channels of support such as Slack, email, and documentation.\n\n## Table View\n\nThe Table View is a view in the Content Section displaying all the entries of a Content Model as a table, with field names as column headers and each entry has its own row.\n\n## ZUID\n\nZUID stands for Zesty.io Unique ID. A ZUID is a unique identifier assigned to every component within Zesty.io, including each instance, content model, field, view, content item, user, role, ream, and blueprint. Relationships in Zesty.io are stored by their ZUID.\n","category":"guides","service":"introduction"},{"name":"Common Concepts","url":"/introduction/guides/getting-started","objectId":"-M6bPC2IUwi2MXhxC2FQ","item":[],"content":"---\ndescription: >-\n  Zesty.org is the knowledge base for the Zesty.io CMS Platform. Learn the\n  intricacies of Zesty.io content technology and how to implement websites,\n  headless CMS apps, and marketing components.\n---\n\n# Common Concepts\n\n## Getting Started with Your Instance\n\nThere are 4 steps to getting started with your instance. The first guide will give you an overview of how Zesty.io's core components work together. Next we'll dive into the basics of building our schema, entering content, and the last step - coding our views. See the guides below for more information.\n\n1. [Overview: making the connection between Schema, Content, and Code](https://zesty.org/guides/the-connection-between-schema-content-and-code)\n2. [Building the Schema and Selecting Fields](https://zesty.org/guides/building-the-schema-and-selecting-fields)\n3. [Content Entry, Drafts, and Publishing Basics](https://zesty.org/guides/content-entry-drafts-and-publishing)\n4. [Editor and Coding Basics](https://zesty.org/guides/editor-and-coding-basics)\n\n","category":"guides","service":"introduction"},{"name":"getting-started","url":"/introduction/guides/getting-started","item":[{"name":"Cloud Content Instance","url":"/introduction/guides/getting-started/cloud-content-instance","objectId":"-M6bMOk_jFyqZjvX3895","item":[],"content":"---\ndescription: >-\n  A Zesty.io Cloud Content Instance is a collection of schema, web views, and\n  APIs to create, manage, and distribute content to browsers, applications,\n  and/or IoT devices. 100% managed and automated.\n---\n\n# Cloud Content Instance\n\n## What is a Cloud Content Instance?\n\nCloud Content Instances are the primary product of Zesty.io. Content Instances are implementations of Zesty.io used to create and manage text, image, or video based content that is distributed to digital presentations. Digital presentation can include, but are not limited to: websites, web and mobile applications, video game consoles, Alexa apps, Roku apps, digital signage, etc.. Content Instances are set to replace traditional content management systems.\n\n### What type of Content Can be Stored?\n\nTraditionally, Zesty.io has been used for brochure style, public marketing content, that is most commonly distributed through websites. This includes, but is not limited to, product content, blogging (content marketing) content, promotional content, business information content, educational content.\n\nAlternate styles of content include internal intranet content (Learning Management), instructional content to control environments or interactive digital experiences, or content that is primarily interacted with by voice commands.\n\n### Powering Multiple Digital Presentations\n\nWebsites are the most common vehicle for digital content consumption. That is why we have the [Site Engine](../../../webengine/guides/web-engine/) to quickly get search engine friendly websites off the ground from a content instance. As we progress further into our digital world, websites are not the only place digital content lives or is consumed. A content instance really thrives when its content powers multiple presentations simultaneously. The most common example is article (content marketing) content loading both on a website and a mobile app. The value of that is two-fold: the content owner gain search engine rich website content while also leveraging a mobile app to use push notification to their user base.\n\n### Cloud Content Instances vs. Open-Source Content Management Systems (CMS)\n\nTo launch content in most legacy systems, a developer would often set up open-source website software (CMS) or statically launch files onto a web server. This is a quick way to get a project off the ground, and if the CMS being used is open-source, the content can be edited right away. The primary issues with that setup revolves around business needs and transportation of content.\n\n#### Disadvantages to self-managed Open-Source Software Installations\n\n* **Content is Siloed:** Lives on a database installed on a remote server tied to a single application. This results in the same content living in multiple places that requires repeated updates to distribute the same content across multiple presentations.\n* **Software Decay:** Updates may not be possible after customization of the CMS. Software may jump versions, leaving prior installations on decaying software.\n* **Flailing Security:** Maintenance is a necessary evil of open-source servers and software. A developer must stay on top of monthly, event daily changes to protect the installation.\n* **Growing Maintenance:** When multiple website are needed, multiple software and/or server installs are necessary. That increases the time it takes to stay on top of maintenance.&#x20;\n* **Scalability & Reliability:**  If demand outweighs the resources allocated to a single software/server setup, performance will weaken and the website may not serve in a timely fashion, or even at all when under consumer demand.\n* **Stacking Responsibilities:** As need for project expansion is demanding, the above issues compound and require dedicated full time developer maintain and continue iteration. This results in a heavy monetary and opportunity costs for the business due to expensive development resources and/or reduction of speed to implement new presentations.\n\n{% hint style=\"warning\" %}\nSome CMS software solutions are free to get started, but as time passes hidden costs of maintaining, securing, and upgrading start to add up.\n{% endhint %}\n\n#### Advantages to Cloud Content Instances\n\n* **Content Anywhere:** Manage content in a single place and use it to update multiple presentations.&#x20;\n* **Seamless Updates:** Zesty.io unique wrote their software to update behind the scenes without a need for developer maintenance.&#x20;\n* **Constant Security:** Security is constantly monitored, tested, and maintained by a dedicated team.\n* **Internet Scale & Reliability:** Ready for mass consumption, the system distributes content to cached edge points and uses anycast internet protocol routing to deliver sub-second page load.\n* **No Maintenance:** Developers can focus on delivering experiences while trusting a dedicated to upkeep cloud infrastructure.\n* **Content Repurposed:** Content can be shared between multiple instances, making large scale installs and wide-spread information projects easy to deliver and maintain.\n* **Increased Team Performance:** Do more with less facilitation and coordination. Resources once spent on maintenance and up-time can be redirected on new presentations.\n\n{% hint style=\"success\" %}\nThe cost to run a Cloud Content Instance may be quickly justified when comparing it to developer labor costs required to maintain self-installed custom solutions.\n{% endhint %}\n\n## Anatomy of a Content Instance\n\nEach Content Instance is comprised of three main components: **Content Schema**, a **Media Bin**, and optional **Website Engine** functionality. When an Instance is created, it is ready for any content configuration. Once configured, content items can be imported or entered, at which point content stored on the instance can be made available immediately through the Instant Content API (headless) or fully functional website (Site Engine).\n\n### Content Schema\n\nContent Schema is where the structure of how you store and access data is defined. There is no limit or rules in how simple or complicated the schema can be; what is important is that it matches your use case. Content Schema is comprised of **Content Models**, which are individual definitions of how to store content. One simple example of a content models is **Blog Articles**, which would have the fields title \\[text], article\\_content \\[wysiwyg], and data\\_created \\[date].\n\nIn legacy systems and even most modern systems, developers have to build databases and model tables. This includes columns, IDs, relationships in order to capture data and edit data. A lot of times this is used to power websites. This is cumbersome and difficult. This is why CMS schemas exist- they are the UI abstraction over the database. As a user of Zesty.io, you simply provide a definition of your data model, and we handle all the underpinning to store your definitions and data efficiently.\n\n### Micro DAM (Media Storage)\n\nA Micro DAM (digital asset manager) is an abstract file system that stores files in the Zesty.io cloud. Every Content Instance is provisioned with a Micro DAM. Any type of file may be uploaded to a Micro DAM, examples include Images (PNG, JPG, GIF), PDFs, Video (MP4, OGG), Fonts (OTF, WOFF, TTF), SVGs, YAML, Javascript, CSS, etc.\n\n{% content-ref url=\"../../../media/guides/media-storage-micro-dam/\" %}\n[media-storage-micro-dam](../../../media/guides/media-storage-micro-dam/)\n{% endcontent-ref %}\n\n### Web Engine\n\nThe [Web Engine](../../../webengine/guides/web-engine/) is a fully managed and cloud hosted website serving platform. It includes a templating language to access the Content Schema on an instance between HTML markup. It enables developers to quick launch scalable websites without needing to optimize it for page load time or search engines.\n\n{% content-ref url=\"../../../webengine/guides/web-engine/\" %}\n[web-engine](../../../webengine/guides/web-engine/)\n{% endcontent-ref %}\n","category":"guides","service":"introduction"},{"name":"The Connection Between Schema, Content, and Code","url":"/introduction/guides/getting-started/the-connection-between-schema-content-and-code","objectId":"-M6b7jRehv3YyKgIcb3A","item":[],"content":"---\ndescription: >-\n  The connection between how Schema, Content, and Code (Editor) work together\n  may not be readily clear, however this article should help clarify those\n  connections.\n---\n\n# The Connection Between Schema, Content, and Code\n\n## Overview\n\nSchema (content models and fields), Content, and Code are all connected to one another through names, labels, and reference names; however unless a user sees all those items at once it can be difficult to put it all together. First of all we'll go through the relevant details for each section and then we'll put it all together.\n\n## Schema\n\nThe Schema section is where we create content models and add fields to those content models.\n\nEach content model has 2 names:\n\n* Display Name\n* Reference Name\n\nOne of these names is used to identify that item in Content section and the other name is used to identify that item in the Code section (which we'll cover in the Putting it all Together section below).\n\n![Content model creation Display Name and Reference Name text fields.](../../../.gitbook/assets/schema-names.png)\n\nAfter a content model is created the next step is to add fields to those content models.\n\nEach field has 2 names:\n\n* Field Label\n* Field Name\n\nOne of these is used to identify a field in the Content section, and the other is used to identify that field in the Code section.\n\n![Field creation: Field Label and Field Name text fields.](../../../.gitbook/assets/fields-names.png)\n\n## Content\n\nThe Content section is where users can enter their content. Content models' Display Names are listed in the left-hand navigation (outlined in purple below).\n\n![Each contents model's Display Name shows in the Content section's left-hand navigation.](../../../.gitbook/assets/content-schema-names.png)\n\nWhen a content model is selected from the left-hand navigation sidebar, the main portion of the screen will show that model's fields.\n\n![Content editing view showing editable fields outlined in purple.](../../../.gitbook/assets/fields-and-content-editing-screen.png)\n\nIf the selected model is a [headless set](https://zesty.org/services/manager-ui/schema/content-models#headless) or [multi-page set](https://zesty.org/guides/content-entry-drafts-and-publishing#multi-page-sets) then the [table-listing view](https://zesty.org/services/manager-ui/content#table-listing-view) will show in the main portion of the screen and when an item is selected from the table-listing view, the main portion of the screen will show the content editing view.\n\n![Table-listing view shows items in its selected set.](<../../../.gitbook/assets/table-listing view.png>)\n\nEach field's name is shown above it. The name that is shown is that field's Field Label which was assigned when the field was create in the Schema section.\n\n![Field labels, which were assign in the Schema section, shown in the Content section.](../../../.gitbook/assets/field-labels-in-conent-section.png)\n\n## Code (Editor)\n\nWe need to know which content model(s) and/or field(s) you want to code in before you get started. Sometimes it's easy to identify the items that you need, especially if they were named based on their function (e.g., a blog page named Blog, or blog tag set named Blog Tags).\n\nWhen we're referencing a field on a page then we need to use Parsley to call that field within its proper scope using `{{ this. }}`. `this` provides the scope and once the user types a `.` or period, Zesty.io will populate a list of available fields and calls for that content model. Fields will be identified by their Field Name which was assigned when the field was added in the Schema section. In the image below I have outlined the available fields for this page in purple.\n\n![After scope is defined Zesty.io lists available fields which are outlined in purple here.](../../../.gitbook/assets/code-available-fields-in-scope.png)\n\nWhen accessing items in a multi-page set or headless set it is often necessary to use a [Parsley each loop](https://zesty.org/services/web-engine/introduction-to-parsley/each-loop-deep-dive). Each loops allow users to iterate through a multi-page and headless content model's items. When using an each loop you need to know the name of the content model that you want to loop through. A content model's name is defined by its Reference Name which was assigned when the multi-page and headless content model was created. In the each loop below the content model's Reference Name is underlined in purple.\n\n![In each loops use the content model's Reference Name to access it.](../../../.gitbook/assets/code-each-loop-for-sets.png)\n\nIn order to access a content model's fields in an each loop use the variable defined in the each loop declaration - in this example the variable is `sample`- followed by a `.` or period and Zesty.io will list the available fields and calls for the scope of the variable.\n\n## Putting it all Together\n\nNow that we have laid out the pertinent details of each section and explained, in a limited way as to how these sections are connected by their names and labels, let's put all the pieces together.\n\nIt all starts with Schema. When content models are created they are assigned a **Display Name** and a **Reference Name**. And when fields are added to those content models, they're assigned a **Field Label** and a **Field Name**.\n\n{% hint style=\"info\" %}\n**Content Models** have a:\n\n* Display Name &#x20;\n* Reference Name &#x20;\n\n**Fields** have a:\n\n* Field Label &#x20;\n* Field Name\n{% endhint %}\n\nAfter content models are created the next step is to add content. In the Content section content models are identified by their **Display Name**. A content model's fields are identified by their **Field Label**.\n\nAfter entering content it's time to code. In the Code section content models are identified by their **Reference Name** and fields are identified by their **Field Name**.\n\nBelow is a visual representation of how all these pieces work together. Click to view a larger image.\n\n![Diagram of how Schema, Content, and Code work together.](../../../.gitbook/assets/schema-content-code-connection-diagram.png)\n","category":"guides","service":"introduction"},{"name":"Environments & Publishing","url":"/introduction/guides/getting-started/environments-and-publishing","objectId":"-Li-LTC3jR7MVGhBer3J","item":[],"content":"---\ndescription: Information on Publishing Content Items and How\n---\n\n# Environments & Publishing\n\n### WebEngine Environments\n\nIn Zesty.io, there are two primary viewable WebEngine URLs for an instance, we call them environments.&#x20;\n\n* **Live Environment:** Production URL (your domain)\n* **Stage Environment:** Stage URL (zesty hashed domain)\n\nBoth these domains are accessible through the account's interface, when viewing your instance settings, or through the instance manager in various areas when editing content or code.\n\nThe instance's production URL is the domain you set in accounts for example, ours is `www.zesty.io`. The stage URL (sometimes called preview) is generated by Zesty.io and looks like `https://xyz-dev.webengine.zesty.io`\n\n## How Publishing Works Between Environments\n\nThe publish action exists for both content items and code files; publish is used to put content or code into production. This is advantageous because it allows both content authors and developers to preview changes before publishing them to the world wide web. Content Items and Code Files you edit in Zesty.io always save as a version in stage. To move a version into production you must publish. Un-publishing removes an item from production, but keeps a copy in stage.&#x20;\n\n## What does Publishing do?\n\nThe publish action sets a content item version to be accessible through the production website.&#x20;\n\n## What does Un-publishing do?\n\nAn unpublish action immediately removes a content item from production. Code files do not have unpublish, but rollbacks and deletes.&#x20;\n\n","category":"guides","service":"introduction"},{"name":"Roles & Permissions","url":"/introduction/guides/getting-started/roles-and-permissions","objectId":"-Lmual8dtNiZ6Esd90T0","item":[],"content":"# Roles & Permissions\n\nUser Roles and Permissions are applied to User or [Team access](https://zesty.org/guides/adding-a-team) to via the Accounts [instance settings drawer](https://zesty.org/services/accounts-ui/instance-settings-drawer). Role permissions range from limiting the types of resources a user can access to whether they can save, create, delete or publish.\n\nAll users are managed by Owner and Admin user roles. Access and roles are specific to an individual user's role on a single instance. If they are a member of a team then their access will be limited to the team's role as its assigned on an instance.\n\n{% hint style=\"info\" %}\nNote: the Leads and Analytics in the screenshots below are only visible if an instance has[ form that uses Zesty's ZLF](https://zesty.org/services/manager-ui/leads#how-to-connect-forms-to-zlf) and if [analytics have been activated](https://zesty.org/services/web-engine/analytics).\\\n\\\nAll roles have access to publishing/unpublishing and deleting content _except for the Contributor role_.&#x20;\n{% endhint %}\n\n### Base Roles Types\n\n#### **Owner**\n\nFull access to all sections: Content, Media, Web IDE, Leads, Analytics, Schema, Health, Audit Trail, and Settings. In Accounts they have full access as well which includes the ability to: launch instances, add domains, invite new users and set their roles, add a team, create tokens, and reset the blueprint.&#x20;\n\n#### **Admin**&#x20;\n\nAdmins have the same privileges as the Owner role except for deleting other users.\n\n![Admin role access view.](../../../.gitbook/assets/admin-role-access.png)\n\n#### Developer\n\nAccess to: Content, Media, Web IDE, Leads, Analytics, Schema, Health, and Settings sections.\n\n![Developer role access view.](../../../.gitbook/assets/developer-role-access.png)\n\n#### SEO&#x20;\n\nAccess to: Content, Media, Leads, Analytics, and Health sections.\n\n![SEO role access view.](../../../.gitbook/assets/seo-role-access.png)\n\n#### Publisher\n\nAccess to Content, Media, Leads, and Analytics sections.&#x20;\n\n![Publisher role access view.](../../../.gitbook/assets/publisher-role-access.png)\n\n#### Contributor\n\nAccess to Content and Media sections.&#x20;\n\n![Contributor role access view.](../../../.gitbook/assets/contributor-role-access.png)\n\nContributors can create and edit but they **cannot publish** content. To publish new content, contributors must submit a workflow request to a user with publishing access.&#x20;\n\nContributors can access media and add files, but they **cannot delete** files.\n\n![Contributor role content view.](<../../../.gitbook/assets/contributor-role-content-access (1).png>)\n","category":"guides","service":"introduction"},{"name":"Locales / Multi-Lang Content","url":"/introduction/guides/getting-started/i18n-multi-language","objectId":"-M6ekDDCieBYqC0dAYd5","item":[],"content":"---\ndescription: Zesty.io Supports multiple locales/languages for each content item\n---\n\n# Locales / Multi-Lang Content\n\nWhen a Zesty.io Content Instance is created, it uses English as the default language. It is possible to add more languages to a Zesty.io Content Instance. Multi-lang content is premium feature of Zesty.io, reach out to your account manager to learn more.\n\n## Adding Multi-lang Content\n\nThe API must be used to add additional locales/languages to a Content Instance.\n\n{% hint style=\"info\" %}\nNote: adding a language makes that language's relative pages available in preview, to have a added language be accessible to the live production domain, you need to activate the language&#x20;\n{% endhint %}\n\n{% swagger baseUrl=\"https://8-XYZ-XYZXYZ.api.zesty.io\" path=\"/v1/env/langs/\" method=\"post\" summary=\"Adding a Language\" %}\n{% swagger-description %}\nPosting to the `/env/langs/` API endpoint will create a new language for all content items in a Zesty.io Content Instance. Rest Documentation: https://instances-api.zesty.org/#082ef04e-b251-493f-92c1-062994292702\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"code\" type=\"string\" %}\nChose a code from the Table Below\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## What happens when a new language is added?\n\nWhen a new language is created, Zesty.io's API will automate a process to duplicate all content into a language specific version of that content. The default language is content is copied into the new language version (it is not automatically translated). For example, if you had an english about page (url `/about/`), and added Spanish with the locale of Mexico, a new content items would be created with the URL `/es-mx/about/` and the content item would be pre-filled with the default language content. These means you would have a Spanish placeholder content item with english words in it to start. All copied new language pages start at version one (with default language content pre-filler) and have their own version control.\n\n{% hint style=\"info\" %}\nThe default language can only be chosen at the creation of a content instance. Talk to a Zesty.io support tech for help doing this.\n{% endhint %}\n\n## How to Activate a language\n\nLanguages are added \"non-active\" meaning they are not accessible via the published website. It is setup that way so developers can add a language and prepare all the content by updates and publishing without affecting the live website. Once a language is ready to go live, it must be activated.&#x20;\n\n{% swagger baseUrl=\"https://8-XYZ-XYZXYZ.api.zesty.io\" path=\"/v1/env/langs/fr-FR?action=activate\" method=\"put\" summary=\"Activating a Language\" %}\n{% swagger-description %}\nSet a language to activate, which means the language's published pages become accessible to the live website. See REST docs here https://instances-api.zesty.org/#a8e6496e-c430-4a75-9ab3-8479b74e479c\n{% endswagger-description %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## How Does Web Engine Handle Multi-lang/Multi-Locale Content\n\nWhen Web Engine detects there are multiple languages on a Content Instance it will add specific code that is read by browsers, screen readers, and search engines to direct users to different languages/locales of the content it serves.\n\nFor example purposes, let's use the domain www.acme.com, and assume it has two languages, English (en-us) and Spanish (es-mx).\n\n**Server Headers Appended for Locale/Multi-lang, per** [**MDN Specs**](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language)\\*\\*\\*\\*\n\n{% code title=\"Server headers served when accessing https://www.acme.com/about/\" %}\n```\nContent-Language: en-us\n```\n{% endcode %}\n\n**HTML Appended for Locale/Multi-lang, per** [**Google Specs**](https://support.google.com/webmasters/answer/189077?hl=en)\\*\\*\\*\\*\n\n{% code title=\"Head and HTML additions on page https://www.acme.com/about/\" %}\n```markup\n<html lang=\"en-us\">\n<head>\n  <title>About Acme, Inc</title>\n  <link rel=\"alternate\" hreflang=\"en-us\"\n        href=\"https://www.acme.com/about/\" />\n  <link rel=\"alternate\" hreflang=\"es-mx\"\n        href=\"https://www.acme.com/es-mx/about/\" />\n  <link rel=\"alternate\" hreflang=\"x-default\"\n        href=\"https://www.acme.com/about/\" />\n</head>\n```\n{% endcode %}\n\n**XML Sitemap**\n\nAuto-generated sitemap gets additional language qualifiers and pointers.\n\n{% code title=\"Served at https://www.acme.com/sitemap.xml\" %}\n```markup\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  <url>\n    <loc>http://www.example.com/english/page.html</loc>\n    <xhtml:link \n               rel=\"alternate\"\n               hreflang=\"de\"\n               href=\"http://www.example.com/deutsch/page.html\"/>\n    <xhtml:link \n               rel=\"alternate\"\n               hreflang=\"de-ch\"\n               href=\"http://www.example.com/schweiz-deutsch/page.html\"/>\n    <xhtml:link \n               rel=\"alternate\"\n               hreflang=\"en\"\n               href=\"http://www.example.com/english/page.html\"/>\n  </url>\n```\n{% endcode %}\n\n## Accessing Multi-Lang Locales with Parsley\n\nAccessing the current language using Parsley is done by calling&#x20;\n\n* `{{instance.current_lang.code}}`\n* `{{instance.current_lang.id}}`\n* `{{instance.current_lang.name}}`\n\n```markup\n  <!-- to access them globally with javascript, add this to the top of the loader file-->\n  <script>\n  CURRENT_LANG_ID = '{{instance.current_lang.id}}'; // 1\n  CURRENT_LANG_NAME = '{{instance.current_lang.name)}}'; // English (United States) \n  CURRENT_LANG_CODE = '{{instance.current_lang.code)}}'; // en-us\n  </script> \n  <!-- this method is useful to array filter out locale content when using headless endpoint with client side javascript-->\n```\n\nParsley can be used to iterate through available languages. `{{each langs as lang}}` give you access to&#x20;\n\n* `{{lang.code}}` string e.g. `en-US` , `es-MX`\n* `{{lang.default}}` Boolean 1 or 0, 1 is true\n* `{{lang.name}}` string e.g. `English (United States)`, `Spanish (Mexico)`\n\n![](<../../../.gitbook/assets/image (62).png>)\n\n{% code title=\"Parsley example usage for each looping through langs\" %}\n```markup\n{{each langs as lang}}\n\t{{if {lang.default} == 1}}\n\t{{$path = / }}\n\t{{else}}\n\t{{$path = /{lang.code}/ }}\n\t{{end-if}}\n\t<a class=\"navbar-item\" href=\"{{$path}}\">\n\t\t<span class=\"icon mr-2\">\n\t\t\t<img src=\"https://4q6k83l9.media.zestyio.com/{{lang.code}}.png?width=32\" alt=\"{{lang.name}} flag\"/>\n\t\t</span>\n\t\t<span>\n\t\t\t{{lang.name}}\n\t\t</span>\n\t</a>\n{{end-each}}\n```\n{% endcode %}\n\n## List of Languages Zesty.io Supports\n\nEach language has an associated code, that code is used in the API to create a new language for a Content Instance.\n\n| Code   | Language                                                |\n| ------ | ------------------------------------------------------- |\n| af     | Afrikaans                                               |\n| af-ZA  | Afrikaans (South Africa)                                |\n| ar     | Arabic                                                  |\n| ar-AE  | Arabic (U.A.E.)                                         |\n| ar-BH  | Arabic (Bahrain)                                        |\n| ar-DZ  | Arabic (Algeria)                                        |\n| ar-EG  | Arabic (Egypt)                                          |\n| ar-IQ  | Arabic (Iraq)                                           |\n| ar-JO  | Arabic (Jordan)                                         |\n| ar-KW  | Arabic (Kuwait)                                         |\n| ar-LB  | Arabic (Lebanon)                                        |\n| ar-LY  | Arabic (Libya)                                          |\n| ar-MA  | Arabic (Morocco)                                        |\n| ar-OM  | Arabic (Oman)                                           |\n| ar-QA  | Arabic (Qatar)                                          |\n| ar-SA  | Arabic (Saudi Arabia)                                   |\n| ar-SY  | Arabic (Syria)                                          |\n| ar-TN  | Arabic (Tunisia)                                        |\n| ar-YE  | Arabic (Yemen)                                          |\n| az     | Azeri (Latin)                                           |\n| az-AZ  | Azeri (Azerbaijan)                                      |\n| be     | Belarusian                                              |\n| be-BY  | Belarusian (Belarus)                                    |\n| bg     | Bulgarian                                               |\n| bg-BG  | Bulgarian (Bulgaria)                                    |\n| bs-BA  | Bosnian (Bosnia and Herzegovina)                        |\n| ca     | Catalan                                                 |\n| ca-ES  | Catalan (Spain)                                         |\n| cs     | Czech                                                   |\n| cs-CZ  | Czech (Czech Republic)                                  |\n| cy     | Welsh                                                   |\n| cy-GB  | Welsh (United Kingdom)                                  |\n| da     | Danish                                                  |\n| da-DK  | Danish (Denmark)                                        |\n| de     | German                                                  |\n| de-AT  | German (Austria)                                        |\n| de-CH  | German (Switzerland)                                    |\n| de-DE  | German (Germany)                                        |\n| de-LI  | German (Liechtenstein)                                  |\n| de-LU  | German (Luxembourg)                                     |\n| dv     | Divehi                                                  |\n| dv-MV  | Divehi (Maldives)                                       |\n| el     | Greek                                                   |\n| el-GR  | Greek (Greece)                                          |\n| en     | English                                                 |\n| en-AU  | English (Australia)                                     |\n| en-BZ  | English (Belize)                                        |\n| en-CA  | English (Canada)                                        |\n| en-CB  | English (Caribbean)                                     |\n| en-GB  | English (United Kingdom)                                |\n| en-IE  | English (Ireland)                                       |\n| en-JM  | English (Jamaica)                                       |\n| en-NZ  | English (New Zealand)                                   |\n| en-PH  | English (Republic of the Philippines)                   |\n| en-TT  | English (Trinidad and Tobago)                           |\n| en-US  | English (United States)                                 |\n| en-ZA  | English (South Africa)                                  |\n| en-ZW  | English (Zimbabwe)                                      |\n| eo     | Esperanto                                               |\n| es     | Spanish                                                 |\n| es-AR  | Spanish (Argentina)                                     |\n| es-BO  | Spanish (Bolivia)                                       |\n| es-CL  | Spanish (Chile)                                         |\n| es-CO  | Spanish (Colombia)                                      |\n| es-CR  | Spanish (Costa Rica)                                    |\n| es-DO  | Spanish (Dominican Republic)                            |\n| es-EC  | Spanish (Ecuador)                                       |\n| es-ES  | Spanish (Spain)                                         |\n| es-GT  | Spanish (Guatemala)                                     |\n| es-HN  | Spanish (Honduras)                                      |\n| es-MX  | Spanish (Mexico)                                        |\n| es-NI  | Spanish (Nicaragua)                                     |\n| es-PA  | Spanish (Panama)                                        |\n| es-PE  | Spanish (Peru)                                          |\n| es-PR  | Spanish (Puerto Rico)                                   |\n| es-PY  | Spanish (Paraguay)                                      |\n| es-SV  | Spanish (El Salvador)                                   |\n| es-UY  | Spanish (Uruguay)                                       |\n| es-VE  | Spanish (Venezuela)                                     |\n| et     | Estonian                                                |\n| et-EE  | Estonian (Estonia)                                      |\n| eu     | Basque                                                  |\n| eu-ES  | Basque (Spain)                                          |\n| fa     | Farsi                                                   |\n| fa-IR  | Farsi (Iran)                                            |\n| fi     | Finnish                                                 |\n| fi-FI  | Finnish (Finland)                                       |\n| fo     | Faroese                                                 |\n| fo-FO  | Faroese (Faroe Islands)                                 |\n| fr     | French                                                  |\n| fr-BE  | French (Belgium)                                        |\n| fr-CA  | French (Canada)                                         |\n| fr-CH  | French (Switzerland)                                    |\n| fr-FR  | French (France)                                         |\n| fr-LU  | French (Luxembourg)                                     |\n| fr-MC  | French (Principality of Monaco)                         |\n| gl     | Galician                                                |\n| gl-ES  | Galician (Spain)                                        |\n| gu     | Gujarati                                                |\n| gu-IN  | Gujarati (India)                                        |\n| he     | Hebrew                                                  |\n| he-IL  | Hebrew (Israel)                                         |\n| hi     | Hindi                                                   |\n| hi-IN  | Hindi (India)                                           |\n| hr     | Croatian                                                |\n| hr-BA  | Croatian (Bosnia and Herzegovina)                       |\n| hr-HR  | Croatian (Croatia)                                      |\n| hu     | Hungarian                                               |\n| hu-HU  | Hungarian (Hungary)                                     |\n| hy     | Armenian                                                |\n| hy-AM  | Armenian (Armenia)                                      |\n| id     | Indonesian                                              |\n| id-ID  | Indonesian (Indonesia)                                  |\n| is     | Icelandic                                               |\n| is-IS  | Icelandic (Iceland)                                     |\n| it     | Italian                                                 |\n| it-CH  | Italian (Switzerland)                                   |\n| it-IT  | Italian (Italy)                                         |\n| ja     | Japanese                                                |\n| ja-JP  | Japanese (Japan)                                        |\n| ka     | Georgian                                                |\n| ka-GE  | Georgian (Georgia)                                      |\n| kk     | Kazakh                                                  |\n| kk-KZ  | Kazakh (Kazakhstan)                                     |\n| kn     | Kannada                                                 |\n| kn-IN  | Kannada (India)                                         |\n| ko     | Korean                                                  |\n| ko-KR  | Korean (Korea)                                          |\n| kok    | Konkani                                                 |\n| kok-IN | Konkani (India)                                         |\n| ky     | Kyrgyz                                                  |\n| ky-KG  | Kyrgyz (Kyrgyzstan)                                     |\n| lt     | Lithuanian                                              |\n| lt-LT  | Lithuanian (Lithuania)                                  |\n| lv     | Latvian                                                 |\n| lv-LV  | Latvian (Latvia)                                        |\n| mi     | Maori                                                   |\n| mi-NZ  | Maori (New Zealand)                                     |\n| mk     | FYRO Macedonian                                         |\n| mk-MK  | FYRO Macedonian (Former Yugoslav Republic of Macedonia) |\n| mn     | Mongolian                                               |\n| mn-MN  | Mongolian (Mongolia)                                    |\n| mr     | Marathi                                                 |\n| mr-IN  | Marathi (India)                                         |\n| ms     | Malay                                                   |\n| ms-BN  | Malay (Brunei Darussalam)                               |\n| ms-MY  | Malay (Malaysia)                                        |\n| mt     | Maltese                                                 |\n| mt-MT  | Maltese (Malta)                                         |\n| nb     | Norwegian (Bokm?l)                                      |\n| nb-NO  | Norwegian (Bokm?l) (Norway)                             |\n| nl     | Dutch                                                   |\n| nl-BE  | Dutch (Belgium)                                         |\n| nl-NL  | Dutch (Netherlands)                                     |\n| nn-NO  | Norwegian (Nynorsk) (Norway)                            |\n| ns     | Northern Sotho                                          |\n| ns-ZA  | Northern Sotho (South Africa)                           |\n| pa     | Punjabi                                                 |\n| pa-IN  | Punjabi (India)                                         |\n| pl     | Polish                                                  |\n| pl-PL  | Polish (Poland)                                         |\n| ps     | Pashto                                                  |\n| ps-AR  | Pashto (Afghanistan)                                    |\n| pt     | Portuguese                                              |\n| pt-BR  | Portuguese (Brazil)                                     |\n| pt-PT  | Portuguese (Portugal)                                   |\n| qu     | Quechua                                                 |\n| qu-BO  | Quechua (Bolivia)                                       |\n| qu-EC  | Quechua (Ecuador)                                       |\n| qu-PE  | Quechua (Peru)                                          |\n| ro     | Romanian                                                |\n| ro-RO  | Romanian (Romania)                                      |\n| ru     | Russian                                                 |\n| ru-RU  | Russian (Russia)                                        |\n| sa     | Sanskrit                                                |\n| sa-IN  | Sanskrit (India)                                        |\n| se     | Sami (Northern)                                         |\n| se-FI  | Sami (Finland)                                          |\n| se-NO  | Sami (Norway)                                           |\n| se-SE  | Sami (Sweden)                                           |\n| sk     | Slovak                                                  |\n| sk-SK  | Slovak (Slovakia)                                       |\n| sl     | Slovenian                                               |\n| sl-SI  | Slovenian (Slovenia)                                    |\n| sq     | Albanian                                                |\n| sq-AL  | Albanian (Albania)                                      |\n| sr-BA  | Serbian (Bosnia and Herzegovina)                        |\n| sr-SP  | Serbian (Serbia and Montenegro)                         |\n| sv     | Swedish                                                 |\n| sv-FI  | Swedish (Finland)                                       |\n| sv-SE  | Swedish (Sweden)                                        |\n| sw     | Swahili                                                 |\n| sw-KE  | Swahili (Kenya)                                         |\n| syr    | Syriac                                                  |\n| syr-SY | Syriac (Syria)                                          |\n| ta     | Tamil                                                   |\n| ta-IN  | Tamil (India)                                           |\n| te     | Telugu                                                  |\n| te-IN  | Telugu (India)                                          |\n| th     | Thai                                                    |\n| th-TH  | Thai (Thailand)                                         |\n| tl     | Tagalog                                                 |\n| tl-PH  | Tagalog (Philippines)                                   |\n| tn     | Tswana                                                  |\n| tn-ZA  | Tswana (South Africa)                                   |\n| tr     | Turkish                                                 |\n| tr-TR  | Turkish (Turkey)                                        |\n| tt     | Tatar                                                   |\n| tt-RU  | Tatar (Russia)                                          |\n| ts     | Tsonga                                                  |\n| uk     | Ukrainian                                               |\n| uk-UA  | Ukrainian (Ukraine)                                     |\n| ur     | Urdu                                                    |\n| ur-PK  | Urdu (Islamic Republic of Pakistan)                     |\n| uz     | Uzbek (Latin)                                           |\n| uz-UZ  | Uzbek (Latin) (Uzbekistan)                              |\n| vi     | Vietnamese                                              |\n| vi-VN  | Vietnamese (Viet Nam)                                   |\n| xh     | Xhosa                                                   |\n| xh-ZA  | Xhosa (South Africa)                                    |\n| zh     | Chinese                                                 |\n| zh-CN  | Chinese (S)                                             |\n| zh-HK  | Chinese (Hong Kong)                                     |\n| zh-MO  | Chinese (Macau)                                         |\n| zh-SG  | Chinese (Singapore)                                     |\n| zh-TW  | Chinese (T)                                             |\n| zu     | Zulu                                                    |\n| zu-ZA  | Zulu (South Africa)                                     |\n\n[https://support.google.com/webmasters/answer/189077?hl=en](https://support.google.com/webmasters/answer/189077?hl=en)\n","category":"guides","service":"introduction"},{"name":"Publishing All Content","url":"/introduction/guides/getting-started/publishing-all-content","objectId":"-Logszv9JDzzfHJiQ-V-","item":[],"content":"---\ndescription: >-\n  Often at a project launch there is a desire to publish all content at once.\n  This explains how you publish all content, or all content on a single model.\n---\n\n# Publishing All Content\n\nTo publish all the latest versions of content items on a content instance make an authenticated get request a described below. Please note, this is not reversible and it will publish all drafted versions.\n\nPublish All endpoints runs against the default language, to publish alternative languages you must send the `lang` option with the language code you wish to publish.&#x20;\n\nNote these endpoints queue individual publishing requests which process at 1,800 a minute.\n\n{% hint style=\"warning\" %}\nThese endpoints must be made with an authentication token made from a user login. Developer tokens will not work.\n{% endhint %}\n\n#### Publish All Content\n\nWill iterate through each model of an instance, and queue all items for publishing.\n\n{% swagger baseUrl=\"https://us-central1-zesty-prod.cloudfunctions.net/publishAllContent\" path=\"\" method=\"get\" summary=\"Publish All Content\" %}\n{% swagger-description %}\nPublishes the latest version of every content item in every content model on an instance. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" required=\"true\" %}\nbearer XXXXXXXXXXXXX ... is your APP_SID cookie or authorization token found in the code tab)\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"instanceZUID\" type=\"string\" required=\"true\" %}\n8-xyz-xyz ... This Zesty Unique Identifier can be found in accounts.zesty.io by clicking into your instance's setting\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"lang\" %}\nThe language code variant, example: es-MX. Defaults to en-US\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Expand to see response example\" %}\n{% code lineNumbers=\"true\" %}\n```json\n{\n    \"totalQueued\": 1,\n    \"estimatedTotalQueueTimeInSeconds\": 0.0005555555555555556,\n    \"instanceZUID\": \"8-f48cf3a682-7dthvk\",\n    \"contentLanguage\": \"en-US\",\n    \"modelZUID\": \"6-852420-2mhz4v\",\n    \"message\": \"1 items queued to publish for instance 8-f48cf3a682-7dthvk. Each item will publish in a queue over the next ~0.00 minutes.\"\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n#### Publish All Model Content\n\nWill iterate through each item in a specific single content model and queue them for publishing.\n\n{% swagger baseUrl=\"https://us-central1-zesty-prod.cloudfunctions.net/publishAllModelContent\" path=\"\" method=\"get\" summary=\"Publish All Model Content\" %}\n{% swagger-description %}\nPublishes the latest version of every content item in every content model on an instance. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" required=\"true\" %}\nbearer XXXXXXXXXXXXX ... is your APP_SID cookie or authorization token found in the code tab)\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"modelZUID\" type=\"string\" required=\"true\" %}\n6-d0497c-h9jhcq ... The model zuid of all the content you want to pulish\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"instanceZUID\" type=\"string\" required=\"true\" %}\n8-xyz-xyz ... This Zesty Unique Identifier can be found in accounts.zesty.io by clicking into your instance's setting\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"lang\" %}\nThe language code variant, example: es-MX. Default to en-US\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Expand to see response example\" %}\n{% code lineNumbers=\"true\" %}\n```json\n{\n    \"totalQueued\": 1,\n    \"estimatedTotalQueueTimeInSeconds\": 0.0005555555555555556,\n    \"instanceZUID\": \"8-f48cf3a682-7dthvk\",\n    \"contentLanguage\": \"en-US\",\n    \"modelZUID\": \"6-852420-2mhz4v\",\n    \"message\": \"1 items queued to publish for instance 8-f48cf3a682-7dthvk. Each item will publish in a queue over the next ~0.00 minutes.\"\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n","category":"guides","service":"introduction"},{"name":"ZUIDs","url":"/introduction/guides/getting-started/zuids","objectId":"-MBpTBBCwg24eIsPPIwu","item":[],"content":"---\ndescription: Zesty.io Unique Identifiers\n---\n\n# ZUIDs\n\nA ZUID (Zesty.io Unique Identifier) is a unique hash that is assign to every resource created by the Zesty.io API. A ZUID is used to access resources through API, control permissions, and identified resource types.&#x20;\n\n* A ZUID is a string\n* A ZUID is typically 15-20 characters in length, but may be up to 50 characters\n* A ZUID contains 3 components, separated by hyphens/dashes\n\nA ZUID is made of three parts separated by hyphens. See this example:\n\n```\n1-1b123a2f0-qw2n4\n```\n\n1. An Integer that identifies the resource type. [Types documented here](https://github.com/zesty-io/zuid-specification/blob/master/prefixes.json))\n2. Time Encoded as a String\n3. A Random Alphanumeric String\n\nLearn more at [https://zesty-io.github.io/zuid-specification/](https://zesty-io.github.io/zuid-specification/)\n","category":"guides","service":"introduction"}],"content":"---\ndescription: >-\n  A Zesty.io Cloud Content Instance is a collection of schema, web views, and\n  APIs to create, manage, and distribute content to browsers, applications,\n  and/or IoT devices. 100% managed and automated.\n---\n\n# Cloud Content Instance\n\n## What is a Cloud Content Instance?\n\nCloud Content Instances are the primary product of Zesty.io. Content Instances are implementations of Zesty.io used to create and manage text, image, or video based content that is distributed to digital presentations. Digital presentation can include, but are not limited to: websites, web and mobile applications, video game consoles, Alexa apps, Roku apps, digital signage, etc.. Content Instances are set to replace traditional content management systems.\n\n### What type of Content Can be Stored?\n\nTraditionally, Zesty.io has been used for brochure style, public marketing content, that is most commonly distributed through websites. This includes, but is not limited to, product content, blogging (content marketing) content, promotional content, business information content, educational content.\n\nAlternate styles of content include internal intranet content (Learning Management), instructional content to control environments or interactive digital experiences, or content that is primarily interacted with by voice commands.\n\n### Powering Multiple Digital Presentations\n\nWebsites are the most common vehicle for digital content consumption. That is why we have the [Site Engine](../../../webengine/guides/web-engine/) to quickly get search engine friendly websites off the ground from a content instance. As we progress further into our digital world, websites are not the only place digital content lives or is consumed. A content instance really thrives when its content powers multiple presentations simultaneously. The most common example is article (content marketing) content loading both on a website and a mobile app. The value of that is two-fold: the content owner gain search engine rich website content while also leveraging a mobile app to use push notification to their user base.\n\n### Cloud Content Instances vs. Open-Source Content Management Systems (CMS)\n\nTo launch content in most legacy systems, a developer would often set up open-source website software (CMS) or statically launch files onto a web server. This is a quick way to get a project off the ground, and if the CMS being used is open-source, the content can be edited right away. The primary issues with that setup revolves around business needs and transportation of content.\n\n#### Disadvantages to self-managed Open-Source Software Installations\n\n* **Content is Siloed:** Lives on a database installed on a remote server tied to a single application. This results in the same content living in multiple places that requires repeated updates to distribute the same content across multiple presentations.\n* **Software Decay:** Updates may not be possible after customization of the CMS. Software may jump versions, leaving prior installations on decaying software.\n* **Flailing Security:** Maintenance is a necessary evil of open-source servers and software. A developer must stay on top of monthly, event daily changes to protect the installation.\n* **Growing Maintenance:** When multiple website are needed, multiple software and/or server installs are necessary. That increases the time it takes to stay on top of maintenance.&#x20;\n* **Scalability & Reliability:**  If demand outweighs the resources allocated to a single software/server setup, performance will weaken and the website may not serve in a timely fashion, or even at all when under consumer demand.\n* **Stacking Responsibilities:** As need for project expansion is demanding, the above issues compound and require dedicated full time developer maintain and continue iteration. This results in a heavy monetary and opportunity costs for the business due to expensive development resources and/or reduction of speed to implement new presentations.\n\n{% hint style=\"warning\" %}\nSome CMS software solutions are free to get started, but as time passes hidden costs of maintaining, securing, and upgrading start to add up.\n{% endhint %}\n\n#### Advantages to Cloud Content Instances\n\n* **Content Anywhere:** Manage content in a single place and use it to update multiple presentations.&#x20;\n* **Seamless Updates:** Zesty.io unique wrote their software to update behind the scenes without a need for developer maintenance.&#x20;\n* **Constant Security:** Security is constantly monitored, tested, and maintained by a dedicated team.\n* **Internet Scale & Reliability:** Ready for mass consumption, the system distributes content to cached edge points and uses anycast internet protocol routing to deliver sub-second page load.\n* **No Maintenance:** Developers can focus on delivering experiences while trusting a dedicated to upkeep cloud infrastructure.\n* **Content Repurposed:** Content can be shared between multiple instances, making large scale installs and wide-spread information projects easy to deliver and maintain.\n* **Increased Team Performance:** Do more with less facilitation and coordination. Resources once spent on maintenance and up-time can be redirected on new presentations.\n\n{% hint style=\"success\" %}\nThe cost to run a Cloud Content Instance may be quickly justified when comparing it to developer labor costs required to maintain self-installed custom solutions.\n{% endhint %}\n\n## Anatomy of a Content Instance\n\nEach Content Instance is comprised of three main components: **Content Schema**, a **Media Bin**, and optional **Website Engine** functionality. When an Instance is created, it is ready for any content configuration. Once configured, content items can be imported or entered, at which point content stored on the instance can be made available immediately through the Instant Content API (headless) or fully functional website (Site Engine).\n\n### Content Schema\n\nContent Schema is where the structure of how you store and access data is defined. There is no limit or rules in how simple or complicated the schema can be; what is important is that it matches your use case. Content Schema is comprised of **Content Models**, which are individual definitions of how to store content. One simple example of a content models is **Blog Articles**, which would have the fields title \\[text], article\\_content \\[wysiwyg], and data\\_created \\[date].\n\nIn legacy systems and even most modern systems, developers have to build databases and model tables. This includes columns, IDs, relationships in order to capture data and edit data. A lot of times this is used to power websites. This is cumbersome and difficult. This is why CMS schemas exist- they are the UI abstraction over the database. As a user of Zesty.io, you simply provide a definition of your data model, and we handle all the underpinning to store your definitions and data efficiently.\n\n### Micro DAM (Media Storage)\n\nA Micro DAM (digital asset manager) is an abstract file system that stores files in the Zesty.io cloud. Every Content Instance is provisioned with a Micro DAM. Any type of file may be uploaded to a Micro DAM, examples include Images (PNG, JPG, GIF), PDFs, Video (MP4, OGG), Fonts (OTF, WOFF, TTF), SVGs, YAML, Javascript, CSS, etc.\n\n{% content-ref url=\"../../../media/guides/media-storage-micro-dam/\" %}\n[media-storage-micro-dam](../../../media/guides/media-storage-micro-dam/)\n{% endcontent-ref %}\n\n### Web Engine\n\nThe [Web Engine](../../../webengine/guides/web-engine/) is a fully managed and cloud hosted website serving platform. It includes a templating language to access the Content Schema on an instance between HTML markup. It enables developers to quick launch scalable websites without needing to optimize it for page load time or search engines.\n\n{% content-ref url=\"../../../webengine/guides/web-engine/\" %}\n[web-engine](../../../webengine/guides/web-engine/)\n{% endcontent-ref %}\n","category":"guides","service":"introduction"}],"content":"---\ndescription: >-\n  A brief overview on getting started with the Zesty.io WebEngine. Includes\n  links to additional Zesty and Parsley documentation.\n---\n\n# Quick Start Guide\n\n### Overview\n\nThe Zesty WebEngine has several features to ensure a smooth integration of you content. Throughout the quick start guide, we highlight some of these features that you will need to get started. Once familiar with general process of creating an Instance and content, a user can take a deep dive into the additional features with ease. Let's get started!\n\n{% hint style=\"info\" %}\n**Hint:** Inside the WebEngine you will notice the Docs button on several screens. These helpers will take you directly to the search results, in the Zesty Docs, that pertain to what you are working on. Try them out!&#x20;\n{% endhint %}\n\n### Logging into the Account Manager\n\nThe Account Manager houses all of your **instances**. Your instances are your unique projects created in the Zesty.io platform.\n\nUpon logging into your account, you are brought to the Account Manager. Within this interface you have administrative control over creating new instances, access to current instances, creating and updating  teams. Viewing options for your interface can be toggled and shown below.\n\n{% hint style=\"info\" %}\nToggling between a List view or Tile view can be done by selecting the option in the top right corner\n{% endhint %}\n\n#### Grid view\n\n![Thumbnail View of all Instances](../../../.gitbook/assets/instance-created-interface.png)\n\n#### List View\n\n![List View of all Instnaces](../../../.gitbook/assets/instances-created-list-view.png)\n\n### Creating a Team\n\nCreating a team facilitates adding an entire team to an instance. This may be most beneficial for extensive platform use that includes several instances and a large roster of developers. By creating a break down of teams by project, you can easily apply an entire team where needed. Navigate to the Teams  interface by selecting the Teams tab located in the top navigation.&#x20;\n\n{% hint style=\"info\" %}\nFollow the link for an in-depth look at [Teams](../../../accounts/ui/teams.md#overview)&#x20;\n{% endhint %}\n\n### Instance Settings\n\nInstance settings can also be accessed from the Account Manager. Selecting an Instance provides access to the Instance Setting Drawer. From here you will have the ability to view and update the **** [**Instance Settings**](instance-settings.md) **** below:\n\n* Add and update domains\n* Find the Instance [ZUID](../glossary.md#zuid) and creation information&#x20;\n* Create access to the Instance\n  * You can add an [individual User](../../../accounts/ui/instance-settings-drawer.md#user-access) to the access of the Instance &#x20;\n  * Or you can create [Team](../../../accounts/ui/instance-settings-drawer.md#team-access) access to an Instance&#x20;\n* Create Access Tokens for:\n  * Atom IDE Plugin\n  * Node SDK\n  * Outside User\n* View Blueprint selected for the Instance\n\nThis process will be covered in more detail in an upcoming section of the Quick Start Guide.\n\n### Next Steps\n\nIn the following several sections, you will be introduced the process of using the Zesty platform. Including creating a new Instance, content and publishing all through the WebEngine.\n","category":"guides","service":"introduction"}],"category":"guides","service":"introduction"},{"name":"Authentication","url":"/authentication","objectId":"hQv5gLbA0JJpHByaFjd2","item":[],"category":"authentication","service":""},{"name":"authentication","url":"/authentication","item":[{"name":"Guides","url":"/authentication/guides","objectId":"mFrjAlRlp67sQTo0KOix","item":[],"content":"# Guides\n\n","category":"guides","service":"authentication"},{"name":"guides","url":"/authentication/guides","item":[{"name":"Auth API","url":"/authentication/guides/auth-api","objectId":"-LoRo66jIKWikpGh_rLX","item":[],"content":"---\ndescription: Authenticate API for Zesty.io Users\n---\n\n# Auth API\n\nAuthentication with Zesty.io is handled by the Auth API which issues a token that grants access to the [Instances API](https://github.com/zesty-io/zesty-org/tree/235f491605bc0837da2a305c282d907ccab019a7/apis/instances-rest-api/README.md), [Accounts API](../../accounts/guides/accounts-api/), and [Media API](auth-api.md).\n\n{% hint style=\"info\" %}\nComplete Auth REST API Documentation: [https://auth-api.zesty.org](https://auth-api.zesty.org/?version=latest)\n{% endhint %}\n\nRoles and permission are managed by the [Accounts API](https://accounts-api.zesty.org/).\n\nThere are 2 types of authentication\n\n* User&#x20;\n* Token-based\n\n## User Authentication\n\nUser authentication is done by providing a specific user account email and password combination. When authenticating as a user you are issued a session token. These are short lived 30 minute sessions that are extended whenever an authenticated action is taken. e.g. Saving content.\n\nEnding a user authenticated session can be done by explicitly logging out. This ends the specifically referenced session. i.e. If you are logged in on another device it will not end that session.\n\n## Token-based Authentication\n\nToken-based authentication is handled by the [Accounts API](https://accounts-api.zesty.org/?version=latest#2d602695-3f14-44c2-b97a-212c402250f6). The issued access tokens are opaque, meaning they can not be parsed to determine their underlying properties such as; role, instance or owner. They are valid for 90 days from creation. In order to create an access token you must have an authenticated user session. Only users with **Admin** or **Owner** roles of an instance can issue a token.\n\nAccess tokens are assigned a role and roles are scoped to instances. Allowing them to take user like actions on the scoped instances. e.g. Creating, Publishing, etc... Tokens can be assigned existing system roles or a custom role defined on an instance. Custom roles are encouraged as they allow providing only the specific access a token needs. Reducing the potential impact of a leaked token.\n\n{% hint style=\"info\" %}\n**Please Note:** The value of access token will **only** be visible upon creation; please store it in a safe location.\n{% endhint %}\n\nEvery access token is assigned a role which describes the permissions the token has against it's scoped instances.\n\n{% hint style=\"info\" %}\n**Please Note:** An access token is a secret which should be guarded carefully and every precaution taken to avoid leaking them. Simply having a token allows the holder that tokens scoped access.\n{% endhint %}\n\nIf you want to find out the available roles on an instance use the [Get Instance Roles](https://accounts-api.zesty.org/?version=latest#e2ac76b2-244c-4570-9734-8e48288e3477) endpoint which will return all the roles (and their IDs) associated with the Instance.\n\nAccess tokens are useful for automated API usage. e.g. CI/CD flows, migrating content, connecting third-party services, etc...\n\nAll actions taken with an access token is recorded by the [AuditTrail API](https://instances-api.zesty.org/?version=latest#026123c3-086e-42bd-9eda-86c2b5de33a2), similiar to users. AuditTrail logs will note the _name_ of the token which was used for the action. These logs will not contain user information. Meaning if a token is used in a manual process, e.g. running a script, the log will not indicate the person who ran that process.\n\nRevoking tokens can be done with the Accounts API. If a token is exposed it should be cycled by deleting the token and creating a new one.\n","category":"guides","service":"authentication"}],"content":"---\ndescription: Authenticate API for Zesty.io Users\n---\n\n# Auth API\n\nAuthentication with Zesty.io is handled by the Auth API which issues a token that grants access to the [Instances API](https://github.com/zesty-io/zesty-org/tree/235f491605bc0837da2a305c282d907ccab019a7/apis/instances-rest-api/README.md), [Accounts API](../../accounts/guides/accounts-api/), and [Media API](auth-api.md).\n\n{% hint style=\"info\" %}\nComplete Auth REST API Documentation: [https://auth-api.zesty.org](https://auth-api.zesty.org/?version=latest)\n{% endhint %}\n\nRoles and permission are managed by the [Accounts API](https://accounts-api.zesty.org/).\n\nThere are 2 types of authentication\n\n* User&#x20;\n* Token-based\n\n## User Authentication\n\nUser authentication is done by providing a specific user account email and password combination. When authenticating as a user you are issued a session token. These are short lived 30 minute sessions that are extended whenever an authenticated action is taken. e.g. Saving content.\n\nEnding a user authenticated session can be done by explicitly logging out. This ends the specifically referenced session. i.e. If you are logged in on another device it will not end that session.\n\n## Token-based Authentication\n\nToken-based authentication is handled by the [Accounts API](https://accounts-api.zesty.org/?version=latest#2d602695-3f14-44c2-b97a-212c402250f6). The issued access tokens are opaque, meaning they can not be parsed to determine their underlying properties such as; role, instance or owner. They are valid for 90 days from creation. In order to create an access token you must have an authenticated user session. Only users with **Admin** or **Owner** roles of an instance can issue a token.\n\nAccess tokens are assigned a role and roles are scoped to instances. Allowing them to take user like actions on the scoped instances. e.g. Creating, Publishing, etc... Tokens can be assigned existing system roles or a custom role defined on an instance. Custom roles are encouraged as they allow providing only the specific access a token needs. Reducing the potential impact of a leaked token.\n\n{% hint style=\"info\" %}\n**Please Note:** The value of access token will **only** be visible upon creation; please store it in a safe location.\n{% endhint %}\n\nEvery access token is assigned a role which describes the permissions the token has against it's scoped instances.\n\n{% hint style=\"info\" %}\n**Please Note:** An access token is a secret which should be guarded carefully and every precaution taken to avoid leaking them. Simply having a token allows the holder that tokens scoped access.\n{% endhint %}\n\nIf you want to find out the available roles on an instance use the [Get Instance Roles](https://accounts-api.zesty.org/?version=latest#e2ac76b2-244c-4570-9734-8e48288e3477) endpoint which will return all the roles (and their IDs) associated with the Instance.\n\nAccess tokens are useful for automated API usage. e.g. CI/CD flows, migrating content, connecting third-party services, etc...\n\nAll actions taken with an access token is recorded by the [AuditTrail API](https://instances-api.zesty.org/?version=latest#026123c3-086e-42bd-9eda-86c2b5de33a2), similiar to users. AuditTrail logs will note the _name_ of the token which was used for the action. These logs will not contain user information. Meaning if a token is used in a manual process, e.g. running a script, the log will not indicate the person who ran that process.\n\nRevoking tokens can be done with the Accounts API. If a token is exposed it should be cycled by deleting the token and creating a new one.\n","category":"guides","service":"authentication"}],"content":"# Guides\n\n","category":"guides","service":"authentication"},{"name":"Accounts","url":"/accounts","objectId":"5nHavzm1EJb1G0Sk3Stc","item":[],"category":"accounts","service":""},{"name":"accounts","url":"/accounts","item":[{"name":"Accounts UI","url":"/accounts/ui","objectId":"-M6b65blmDpkHPyeC1KA","item":[],"content":"---\ndescription: >-\n  The accounts interface is where users can create instances, manage Teams, add\n  Blueprints, and more.\n---\n\n# Accounts UI\n\n## Overview\n\nAccounts settings can be accessed though the Accounts management interface as well as through the content management interface. The following items can be updated through your account settings:\n\n* User name\n* Gravatar\n* Primary email address\n* Add back-up email address\n* Password\n* 2-factor authentication\n* Preferences: manage blueprints, manage teams, and instance grid\n\n![Account settings interface.](../../.gitbook/assets/account-settings-screen.png)\n\n### Accessing Account Settings\n\n#### Accounts Interface\n\n1. From the all-instances view, click on your user name/avatar in the upper right-hand corner outlined in purple below.\n\n![Access account settings by clicking on your user name/avatar.](../../.gitbook/assets/accounts-interface-account-settings.png)\n\n1. A dropdown menu will appear with options. Choose My Account.\n\n![Select My Account from the dropdown.](../../.gitbook/assets/accounts-interface-dropdown-my-acct.png)\n\n1. [Accounts Interface overview](https://zesty.org/services/accounts-ui/accounts-interface-all-instances-view)\n2. [Blueprints](https://zesty.org/services/accounts-ui/blueprints)\n3. [Teams](https://zesty.org/services/accounts-ui/teams)\n","category":"ui","service":"accounts"},{"name":"ui","url":"/accounts/ui","item":[{"name":"Blueprints","url":"/accounts/ui/blueprints","objectId":"-M5PrXRunxwmWakdZPzX","item":[],"content":"---\ndescription: Blueprints are frameworks that are used as the base of an instance.\n---\n\n# Blueprints\n\n### Overview&#x20;\n\nBlueprints consist of an XML plate, which serves as the basis for the Schema structure, as well as a styles, JavaScript, and view files, and sometimes sample content.&#x20;\n\nUsers can only manage Blueprints if the blueprint setting is switched on via their user account settings.&#x20;\n\nWe'll review the Blueprints interface below.&#x20;\n\n### Blueprint Interface Tour\n\n#### Accessing the Blueprint Interface&#x20;\n\nAccess the blueprint interface though the black menu bar at the top of the Accounts interface.&#x20;\n\n![Access Blueprints from the Accounts menu bar.](../../.gitbook/assets/accessing-blueprints-interface.png)\n\n#### Blueprints Interface\n\n![The Blueprints interface allows users to manager their Blueprints.](../../.gitbook/assets/blueprints-interface.png)\n\nBlueprints are shown in a grid similar to the way instances are displayed; the first card is for registering a new Blueprint, and the other cards represent your Blueprints.&#x20;\n\n#### Registering a New Blueprint\n\nRegister a new Blueprint by clicking the green button on the first card in the grid.&#x20;\n\n![The first card allows users to create new Blueprints.](../../.gitbook/assets/register-blueprint.png)\n\nNext, fill the form and click the dark gray button \"+ Create New Blueprint\" button to add a Blueprint.\n\n![Register a new Blueprint form.](../../.gitbook/assets/register-blueprint-form.png)\n\n#### Managing Existing Blueprint\n\nEach card represents one of your Blueprints. From this interface users can edit their Blueprint, view it on GitHub, or delete it.&#x20;\n\n![Existing Blueprints will be shown in a grid.](<../../.gitbook/assets/manage-blueprints (1).png>)\n\n#### Editing an Existing Blueprint\n\nAfter clicking the Edit button in the lower left-hand corner of card you will be able to edit the Blueprint's form. After editing the Blueprint save your changes by clicking the dark gray \"Save Blueprint\" button.\n\n![](../../.gitbook/assets/edit-existing-blueprint.png)\n","category":"ui","service":"accounts"},{"name":"Instances","url":"/accounts/ui/instances","objectId":"-M54DDzGhHW0FyP7LdEv","item":[],"content":"---\ndescription: >-\n  The Accounts Interface refers to the all-instances view which shows all of a\n  users instances when they login.\n---\n\n# Instances\n\n## **Overview**\n\nThe Accounts Interface is also known as the all-instances view. This is the homescreen for the Accounts Interface when a user first logs in to Zesty.io. If a user has not yet created any instances they will be prompted to create an instance. However, if a user has already created instances they will see all of their instances, as well as have the option to create a new instance. If a user has invites to access instances those invites will appear at the top of the instances grid (or list). Aside from creating new instances, this interface allows users to search for instances, access Blueprints, Teams, Account profile and more. Keep reading for a brief tour of this interface.\n\n## Accounts Interface Tour\n\nBelow we'll review the different sections of the Accounts Interface from top to bottom.\n\n## Menu Bar\n\nThe black menu at the top of the screen contains several links, however, depending on your settings you may not see all of them. The links from left to right are:\n\n* Instances: navigates to the all-instances view\n* Teams: allows users to create and manage teams\n* Blueprints: allows users to create and manage blueprints\n* \\[username] (profile): allows users to update their password, add [2FA](https://zesty.org/guides/how-to-set-up-two-factor-authentication), and more\n\n![Menu bar outlined in purple at the top of the screen.](../../.gitbook/assets/accounts-menu-bar.png)\n\n## EcoSystem, search bar, create new button, and filtering options\n\nAll of these items are shown just below the black menu bar near the top of the screen. From left to right the items are:\n\n* EcoSystem dropdown\n* Search bar\n* Create new instance button\n* Sort instances: alphabetically or by creation date\n* Toggle instances view: grid-view or by list-view\n\n## Instance Views\n\nThe Accounts Interface will look slightly different based on whether you've created instances or not. We'll cover both of them below.\n\n### No-instances view\n\nUsers who have not created any instances will see an interface similar to the image below. If a user has signed up for Zesty.io because they were invited to access an instance they'll see an invite to that instance.\n\n![Accounts Interface create-an-instance card.](../../.gitbook/assets/new-account-accounts-interface.png)\n\n### Grid View\n\nUsers who have previously created an instance(s) will see their instances in a grid or list of all of their instances. The first row is reserved for Favorites if any have been marked with a star in the upper right-hand corner of the card.\n\n![Accounts Interface grid-view shows instances on blocks or cards.](../../.gitbook/assets/instance-created-interface.png)\n\n### List View\n\nThe list view shows the same information as the grid-view except it's in a list.\n\n![Accounts Interface list-view shows instances in a list.](../../.gitbook/assets/instances-created-list-view.png)\n","category":"ui","service":"accounts"},{"name":"Instance Settings Drawer","url":"/accounts/ui/instance-settings-drawer","objectId":"-M8TRF46BqSosWKdCYYR","item":[],"content":"---\ndescription: >-\n  The Instance Settings Drawer contains a lot of an instance's information and\n  settings including ZUID, users, team, blueprint, and more.\n---\n\n# Instance Settings Drawer\n\n### Overview\n\nThe Instance Settings Drawer contains many of an instances general settings. Any user who has access to the instance has access to the Instance Settings Drawer. The following items can be accessed via this drawer:&#x20;\n\n* Buttons to access Content Manager, preview and live links\n* Domain name and DNS instructions\n* General instance information:\n  * Name\n  * ZUID\n  * Created on date\n  * Updated on date\n  * Legacy Hash and Numeric IDs\n* User Access\n* Team Access\n* Access Tokens\n* Blueprint Settings\n  * Blueprint name\n  * GitHub Link\n  * Change blueprint button\n\n### Accessing the Instance Settings Drawer\n\nAccess the Instance Settings Drawer via the cog icon on an instance's card in the all-instance's grid view. Click the icon and a drawer will slide out from the right-hand side of the screen.\n\n![Access instance settings by clicking the cog icon on the instance card.](../../.gitbook/assets/instance-settings-cog-icon.png)\n\nFrom the all-instances list view, simply select an instance from the list and the settings will be shown in the right-hand portion of the screen.\n\n![Access instance settings by selecting an instance from the list.](<../../.gitbook/assets/instance-settings-access-instance settings drawer.png>)\n\n### Instance Settings Drawer Tour\n\nThe full Instance Settings drawer is shown in full below.&#x20;\n\n![Instance Settings Drawer.](../../.gitbook/assets/instance-settings-drawer-full.png)\n\nWe'll review each section with a short description below.\n\n#### Buttons to access CMS, preview and live links\n\n![Access to the CMS, preview and live links.](../../.gitbook/assets/01-cms-preview-live-links.png)\n\nFrom left to right there is a:\n\n* Button to access the Content Manger\n* Preview link\n* Live link\n\nThese links are also available from the instance card and instance list in the all-instances view.\n\n#### Domain name and DNS instructions\n\n![Instance Settings Drawer general domain settings section.](../../.gitbook/assets/02-domain-settings.png)\n\nThe domain settings include a field to set your domain name, as well as brief DNS instructions.\n\n#### General instance information:\n\n![Instance Settings Drawer general instance information section.](../../.gitbook/assets/03-general-information.png)\n\nThe general information from top to bottom and left to right is:\n\n* Instance Name\n* Created On date\n* Updated On date\n* Instance ZUID\n* Numeric ID (Legacy)\n* Hash ID (Legacy)\n\n#### User Access\n\n![Instance Settings Drawer User Access section.](../../.gitbook/assets/04-user-access.png)\n\nThe User Access section allows users to be invited to access the instance. When a user is invited to access an instance their role is set as well.\n\n#### Team Access\n\n![Instance Settings Drawer Team Access section.](../../.gitbook/assets/05-team-access.png)\n\nThe Team Access section allows for teams to be added to an instance.&#x20;\n\n{% hint style=\"info\" %}\nTeams are not created in this section. Learn more about Team creation with this [guide](https://zesty.org/guides/adding-a-team).\n{% endhint %}\n\n#### Access Tokens\n\n![Instance Settings Drawer Access Tokens section.](../../.gitbook/assets/06-access-tokens.png)\n\nThe Access Tokens section allow for access tokens to be created for use with the Atom IDE as well as other workflows.&#x20;\n\n#### Blueprint\n\n![Instance Settings Drawer Blueprint section.](../../.gitbook/assets/07-blueprint.png)\n\nThe Blueprint section allows users to change their blueprint.&#x20;\n\n{% hint style=\"danger\" %}\nWhen a blueprint is changed a user will lose all of their content, code, etc. If you do not want to lose the contents of your instance **do not** change your blueprint.&#x20;\n{% endhint %}\n\nIt also shows the blueprint's name and cover image, and links to its repository on Github.\n","category":"ui","service":"accounts"},{"name":"Settings","url":"/accounts/ui/settings","objectId":"-M6b65bpXY0piyX58TVx","item":[],"content":"---\ndescription: >-\n  User account settings allow users to update their username, add 2-factor\n  authentication, and more.\n---\n\n# Settings\n\n## Overview\n\nUsers can access their account settings and links to [support resources](https://zesty.org/services/accounts-ui/user-account-settings#support-resources-tour) through the Account's interface. There are multiple account settings that a user can change including:\n\n* [Update username](https://zesty.org/services/accounts-ui/user-account-settings#your-profile)\n* [Change password](https://zesty.org/services/accounts-ui/user-account-settings#password)\n* [Add an email address](https://zesty.org/services/accounts-ui/user-account-settings#email)\n* [Activate 2-factor authentication](https://zesty.org/services/accounts-ui/user-account-settings#two-factor-authentication-2-fa)\n* [Update preferences](https://zesty.org/services/accounts-ui/user-account-settings#preferences)\n\n## User Account Settings Tour\n\n### Accessing the User Account Settings\n\nAccess the User Account settings via the black menu bar at the top of the Accounts interface. The User Account menu is located at the far right side of the menu bar.\n\n![Access user account link is located at the far right side of the menu bar.](../../.gitbook/assets/user-account-settings-access.png)\n\n### My Account\n\nSelect _My Account_ from the user account menu dropdown.\n\n![Select My Account from the user account menu.](../../.gitbook/assets/account-settings-dropdown-my-account.png)\n\nThe user account interface settings interface is broken up into a grid of cards. Each card represents a setting or preference that the user can update.\n\n![Each card represents a user account setting.](../../.gitbook/assets/my-account-settings.png)\n\n### Your Profile\n\nUnder the first card titled _Your Profile_ users can update their username.\n\n![My Profile is the first card in the Account Settings grid.](../../.gitbook/assets/my-account-your-profile.png)\n\n### Email\n\nMoving left to right and top to bottom, Email is the next card in the Account Settings grid. Users can add another email address to their account.\n\n![Email is the second card in the Account Settings grid.](../../.gitbook/assets/my-account-email.png)\n\n### Password\n\nPassword is the third card in the Account Settings grid. Fill out the fields to update your password.\n\n![Password is the third card in the Account Settings grid.](../../.gitbook/assets/my-account-password.png)\n\n### Two-Factor Authentication (2FA)\n\nTwo-Factor Authentication (2FA) is the the fourth card in the Account Settings grid. Activate or deactivate 2FA here.\n\n![Two-Factor Authentication (2FA) is the fourth card in the Account Settings grid.](../../.gitbook/assets/my-account-2fa.png)\n\n### Preferences\n\nPreferences is the the fifth card in the Account Settings grid. Users can flip the toggles to set their preferences.\n\n![Two-Factor Authentication (2FA) is the fifth card in the Account Settings grid.](../../.gitbook/assets/my-account-preferences.png)\n\n## Support Resources Tour\n\nSelect _Support_ from the user account menu dropdown.\n\n![Select Support from the user account menu.](../../.gitbook/assets/account-settings-dropdown-support.png)\n\nThe support resources interface is broken up into a grid of cards. Each card represents a support option for users.\n\n![There are 4 support resources for users.](../../.gitbook/assets/account-support-resources.png)\n\n### Contact Support (email)\n\nContact Support is the first card. Users can send an email to support@zesty.io to request help with questions and issues.\n\n![Contact Support is the first card in the Support grid.](../../.gitbook/assets/account-support-resources-contact-support.png)\n\n### Help Docs & Developer Docs\n\nHelp Docs and Developer Docs are the second and third cards. Both link to Zesty.org where both general and developer documentation are stored.\n\n![Help Docs and Developer Docs are the second and third cards in the Support grid.](../../.gitbook/assets/account-support-resources-help-dev-docs.png)\n\n### Developer Chat\n\nDeveloper Chat is are the fourth card. Join our Slack Zesty.io Developer Chat channel to chat with our community and support engineers.\n\n![Developer Chat is the fourth card in the Support grid.](../../.gitbook/assets/account-support-resources-dev-chat.png)\n","category":"ui","service":"accounts"},{"name":"Inviting Users","url":"/accounts/ui/inviting-users","objectId":"F5amNU39CbweytEyUd5h","item":[],"content":"---\ndescription: A walkthrough guide on how to invite users to your Instance.\n---\n\n# Inviting Users\n\nAfter the creation of an Instance, one of the next steps is to give additional users access, as needed. This can be achieved within the Instance Settings Drawer, utilizing the form located in the User Access section\n\nWhen granting users access to an Instance, users will be assigned a role. This role governs a user's permission to access apps in the ecosystem and the actions they are allowed to perform. Please see our [Roles & Permissions](../../introduction/guides/getting-started/roles-and-permissions.md) for additional information.\n\n### Sending a User Invitation\n\nThe invitation form requires two items: the user's email address and their role assignment. The role assignment dropdown houses the available options that can be assigned.&#x20;\n\n{% hint style=\"danger\" %}\n**Warning:** The email address the invitation is sent to, **must** match the email address the user has created or will create their account credentials with.&#x20;\n{% endhint %}\n\nAfter adding both email and role, simply select the `ADD USER` button. Once completed the invited user will be listed as _pending,_ until the user has accepted the invite.\n\n![User Invitiation Form](../../.gitbook/assets/user\\_invite\\_form.png)\n\n![Adding user email address and role](../../.gitbook/assets/invite\\_user.png)\n\n![Pending user after creation](../../.gitbook/assets/pending\\_user.png)\n","category":"ui","service":"accounts"},{"name":"Teams","url":"/accounts/ui/teams","objectId":"-M5PupnY5eJqQ2U4b_RG","item":[],"content":"---\ndescription: Teams allows users to create and set access permissions for groups of users.\n---\n\n# Teams\n\n## Overview\n\nTeams allow users to create a team of users and set a single [role](https://zesty.org/getting-started/roles-and-permissions) for each team. This helps streamline the management of users, especially when dealing with large teams and multiple instances.\n\n{% hint style=\"info\" %}\nTeams are created in the Teams interface and a team's role is managed in the [instance's settings drawer](https://zesty.org/glossary#instance-settings-drawer). \\\n\\\nTo **accept an invite** to a team, navigate to the Teams interface and accept your invitation.\n{% endhint %}\n\n## Teams Interface Tour\n\n### Accessing the Teams Interface\n\nAccess the Teams interface though the black menu bar at the top of the Accounts interface.\n\n![Access Blueprints from the Accounts menu bar.](../../.gitbook/assets/teams-interface-access.png)\n\n### Teams Interface\n\n![The Teams interface allows users to manager their teams.](<../../.gitbook/assets/teams-interface (1).png>)\n\nTeams are shown in a grid similar to the way instances are displayed; the first card is for creating a new team, and the other cards represent your Blueprints.\n\n### Creating a New Team\n\nCreate a new Team by filling out the Team Name and Description fields, and then clicking the green button on the first card in the grid.\n\n![Use the first card in the grid to create a new team.](../../.gitbook/assets/teams-interface-create-new.png)\n\n### Managing Existing Teams\n\nThe team's owner can add and remove users, update the teams's name and description, and delete the team.\n\n![Access teams' settings by clicking the cog icon.](../../.gitbook/assets/teams-interface-edit-teams.png)\n\nAccess these team's settings by click the cog icon near the upper right-hand corner of the card.\n\n![Team editing view.](../../.gitbook/assets/team-edit-view.png)\n\nFrom the team editing view users can update the Team's name and description, and remove users. After editing the team click the blue \"Update Team\" button to save your changes.\n\n{% hint style=\"info\" %}\nThe card does not have to be in editing mode in order to add a new team member.\n{% endhint %}\n","category":"ui","service":"accounts"}],"content":"---\ndescription: Blueprints are frameworks that are used as the base of an instance.\n---\n\n# Blueprints\n\n### Overview&#x20;\n\nBlueprints consist of an XML plate, which serves as the basis for the Schema structure, as well as a styles, JavaScript, and view files, and sometimes sample content.&#x20;\n\nUsers can only manage Blueprints if the blueprint setting is switched on via their user account settings.&#x20;\n\nWe'll review the Blueprints interface below.&#x20;\n\n### Blueprint Interface Tour\n\n#### Accessing the Blueprint Interface&#x20;\n\nAccess the blueprint interface though the black menu bar at the top of the Accounts interface.&#x20;\n\n![Access Blueprints from the Accounts menu bar.](../../.gitbook/assets/accessing-blueprints-interface.png)\n\n#### Blueprints Interface\n\n![The Blueprints interface allows users to manager their Blueprints.](../../.gitbook/assets/blueprints-interface.png)\n\nBlueprints are shown in a grid similar to the way instances are displayed; the first card is for registering a new Blueprint, and the other cards represent your Blueprints.&#x20;\n\n#### Registering a New Blueprint\n\nRegister a new Blueprint by clicking the green button on the first card in the grid.&#x20;\n\n![The first card allows users to create new Blueprints.](../../.gitbook/assets/register-blueprint.png)\n\nNext, fill the form and click the dark gray button \"+ Create New Blueprint\" button to add a Blueprint.\n\n![Register a new Blueprint form.](../../.gitbook/assets/register-blueprint-form.png)\n\n#### Managing Existing Blueprint\n\nEach card represents one of your Blueprints. From this interface users can edit their Blueprint, view it on GitHub, or delete it.&#x20;\n\n![Existing Blueprints will be shown in a grid.](<../../.gitbook/assets/manage-blueprints (1).png>)\n\n#### Editing an Existing Blueprint\n\nAfter clicking the Edit button in the lower left-hand corner of card you will be able to edit the Blueprint's form. After editing the Blueprint save your changes by clicking the dark gray \"Save Blueprint\" button.\n\n![](../../.gitbook/assets/edit-existing-blueprint.png)\n","category":"ui","service":"accounts"},{"name":"Guides","url":"/accounts/guides","objectId":"j2fRS7dHJRWhG7w4Twxg","item":[],"content":"# Guides\n\n","category":"guides","service":"accounts"},{"name":"guides","url":"/accounts/guides","item":[{"name":"Accounts API","url":"/accounts/guides/accounts-api","objectId":"-LmuWiRbbADyj2HbnWFS","item":[],"content":"# Accounts API\n\nAPI used to control management of users, roles, instances, and teams.\n\n{% hint style=\"warning\" %}\nAccounts-API requires Authentication, examples to authenticate can be found in wrapper documentation.\n{% endhint %}\n\n## Documentation\n\nFull REST API documentation available in multiple languages here: [https://accounts-api.zesty.org/?version=latest](https://accounts-api.zesty.org/?version=latest)\n\n## Tooling\n\nThe Node Wrapper hits a few Accounts API endpoints commonly used for development.\n\n{% content-ref url=\"broken-reference\" %}\n[Broken link](broken-reference)\n{% endcontent-ref %}\n\n## Webhooks\n\nDocumentation on creating, modifying and deleting webhooks can be found below.\n\n{% content-ref url=\"broken-reference\" %}\n[Broken link](broken-reference)\n{% endcontent-ref %}\n","category":"guides","service":"accounts"},{"name":"accounts-api","url":"/accounts/guides/accounts-api","item":[{"name":"Webhooks","url":"/accounts/guides/accounts-api/webhooks","objectId":"-M6fAqqu6nqeXxDr2pt_","item":[],"content":"---\ndescription: A description on Zesty Webhooks and how to use them in production.\n---\n\n# Webhooks\n\n{% hint style=\"info\" %}\n**Open Perpetual Beta:** Webhooks are available to all instances. We plan on expanding the payload of the webhook to include the data an meta data of affected resource.\n{% endhint %}\n\n## Introduction\n\nWebhooks allow for actions performed within the Zesty.io platform to trigger external actions via RESTful HTTP API calls. An example of such a use case would be to send out email or text message alerts to customers when a new blog article being published.\n\n[REST API Documentation and Examples](https://accounts-api.zesty.org/?version=latest#f929ad7b-4bff-4f78-9376-ead64d158b9b)\n\n## What Resources Listen for Webhooks\n\n### Instances API\n\n* Content Models\n* Content Model Items\n* Content Model Fields\n* Views\n* Stylesheets&#x20;\n* Scripts\n* Redirects\n* Languages\n* Instance Setting\n\n### Accounts API\n\n* Role\n* Instance Roles\n* Instance Domains\n* Invites\n\n{% hint style=\"danger\" %}\nWebhook for Publish Actions do not trigger for any publish event greater than 30 days out.\n{% endhint %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/webhooks\" method=\"post\" summary=\"Create Webhook\" %}\n{% swagger-description %}\nThis endpoint allows you to create webhooks.\n\n\\\n\n\nNOTE: To create a webhook, the authenticated user must have one or more the roles for the given instance:\n{% endswagger-description %}\n\n{% swagger-parameter in=\"body\" name=\"description\" type=\"string\" %}\nA description about the webhook\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"parentResourceZUID\" type=\"string\" %}\nA ZUID that corresponds to a resource that acts as a parent. Some examples of parent resources include:\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"body\" type=\"object\" %}\nA JSON representation of webhook's request body. The \n\n`contentType`\n\n parameter will determine how the body will be sent.\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"authorization\" type=\"string\" %}\nThe authorization token that will be sent as part of your webhook request. This corresponds to the \n\n`authorization`\n\n header in the HTTP request.\n\n\\\n\n\nAny provided authorization token will automatically be used as a Bearer token.\n\n\\\n\n\nEx. \n\n`authorization: Bearer ABCDEF123`\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"contentType\" type=\"string\" %}\nThe type of content in the request your Webhook will send to the URL. This corresponds to the \n\n`content-type`\n\n HTTP header in the request your webhook will be sending.\n\n\\\n\n\nA valid content types is any one of the following:\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"URL\" type=\"string\" %}\nThe URL your webhook send its request to.\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"method\" type=\"string\" %}\nThe HTTP Method that the webhook will use on the URL.\n\n\\\n\n\nA valid HTTP Method is any of the following\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"eventAction\" type=\"number\" %}\nA numerical value that represents an action on a resource.\n\n\\\n\n\nA valid action is any of the following\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"scopedResourceZUID\" type=\"string\" %}\nA ZUID string that represents ant of the following entities:\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"resourceZUID\" type=\"string\" %}\nA ZUID that corresponds to any entity within Zesty\n{% endswagger-parameter %}\n\n{% swagger-response status=\"201\" description=\"Webhook successfully created\" %}\n```javascript\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-12T18:48:36.6747159Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"40-9896f0a99a-zb0fdb\",\n        \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n        \"eventAction\": 1,\n        \"parentResourceZUID\": null,\n        \"resource\": \"items\",\n        \"method\": \"POST\",\n        \"URL\": \"https://hooks.slack.com/services/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\",\n        \"contentType\": \"application/json\",\n        \"authorization\": \"\",\n        \"body\": {\n            \"text\": \"New item created for site 8-a0a29cebe6-32shdn\"\n        },\n        \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n        \"description\": null,\n        \"createdAt\": \"2019-12-12T18:48:36.529346Z\",\n        \"updatedAt\": \"2019-12-12T18:48:36.5293872Z\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/instances/:instance_zuid/webhooks\" method=\"get\" summary=\"Retrieve Webhooks by Instance ZUID\" %}\n{% swagger-description %}\nRetrieves a list of all webhooks.NOTE: To create a webhook, the authenticated user must have one or more the roles for the given instance:\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"instance_zuid\" type=\"string\" %}\nCorresponds to an instance ZUID\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-12T20:01:26.8671069Z\",\n        \"totalResults\": 16,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 16\n    },\n    \"data\": [\n        {\n            \"ZUID\": \"40-80ce8482e6-d05ng1\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": \"here is a description of my webhook\",\n            \"createdAt\": \"2019-12-11T23:14:49Z\",\n            \"updatedAt\": \"2019-12-11T23:14:49Z\"\n        },\n        {\n            \"ZUID\": \"40-88e3d8969e-sm4g1q\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 4,\n            \"parentResourceZUID\": null,\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Item has been published for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T20:52:52Z\",\n            \"updatedAt\": \"2019-12-05T20:54:41Z\"\n        },\n        {\n            \"ZUID\": \"40-90d1d499ac-pdv87l\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-11T23:14:24Z\",\n            \"updatedAt\": \"2019-12-11T23:14:24Z\"\n        },\n        {\n            \"ZUID\": \"40-90f2c0cf82-4f39d7\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": \"6-56cf30-3nlbwn\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Created a new item for content model 6-56cf30-3nlbwn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-04T21:20:55Z\",\n            \"updatedAt\": \"2019-12-04T21:20:55Z\"\n        },\n        {\n            \"ZUID\": \"40-9896f0a99a-zb0fdb\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": null,\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New item created for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-12T18:48:36Z\",\n            \"updatedAt\": \"2019-12-12T18:48:36Z\"\n        },\n        {\n            \"ZUID\": \"40-a09bf5f2f8-h2mq51\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": null,\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": \"here is a description of my webhook\",\n            \"createdAt\": \"2019-12-11T23:37:28Z\",\n            \"updatedAt\": \"2019-12-11T23:37:28Z\"\n        },\n        {\n            \"ZUID\": \"40-b0a3ddef9d-hl8b7l\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": \"\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Item for site 8-a0a29cebe6-32shdn has been updated\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T19:47:01Z\",\n            \"updatedAt\": \"2019-12-05T19:47:01Z\"\n        },\n        {\n            \"ZUID\": \"40-b0cfd19cc2-688bdg\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T23:54:47Z\",\n            \"updatedAt\": \"2019-12-05T23:54:47Z\"\n        },\n        {\n            \"ZUID\": \"40-b8c0dab9aa-xd6tf9\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:48:26Z\",\n            \"updatedAt\": \"2019-12-06T19:48:26Z\"\n        },\n        {\n            \"ZUID\": \"40-c0b78fd1e9-5zl5sm\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": \"6-66bd1c-41krtg\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New Page Content model for site 8-a0a29cebe6-32shdn has been created\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T19:50:03Z\",\n            \"updatedAt\": \"2019-12-05T19:50:03Z\"\n        },\n        {\n            \"ZUID\": \"40-c8c9fdc3c6-4bxbxj\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:06:25Z\",\n            \"updatedAt\": \"2019-12-06T19:06:25Z\"\n        },\n        {\n            \"ZUID\": \"40-e0b9e887cb-5kp21j\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": \"6-f0fbdb8ca5-n46q46\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"http://n4zkq1s52f.chm/ngs58\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"bar\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:55:23Z\",\n            \"updatedAt\": \"2019-12-06T19:55:23Z\"\n        },\n        {\n            \"ZUID\": \"40-e8818d9a80-kqsf26\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": null,\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New item created for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-12T00:17:35Z\",\n            \"updatedAt\": \"2019-12-12T00:17:35Z\"\n        },\n        {\n            \"ZUID\": \"40-e88693c0c5-3wp36q\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:40:46Z\",\n            \"updatedAt\": \"2019-12-06T19:40:46Z\"\n        },\n        {\n            \"ZUID\": \"40-e89cf7919a-cssc0k\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:48:24Z\",\n            \"updatedAt\": \"2019-12-06T19:48:24Z\"\n        },\n        {\n            \"ZUID\": \"40-f0e1cfacc7-m816ne\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 4,\n            \"parentResourceZUID\": \"\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Item for site 8-a0a29cebe6-32shdn has been published\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-04T21:44:33Z\",\n            \"updatedAt\": \"2019-12-09T23:20:44Z\"\n        }\n    ]\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/webhooks/:webhook_zuid\" method=\"get\" summary=\"Retrieve Webhook by ZUID\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"webhook_zuid\" type=\"string\" %}\nCorresponds to the Webhook's Unique ZUID value\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-16T18:35:53.383016928Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"40-cef081acb5-02t58c\",\n        \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n        \"eventAction\": 4,\n        \"parentResourceZUID\": \"6-885f58-1zcf1v\",\n        \"resource\": \"items\",\n        \"method\": \"POST\",\n        \"URL\": \"https://hooks.slack.com/services/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\",\n        \"contentType\": \"application/json\",\n        \"authorization\": \"\",\n        \"body\": {\n            \"text\": \"Publish event 6-885f58-1zcf1v for item has been triggered\"\n        },\n        \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n        \"description\": null,\n        \"createdAt\": \"2019-12-16T17:58:40Z\",\n        \"updatedAt\": \"2019-12-16T17:58:40Z\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/webhooks/:webhook_zuid\" method=\"delete\" summary=\"Webhook Deletion\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"webhook_zuid\" type=\"string\" %}\nCorresponds to the Webhook's Unique ZUID value\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-16T18:39:00.305956275Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"40-cef081acb5-02t58c\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## Webhook Conditions\n\nWebhooks are executed by calling API endpoints. In order to create webhooks that will be triggered and executed by API calls, create webhooks with the following parameters. When an action occurs, such as content item creation, a search for the corresponding webhook will occur.\n\n### Example:\n\nAn item 7-ABCD-1234 corresponding to content model 6-ABCD-1234 has been updated in instance 8-ABCD-1234. Webhooks will be triggered based on the following action conditions.\n\n* Update on an item with ZUID 7-ABCD-1234 on an instance with ZUID 8-ABCD-1234\n* Update on any item belonging to content model 6-ABCD-1234 in instance 8-ABCD-1234\n* Update on any item in instance 8-ABCD-1234\n\n## Instances API Webhook\n\n### Create, Update, Delete and Publish Item**s**\n\n| Condition                                     | Scoped Resource | Parent Resource | Resource   | Action  | Request URL                                                  |\n| --------------------------------------------- | --------------- | --------------- | ---------- | ------- | ------------------------------------------------------------ |\n| Creating a new item                           | INSTANCE\\_ZUID  |                 | items      | CREATE  | POST /content/model/MODEL\\_ZUID/items                        |\n| Creating a new item for a given content model | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | CREATE  | POST /content/model/MODEL\\_ZUID/items                        |\n| Updating a specific item                      | INSTANCE\\_ZUID  |                 | ITEM\\_ZUID | UPDATE  | PUT /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID              |\n| Updating any item for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | UPDATE  | PUT /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID              |\n| Updating any item                             | INSTANCE\\_ZUID  |                 | items      | UPDATE  | PUT /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID              |\n| Deleting a specific item                      | INSTANCE\\_ZUID  |                 | ITEM\\_ZUID | DELETE  | DELETE /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID           |\n| Deleting any item for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | DELETE  | DELETE /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID           |\n| Deleting any item                             | INSTANCE\\_ZUID  |                 | items      | DELETE  | DELETE /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID           |\n| Publishing any item for a given content model | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | PUBLISH | POST /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID/publishings |\n| Publishing a specific item                    | INSTANCE\\_ZUID  |                 | ITEM\\_ZUID | PUBLISH | POST /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID/publishings |\n| Publishing any item                           | INSTANCE\\_ZUID  |                 | items      | PUBLISH | POST /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID/publishings |\n\n### Creating, Updating and Deleting Content Models\n\n| Condition                         | Scoped Resource | Parent Resource | Resource    | Action | Request URL                       |\n| --------------------------------- | --------------- | --------------- | ----------- | ------ | --------------------------------- |\n| Creating a new content model      | INSTANCE\\_ZUID  |                 | models      | CREATE | POST /content/model               |\n| Update a specific content model   | INSTANCE\\_ZUID  |                 | MODEL\\_ZUID | UPDATE | PUT /content/model/MODEL\\_ZUID    |\n| Updating any content model        | INSTANCE\\_ZUID  |                 | models      | UPDATE | PUT /content/model/MODEL\\_ZUID    |\n| Deleting a specific content model | INSTANCE\\_ZUID  |                 | MODEL\\_ZUID | DELETE | DELETE /content/model/MODEL\\_ZUID |\n| Deleting any content model        | INSTANCE\\_ZUID  |                 | models      | DELETE | DELETE /content/model/MODEL\\_ZUID |\n\n### Creating, Updating and Deleting Fields\n\n| Condition                                      | Scoped Resource | Parent Resource | Resource    | Action | Request URL                                          |\n| ---------------------------------------------- | --------------- | --------------- | ----------- | ------ | ---------------------------------------------------- |\n| Creating a new field                           | INSTANCE\\_ZUID  |                 | fields      | CREATE | POST /content/model/MODEL\\_ZUID/fields               |\n| Creating a new field for a given content model | INSTANCE\\_ZUID  | MODEL\\_ZUID     | fields      | CREATE | POST /content/model/MODEL\\_ZUID/fields               |\n| Updating a specific field                      | INSTANCE\\_ZUID  |                 | FIELD\\_ZUID | UPDATE | PUT /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID    |\n| Updating any field for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | fields      | UPDATE | PUT /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID    |\n| Updating any field                             | INSTANCE\\_ZUID  |                 | fields      | UPDATE | PUT /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID    |\n| Deleting a specific field                      | INSTANCE\\_ZUID  | FIELD\\_ZUID     | DELETE      | DELETE | DELETE /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID |\n| Deleting any field for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | fields      | DELETE | DELETE /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID |\n| Deleting any field                             | INSTANCE\\_ZUID  |                 | fields      | DELETE | DELETE /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID |\n\n### Creating, Updating and Deleting Views\n\n| Condition                | Scoped Resource | Parent Resource | Resource   | Action | Request URL                  |\n| ------------------------ | --------------- | --------------- | ---------- | ------ | ---------------------------- |\n| Creating a new view      | INSTANCE\\_ZUID  |                 | views      | CREATE | POST /web/views              |\n| Update a specific view   | INSTANCE\\_ZUID  |                 | VIEW\\_ZUID | UPDATE | PUT /web/views/VIEW\\_ZUID    |\n| Updating any view        | INSTANCE\\_ZUID  |                 | views      | UPDATE | PUT /web/views/VIEW\\_ZUID    |\n| Deleting a specific view | INSTANCE\\_ZUID  |                 | VIEW\\_ZUID | DELETE | DELETE /web/views/VIEW\\_ZUID |\n| Deleting any view        | INSTANCE\\_ZUID  |                 | views      | DELETE | DELETE /web/views/VIEW\\_ZUID |\n\n### Creating, Updating and Deleting Stylesheets\n\n| Condition                      | Scoped Resource | Parent Resource | Resource         | Action | Request URL                      |\n| ------------------------------ | --------------- | --------------- | ---------------- | ------ | -------------------------------- |\n| Creating a new stylesheet      | INSTANCE\\_ZUID  |                 | stylesheets      | CREATE | POST /web/scripts                |\n| Update a specific stylesheet   | INSTANCE\\_ZUID  |                 | STYLESHEET\\_ZUID | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Updating any stylesheet        | INSTANCE\\_ZUID  |                 | scripts          | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Deleting a specific stylesheet | INSTANCE\\_ZUID  |                 | SCRIPT\\_ZUID     | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n| Deleting any stylesheet        | INSTANCE\\_ZUID  |                 | scripts          | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n\n### Creating, Updating and Deleting Scripts\n\n| Condition                  | Scoped Resource | Parent Resource | Resource     | Action | Request URL                      |\n| -------------------------- | --------------- | --------------- | ------------ | ------ | -------------------------------- |\n| Creating a new script      | INSTANCE\\_ZUID  |                 | scripts      | CREATE | POST /web/scripts                |\n| Update a specific script   | INSTANCE\\_ZUID  |                 | SCRIPT\\_ZUID | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Updating any script        | INSTANCE\\_ZUID  |                 | scripts      | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Deleting a specific script | INSTANCE\\_ZUID  |                 | SCRIPT\\_ZUID | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n| Deleting any script        | INSTANCE\\_ZUID  |                 | scripts      | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n\n### Creating, Updating and Deleting Redirects\n\n| Condition                    | Scoped Resource | Parent Resource | Resource       | Action | Request URL                          |\n| ---------------------------- | --------------- | --------------- | -------------- | ------ | ------------------------------------ |\n| Creating a new redirect      | INSTANCE\\_ZUID  |                 | redirects      | CREATE | POST /web/redirects                  |\n| Update a specific redirect   | INSTANCE\\_ZUID  |                 | REDIRECT\\_ZUID | UPDATE | PUT /web/redirects/REDIRECT\\_ZUID    |\n| Updating any redirect        | INSTANCE\\_ZUID  |                 | redirects      | UPDATE | PUT /web/redirects/REDIRECT\\_ZUID    |\n| Deleting a specific redirect | INSTANCE\\_ZUID  |                 | REDIRECT\\_ZUID | DELETE | DELETE /web/redirects/REDIRECT\\_ZUID |\n| Deleting any redirect        | INSTANCE\\_ZUID  |                 | redirects      | DELETE | DELETE /web/redirects/REDIRECT\\_ZUID |\n\n### Creating, Updating and Deleting Langs\n\n| Condition                    | Scoped Resource | Parent Resource | Resource | Action | Request URL                |\n| ---------------------------- | --------------- | --------------- | -------- | ------ | -------------------------- |\n| Creating a new language      | INSTANCE\\_ZUID  |                 | langs    | CREATE | POST /env/langs            |\n| Update a specific language   | INSTANCE\\_ZUID  |                 | LANG\\_ID | UPDATE | PUT /env/langs/LANG\\_ID    |\n| Updating any language        | INSTANCE\\_ZUID  |                 | langs    | UPDATE | PUT /env/langs/LANG\\_ID    |\n| Deleting a specific language | INSTANCE\\_ZUID  |                 | LANG\\_ID | DELETE | DELETE /env/langs/LANG\\_ID |\n| Deleting any language        | INSTANCE\\_ZUID  |                 | langs    | DELETE | DELETE /env/langs/LANG\\_ID |\n\n### Creating, Updating and Deleting Settings\n\n| Condition                   | Scoped Resource | Parent Resource | Resource       | Action | Request URL                         |\n| --------------------------- | --------------- | --------------- | -------------- | ------ | ----------------------------------- |\n| Creating a new setting      | INSTANCE\\_ZUID  |                 | settings       | CREATE | POST /env/settings                  |\n| Update a specific setting   | INSTANCE\\_ZUID  |                 | SETTINGS\\_ZUID | UPDATE | PUT /env/settings/SETTINGS\\_ZUID    |\n| Updating any setting        | INSTANCE\\_ZUID  |                 | settings       | UPDATE | PUT /env/settings/SETTINGS\\_ZUID    |\n| Deleting a specific setting | INSTANCE\\_ZUID  |                 | SETTINGS\\_ZUID | DELETE | DELETE /env/settings/SETTINGS\\_ZUID |\n| Deleting any setting        | INSTANCE\\_ZUID  |                 | settings       | DELETE | DELETE /env/settings/SETTINGS\\_ZUID |\n\n### Creating, Updating and Deleting Leads\n\n## Accounts API Webhook\n\n### Roles\n\n| Condition           | Scoped Resource | Parent Resource | Resource | Action | Request URL |\n| ------------------- | --------------- | --------------- | -------- | ------ | ----------- |\n| Creating a new role | INSTANCE\\_ZUID  |                 | roles    | CREATE | POST /roles |\n\n### Instance Roles\n\n| Condition                      | Scoped Resource | Parent Resource | Resource | Action | Request URL                          |\n| ------------------------------ | --------------- | --------------- | -------- | ------ | ------------------------------------ |\n| Generating a new Instance Role | INSTANCE\\_ZUID  | INSTANCE\\_ZUID  | roles    | CREATE | POST /instances/INSTANCE\\_ZUID/roles |\n\n### Instance Domains\n\n| Condition | Scoped Resource | Parent Resource | Resource | Action | Request URL |\n| --------- | --------------- | --------------- | -------- | ------ | ----------- |\n\n| Create domain for a given instance | INSTANCE\\_ZUID |   | domains | CREATE | POST /instances/INSTANCE\\_ZUID/domains |\n| ---------------------------------- | -------------- | - | ------- | ------ | -------------------------------------- |\n\n| Update a specific domain for a given instance | INSTANCE\\_ZUID |   | DOMAIN\\_ZUID | UPDATE | PUT /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| --------------------------------------------- | -------------- | - | ------------ | ------ | -------------------------------------------------- |\n\n| Update any domain for a given instance | INSTANCE\\_ZUID |   | domains | UPDATE | PUT /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| -------------------------------------- | -------------- | - | ------- | ------ | -------------------------------------------------- |\n\n| <p>Delete</p><p>a specific domain for a given instance</p> | INSTANCE\\_ZUID |   | DOMAIN\\_ZUID | DELETE | DELETE /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| ---------------------------------------------------------- | -------------- | - | ------------ | ------ | ----------------------------------------------------- |\n\n| <p>Delete</p><p>any domain for a given instance</p> | INSTANCE\\_ZUID |   | domains | DELETE | DELETE /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| --------------------------------------------------- | -------------- | - | ------- | ------ | ----------------------------------------------------- |\n\n| Condition         | Scoped Resource | Parent Resource | Resource     | Action | Request URL                  |\n| ----------------- | --------------- | --------------- | ------------ | ------ | ---------------------------- |\n| Create Invite     | INSTANCE\\_ZUID  |                 | invites      | CREATE | POST /invites                |\n| Respond to Invite | INSTANCE\\_ZUID  |                 | INVITE\\_ZUID | UPDATE | PUT /invites/INVITE\\_ZUID    |\n| Delete Invite     | INSTANCE\\_ZUID  |                 | INVITE\\_ZUID | DELETE | DELETE /invites/INVITE\\_ZUID |\n","category":"guides","service":"accounts"}],"content":"---\ndescription: A description on Zesty Webhooks and how to use them in production.\n---\n\n# Webhooks\n\n{% hint style=\"info\" %}\n**Open Perpetual Beta:** Webhooks are available to all instances. We plan on expanding the payload of the webhook to include the data an meta data of affected resource.\n{% endhint %}\n\n## Introduction\n\nWebhooks allow for actions performed within the Zesty.io platform to trigger external actions via RESTful HTTP API calls. An example of such a use case would be to send out email or text message alerts to customers when a new blog article being published.\n\n[REST API Documentation and Examples](https://accounts-api.zesty.org/?version=latest#f929ad7b-4bff-4f78-9376-ead64d158b9b)\n\n## What Resources Listen for Webhooks\n\n### Instances API\n\n* Content Models\n* Content Model Items\n* Content Model Fields\n* Views\n* Stylesheets&#x20;\n* Scripts\n* Redirects\n* Languages\n* Instance Setting\n\n### Accounts API\n\n* Role\n* Instance Roles\n* Instance Domains\n* Invites\n\n{% hint style=\"danger\" %}\nWebhook for Publish Actions do not trigger for any publish event greater than 30 days out.\n{% endhint %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/webhooks\" method=\"post\" summary=\"Create Webhook\" %}\n{% swagger-description %}\nThis endpoint allows you to create webhooks.\n\n\\\n\n\nNOTE: To create a webhook, the authenticated user must have one or more the roles for the given instance:\n{% endswagger-description %}\n\n{% swagger-parameter in=\"body\" name=\"description\" type=\"string\" %}\nA description about the webhook\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"parentResourceZUID\" type=\"string\" %}\nA ZUID that corresponds to a resource that acts as a parent. Some examples of parent resources include:\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"body\" type=\"object\" %}\nA JSON representation of webhook's request body. The \n\n`contentType`\n\n parameter will determine how the body will be sent.\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"authorization\" type=\"string\" %}\nThe authorization token that will be sent as part of your webhook request. This corresponds to the \n\n`authorization`\n\n header in the HTTP request.\n\n\\\n\n\nAny provided authorization token will automatically be used as a Bearer token.\n\n\\\n\n\nEx. \n\n`authorization: Bearer ABCDEF123`\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"contentType\" type=\"string\" %}\nThe type of content in the request your Webhook will send to the URL. This corresponds to the \n\n`content-type`\n\n HTTP header in the request your webhook will be sending.\n\n\\\n\n\nA valid content types is any one of the following:\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"URL\" type=\"string\" %}\nThe URL your webhook send its request to.\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"method\" type=\"string\" %}\nThe HTTP Method that the webhook will use on the URL.\n\n\\\n\n\nA valid HTTP Method is any of the following\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"eventAction\" type=\"number\" %}\nA numerical value that represents an action on a resource.\n\n\\\n\n\nA valid action is any of the following\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"scopedResourceZUID\" type=\"string\" %}\nA ZUID string that represents ant of the following entities:\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"resourceZUID\" type=\"string\" %}\nA ZUID that corresponds to any entity within Zesty\n{% endswagger-parameter %}\n\n{% swagger-response status=\"201\" description=\"Webhook successfully created\" %}\n```javascript\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-12T18:48:36.6747159Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"40-9896f0a99a-zb0fdb\",\n        \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n        \"eventAction\": 1,\n        \"parentResourceZUID\": null,\n        \"resource\": \"items\",\n        \"method\": \"POST\",\n        \"URL\": \"https://hooks.slack.com/services/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\",\n        \"contentType\": \"application/json\",\n        \"authorization\": \"\",\n        \"body\": {\n            \"text\": \"New item created for site 8-a0a29cebe6-32shdn\"\n        },\n        \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n        \"description\": null,\n        \"createdAt\": \"2019-12-12T18:48:36.529346Z\",\n        \"updatedAt\": \"2019-12-12T18:48:36.5293872Z\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/instances/:instance_zuid/webhooks\" method=\"get\" summary=\"Retrieve Webhooks by Instance ZUID\" %}\n{% swagger-description %}\nRetrieves a list of all webhooks.NOTE: To create a webhook, the authenticated user must have one or more the roles for the given instance:\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"instance_zuid\" type=\"string\" %}\nCorresponds to an instance ZUID\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-12T20:01:26.8671069Z\",\n        \"totalResults\": 16,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 16\n    },\n    \"data\": [\n        {\n            \"ZUID\": \"40-80ce8482e6-d05ng1\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": \"here is a description of my webhook\",\n            \"createdAt\": \"2019-12-11T23:14:49Z\",\n            \"updatedAt\": \"2019-12-11T23:14:49Z\"\n        },\n        {\n            \"ZUID\": \"40-88e3d8969e-sm4g1q\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 4,\n            \"parentResourceZUID\": null,\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Item has been published for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T20:52:52Z\",\n            \"updatedAt\": \"2019-12-05T20:54:41Z\"\n        },\n        {\n            \"ZUID\": \"40-90d1d499ac-pdv87l\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-11T23:14:24Z\",\n            \"updatedAt\": \"2019-12-11T23:14:24Z\"\n        },\n        {\n            \"ZUID\": \"40-90f2c0cf82-4f39d7\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": \"6-56cf30-3nlbwn\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Created a new item for content model 6-56cf30-3nlbwn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-04T21:20:55Z\",\n            \"updatedAt\": \"2019-12-04T21:20:55Z\"\n        },\n        {\n            \"ZUID\": \"40-9896f0a99a-zb0fdb\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": null,\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New item created for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-12T18:48:36Z\",\n            \"updatedAt\": \"2019-12-12T18:48:36Z\"\n        },\n        {\n            \"ZUID\": \"40-a09bf5f2f8-h2mq51\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": null,\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": \"here is a description of my webhook\",\n            \"createdAt\": \"2019-12-11T23:37:28Z\",\n            \"updatedAt\": \"2019-12-11T23:37:28Z\"\n        },\n        {\n            \"ZUID\": \"40-b0a3ddef9d-hl8b7l\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": \"\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Item for site 8-a0a29cebe6-32shdn has been updated\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T19:47:01Z\",\n            \"updatedAt\": \"2019-12-05T19:47:01Z\"\n        },\n        {\n            \"ZUID\": \"40-b0cfd19cc2-688bdg\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T23:54:47Z\",\n            \"updatedAt\": \"2019-12-05T23:54:47Z\"\n        },\n        {\n            \"ZUID\": \"40-b8c0dab9aa-xd6tf9\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:48:26Z\",\n            \"updatedAt\": \"2019-12-06T19:48:26Z\"\n        },\n        {\n            \"ZUID\": \"40-c0b78fd1e9-5zl5sm\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": \"6-66bd1c-41krtg\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New Page Content model for site 8-a0a29cebe6-32shdn has been created\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-05T19:50:03Z\",\n            \"updatedAt\": \"2019-12-05T19:50:03Z\"\n        },\n        {\n            \"ZUID\": \"40-c8c9fdc3c6-4bxbxj\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:06:25Z\",\n            \"updatedAt\": \"2019-12-06T19:06:25Z\"\n        },\n        {\n            \"ZUID\": \"40-e0b9e887cb-5kp21j\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": \"6-f0fbdb8ca5-n46q46\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"http://n4zkq1s52f.chm/ngs58\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"bar\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:55:23Z\",\n            \"updatedAt\": \"2019-12-06T19:55:23Z\"\n        },\n        {\n            \"ZUID\": \"40-e8818d9a80-kqsf26\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 1,\n            \"parentResourceZUID\": null,\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New item created for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-12T00:17:35Z\",\n            \"updatedAt\": \"2019-12-12T00:17:35Z\"\n        },\n        {\n            \"ZUID\": \"40-e88693c0c5-3wp36q\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:40:46Z\",\n            \"updatedAt\": \"2019-12-06T19:40:46Z\"\n        },\n        {\n            \"ZUID\": \"40-e89cf7919a-cssc0k\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 2,\n            \"parentResourceZUID\": null,\n            \"resource\": \"domains\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"New domain has been added for site 8-a0a29cebe6-32shdn\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-06T19:48:24Z\",\n            \"updatedAt\": \"2019-12-06T19:48:24Z\"\n        },\n        {\n            \"ZUID\": \"40-f0e1cfacc7-m816ne\",\n            \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n            \"eventAction\": 4,\n            \"parentResourceZUID\": \"\",\n            \"resource\": \"items\",\n            \"method\": \"POST\",\n            \"URL\": \"https://hooks.slack.com/services/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\",\n            \"contentType\": \"application/json\",\n            \"authorization\": \"\",\n            \"body\": {\n                \"text\": \"Item for site 8-a0a29cebe6-32shdn has been published\"\n            },\n            \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n            \"description\": null,\n            \"createdAt\": \"2019-12-04T21:44:33Z\",\n            \"updatedAt\": \"2019-12-09T23:20:44Z\"\n        }\n    ]\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/webhooks/:webhook_zuid\" method=\"get\" summary=\"Retrieve Webhook by ZUID\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"webhook_zuid\" type=\"string\" %}\nCorresponds to the Webhook's Unique ZUID value\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-16T18:35:53.383016928Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"40-cef081acb5-02t58c\",\n        \"scopedResource\": \"8-a0a29cebe6-32shdn\",\n        \"eventAction\": 4,\n        \"parentResourceZUID\": \"6-885f58-1zcf1v\",\n        \"resource\": \"items\",\n        \"method\": \"POST\",\n        \"URL\": \"https://hooks.slack.com/services/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\",\n        \"contentType\": \"application/json\",\n        \"authorization\": \"\",\n        \"body\": {\n            \"text\": \"Publish event 6-885f58-1zcf1v for item has been triggered\"\n        },\n        \"createdByUserZUID\": \"5-98a6a4-wz0tt8\",\n        \"description\": null,\n        \"createdAt\": \"2019-12-16T17:58:40Z\",\n        \"updatedAt\": \"2019-12-16T17:58:40Z\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io\" path=\"/v1/webhooks/:webhook_zuid\" method=\"delete\" summary=\"Webhook Deletion\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"webhook_zuid\" type=\"string\" %}\nCorresponds to the Webhook's Unique ZUID value\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-12-16T18:39:00.305956275Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"40-cef081acb5-02t58c\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## Webhook Conditions\n\nWebhooks are executed by calling API endpoints. In order to create webhooks that will be triggered and executed by API calls, create webhooks with the following parameters. When an action occurs, such as content item creation, a search for the corresponding webhook will occur.\n\n### Example:\n\nAn item 7-ABCD-1234 corresponding to content model 6-ABCD-1234 has been updated in instance 8-ABCD-1234. Webhooks will be triggered based on the following action conditions.\n\n* Update on an item with ZUID 7-ABCD-1234 on an instance with ZUID 8-ABCD-1234\n* Update on any item belonging to content model 6-ABCD-1234 in instance 8-ABCD-1234\n* Update on any item in instance 8-ABCD-1234\n\n## Instances API Webhook\n\n### Create, Update, Delete and Publish Item**s**\n\n| Condition                                     | Scoped Resource | Parent Resource | Resource   | Action  | Request URL                                                  |\n| --------------------------------------------- | --------------- | --------------- | ---------- | ------- | ------------------------------------------------------------ |\n| Creating a new item                           | INSTANCE\\_ZUID  |                 | items      | CREATE  | POST /content/model/MODEL\\_ZUID/items                        |\n| Creating a new item for a given content model | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | CREATE  | POST /content/model/MODEL\\_ZUID/items                        |\n| Updating a specific item                      | INSTANCE\\_ZUID  |                 | ITEM\\_ZUID | UPDATE  | PUT /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID              |\n| Updating any item for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | UPDATE  | PUT /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID              |\n| Updating any item                             | INSTANCE\\_ZUID  |                 | items      | UPDATE  | PUT /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID              |\n| Deleting a specific item                      | INSTANCE\\_ZUID  |                 | ITEM\\_ZUID | DELETE  | DELETE /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID           |\n| Deleting any item for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | DELETE  | DELETE /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID           |\n| Deleting any item                             | INSTANCE\\_ZUID  |                 | items      | DELETE  | DELETE /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID           |\n| Publishing any item for a given content model | INSTANCE\\_ZUID  | MODEL\\_ZUID     | items      | PUBLISH | POST /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID/publishings |\n| Publishing a specific item                    | INSTANCE\\_ZUID  |                 | ITEM\\_ZUID | PUBLISH | POST /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID/publishings |\n| Publishing any item                           | INSTANCE\\_ZUID  |                 | items      | PUBLISH | POST /content/model/MODEL\\_ZUID/items/ITEM\\_ZUID/publishings |\n\n### Creating, Updating and Deleting Content Models\n\n| Condition                         | Scoped Resource | Parent Resource | Resource    | Action | Request URL                       |\n| --------------------------------- | --------------- | --------------- | ----------- | ------ | --------------------------------- |\n| Creating a new content model      | INSTANCE\\_ZUID  |                 | models      | CREATE | POST /content/model               |\n| Update a specific content model   | INSTANCE\\_ZUID  |                 | MODEL\\_ZUID | UPDATE | PUT /content/model/MODEL\\_ZUID    |\n| Updating any content model        | INSTANCE\\_ZUID  |                 | models      | UPDATE | PUT /content/model/MODEL\\_ZUID    |\n| Deleting a specific content model | INSTANCE\\_ZUID  |                 | MODEL\\_ZUID | DELETE | DELETE /content/model/MODEL\\_ZUID |\n| Deleting any content model        | INSTANCE\\_ZUID  |                 | models      | DELETE | DELETE /content/model/MODEL\\_ZUID |\n\n### Creating, Updating and Deleting Fields\n\n| Condition                                      | Scoped Resource | Parent Resource | Resource    | Action | Request URL                                          |\n| ---------------------------------------------- | --------------- | --------------- | ----------- | ------ | ---------------------------------------------------- |\n| Creating a new field                           | INSTANCE\\_ZUID  |                 | fields      | CREATE | POST /content/model/MODEL\\_ZUID/fields               |\n| Creating a new field for a given content model | INSTANCE\\_ZUID  | MODEL\\_ZUID     | fields      | CREATE | POST /content/model/MODEL\\_ZUID/fields               |\n| Updating a specific field                      | INSTANCE\\_ZUID  |                 | FIELD\\_ZUID | UPDATE | PUT /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID    |\n| Updating any field for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | fields      | UPDATE | PUT /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID    |\n| Updating any field                             | INSTANCE\\_ZUID  |                 | fields      | UPDATE | PUT /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID    |\n| Deleting a specific field                      | INSTANCE\\_ZUID  | FIELD\\_ZUID     | DELETE      | DELETE | DELETE /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID |\n| Deleting any field for a given content model   | INSTANCE\\_ZUID  | MODEL\\_ZUID     | fields      | DELETE | DELETE /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID |\n| Deleting any field                             | INSTANCE\\_ZUID  |                 | fields      | DELETE | DELETE /content/model/MODEL\\_ZUID/fields/FIELD\\_ZUID |\n\n### Creating, Updating and Deleting Views\n\n| Condition                | Scoped Resource | Parent Resource | Resource   | Action | Request URL                  |\n| ------------------------ | --------------- | --------------- | ---------- | ------ | ---------------------------- |\n| Creating a new view      | INSTANCE\\_ZUID  |                 | views      | CREATE | POST /web/views              |\n| Update a specific view   | INSTANCE\\_ZUID  |                 | VIEW\\_ZUID | UPDATE | PUT /web/views/VIEW\\_ZUID    |\n| Updating any view        | INSTANCE\\_ZUID  |                 | views      | UPDATE | PUT /web/views/VIEW\\_ZUID    |\n| Deleting a specific view | INSTANCE\\_ZUID  |                 | VIEW\\_ZUID | DELETE | DELETE /web/views/VIEW\\_ZUID |\n| Deleting any view        | INSTANCE\\_ZUID  |                 | views      | DELETE | DELETE /web/views/VIEW\\_ZUID |\n\n### Creating, Updating and Deleting Stylesheets\n\n| Condition                      | Scoped Resource | Parent Resource | Resource         | Action | Request URL                      |\n| ------------------------------ | --------------- | --------------- | ---------------- | ------ | -------------------------------- |\n| Creating a new stylesheet      | INSTANCE\\_ZUID  |                 | stylesheets      | CREATE | POST /web/scripts                |\n| Update a specific stylesheet   | INSTANCE\\_ZUID  |                 | STYLESHEET\\_ZUID | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Updating any stylesheet        | INSTANCE\\_ZUID  |                 | scripts          | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Deleting a specific stylesheet | INSTANCE\\_ZUID  |                 | SCRIPT\\_ZUID     | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n| Deleting any stylesheet        | INSTANCE\\_ZUID  |                 | scripts          | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n\n### Creating, Updating and Deleting Scripts\n\n| Condition                  | Scoped Resource | Parent Resource | Resource     | Action | Request URL                      |\n| -------------------------- | --------------- | --------------- | ------------ | ------ | -------------------------------- |\n| Creating a new script      | INSTANCE\\_ZUID  |                 | scripts      | CREATE | POST /web/scripts                |\n| Update a specific script   | INSTANCE\\_ZUID  |                 | SCRIPT\\_ZUID | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Updating any script        | INSTANCE\\_ZUID  |                 | scripts      | UPDATE | PUT /web/scripts/SCRIPT\\_ZUID    |\n| Deleting a specific script | INSTANCE\\_ZUID  |                 | SCRIPT\\_ZUID | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n| Deleting any script        | INSTANCE\\_ZUID  |                 | scripts      | DELETE | DELETE /web/scripts/SCRIPT\\_ZUID |\n\n### Creating, Updating and Deleting Redirects\n\n| Condition                    | Scoped Resource | Parent Resource | Resource       | Action | Request URL                          |\n| ---------------------------- | --------------- | --------------- | -------------- | ------ | ------------------------------------ |\n| Creating a new redirect      | INSTANCE\\_ZUID  |                 | redirects      | CREATE | POST /web/redirects                  |\n| Update a specific redirect   | INSTANCE\\_ZUID  |                 | REDIRECT\\_ZUID | UPDATE | PUT /web/redirects/REDIRECT\\_ZUID    |\n| Updating any redirect        | INSTANCE\\_ZUID  |                 | redirects      | UPDATE | PUT /web/redirects/REDIRECT\\_ZUID    |\n| Deleting a specific redirect | INSTANCE\\_ZUID  |                 | REDIRECT\\_ZUID | DELETE | DELETE /web/redirects/REDIRECT\\_ZUID |\n| Deleting any redirect        | INSTANCE\\_ZUID  |                 | redirects      | DELETE | DELETE /web/redirects/REDIRECT\\_ZUID |\n\n### Creating, Updating and Deleting Langs\n\n| Condition                    | Scoped Resource | Parent Resource | Resource | Action | Request URL                |\n| ---------------------------- | --------------- | --------------- | -------- | ------ | -------------------------- |\n| Creating a new language      | INSTANCE\\_ZUID  |                 | langs    | CREATE | POST /env/langs            |\n| Update a specific language   | INSTANCE\\_ZUID  |                 | LANG\\_ID | UPDATE | PUT /env/langs/LANG\\_ID    |\n| Updating any language        | INSTANCE\\_ZUID  |                 | langs    | UPDATE | PUT /env/langs/LANG\\_ID    |\n| Deleting a specific language | INSTANCE\\_ZUID  |                 | LANG\\_ID | DELETE | DELETE /env/langs/LANG\\_ID |\n| Deleting any language        | INSTANCE\\_ZUID  |                 | langs    | DELETE | DELETE /env/langs/LANG\\_ID |\n\n### Creating, Updating and Deleting Settings\n\n| Condition                   | Scoped Resource | Parent Resource | Resource       | Action | Request URL                         |\n| --------------------------- | --------------- | --------------- | -------------- | ------ | ----------------------------------- |\n| Creating a new setting      | INSTANCE\\_ZUID  |                 | settings       | CREATE | POST /env/settings                  |\n| Update a specific setting   | INSTANCE\\_ZUID  |                 | SETTINGS\\_ZUID | UPDATE | PUT /env/settings/SETTINGS\\_ZUID    |\n| Updating any setting        | INSTANCE\\_ZUID  |                 | settings       | UPDATE | PUT /env/settings/SETTINGS\\_ZUID    |\n| Deleting a specific setting | INSTANCE\\_ZUID  |                 | SETTINGS\\_ZUID | DELETE | DELETE /env/settings/SETTINGS\\_ZUID |\n| Deleting any setting        | INSTANCE\\_ZUID  |                 | settings       | DELETE | DELETE /env/settings/SETTINGS\\_ZUID |\n\n### Creating, Updating and Deleting Leads\n\n## Accounts API Webhook\n\n### Roles\n\n| Condition           | Scoped Resource | Parent Resource | Resource | Action | Request URL |\n| ------------------- | --------------- | --------------- | -------- | ------ | ----------- |\n| Creating a new role | INSTANCE\\_ZUID  |                 | roles    | CREATE | POST /roles |\n\n### Instance Roles\n\n| Condition                      | Scoped Resource | Parent Resource | Resource | Action | Request URL                          |\n| ------------------------------ | --------------- | --------------- | -------- | ------ | ------------------------------------ |\n| Generating a new Instance Role | INSTANCE\\_ZUID  | INSTANCE\\_ZUID  | roles    | CREATE | POST /instances/INSTANCE\\_ZUID/roles |\n\n### Instance Domains\n\n| Condition | Scoped Resource | Parent Resource | Resource | Action | Request URL |\n| --------- | --------------- | --------------- | -------- | ------ | ----------- |\n\n| Create domain for a given instance | INSTANCE\\_ZUID |   | domains | CREATE | POST /instances/INSTANCE\\_ZUID/domains |\n| ---------------------------------- | -------------- | - | ------- | ------ | -------------------------------------- |\n\n| Update a specific domain for a given instance | INSTANCE\\_ZUID |   | DOMAIN\\_ZUID | UPDATE | PUT /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| --------------------------------------------- | -------------- | - | ------------ | ------ | -------------------------------------------------- |\n\n| Update any domain for a given instance | INSTANCE\\_ZUID |   | domains | UPDATE | PUT /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| -------------------------------------- | -------------- | - | ------- | ------ | -------------------------------------------------- |\n\n| <p>Delete</p><p>a specific domain for a given instance</p> | INSTANCE\\_ZUID |   | DOMAIN\\_ZUID | DELETE | DELETE /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| ---------------------------------------------------------- | -------------- | - | ------------ | ------ | ----------------------------------------------------- |\n\n| <p>Delete</p><p>any domain for a given instance</p> | INSTANCE\\_ZUID |   | domains | DELETE | DELETE /instances/INSTANCE\\_ZUID/domains/DOMAIN\\_ZUID |\n| --------------------------------------------------- | -------------- | - | ------- | ------ | ----------------------------------------------------- |\n\n| Condition         | Scoped Resource | Parent Resource | Resource     | Action | Request URL                  |\n| ----------------- | --------------- | --------------- | ------------ | ------ | ---------------------------- |\n| Create Invite     | INSTANCE\\_ZUID  |                 | invites      | CREATE | POST /invites                |\n| Respond to Invite | INSTANCE\\_ZUID  |                 | INVITE\\_ZUID | UPDATE | PUT /invites/INVITE\\_ZUID    |\n| Delete Invite     | INSTANCE\\_ZUID  |                 | INVITE\\_ZUID | DELETE | DELETE /invites/INVITE\\_ZUID |\n","category":"guides","service":"accounts"},{"name":"EcoSystems","url":"/accounts/guides/ecosystems","objectId":"-LM9ojwPn8lAHufDR4Lw","item":[],"content":"---\ndescription: >-\n  Zesty.io Cloud Content Instances are networked through an EcoSystem, they can\n  share code, media and data between each other to create rich distributed\n  systems.\n---\n\n# EcoSystems\n\n## Zesty.io EcoSystems\n\nEcoSystems are used to network together Content Instances. Once networked in an EcoSystem, Content Instances may share share content, code, and media. EcoSystems are an add-on product in the Zesty.io Platform.\n\n{% hint style=\"success\" %}\n**Common Users for EcoSystems**\n\n* Mass multisite installations&#x20;\n* Brands managing multiple instances\n* Information Intranets\n* Reseller/Partner Templates\n{% endhint %}\n\n## EcoMedia (Shared Media)\n\nZesty.io [Cloud Content Instances](ecosystems.md) are launched with a [Micro Dam](../../media/guides/media-storage-micro-dam/). EcoMedia allows Micro DAMs (Zesty.io Digital Asset Managers) to be shared between Cloud Content Instances. This is useful for mass multisite installations or just when a couple company Instances want to share brand elements.\n\nThe EcoMedia experience blends seamlessly into the Content Manager user interface, and appear as top level folder to which the user can browse, access, and upload.\n\n{% hint style=\"success\" %}\n**Ways to Use EcoMedia**\n\n* Shared Branding Elements\n* Multi-site Shared Images\n{% endhint %}\n\n## EcoCode (Shared View Templates)\n\nZesty.io Cloud Content Instances are launched with the Web\\[Site] Engine option which allows for custom [view and template creation](../../webengine/guides/web-engine/view-templating.md). EcoCode allows for view template code written in HTML and Parsley (not excluding inline CSS or Javascript) to be shared as amongst other [Cloud Content Instances](ecosystems.md) in the same EcoSystem.\n\n{% hint style=\"success\" %}\n**Ways to Use EcoCode**\n\n* Multi-site Shared Template Code\n* Consistent Footers and Headers\n* Shared Endpoint Logic\n* Widgets and HTML Page Components\n{% endhint %}\n\n### Implementing EcoCode\n\nEcoCode can be accessed by any Content Instance that is part of an EcoSystem. EcoCode is implemented as Parsley code, and can be accessed from any view. It is simply done by knowing two pieces of information: the ZUID of an Instance and the name of a view. Currently, EcoCode is not available for OYD setups.\n\n```php\n{{include 8-x1y2z3-b4c5d6f7.footer}}\n```\n\nThe above line of Parsley code would attempt to access the Instance's (with the ZUID `8-x1y2z3-b4c5d6f7`) footer view.\n\n> _**NOTE:**_ This feature requires activation. Please connect with your Account Manager if you would like to use EcoCode.\n\n### EcoCode Scope\n\nEcoCode shared a view from an instance, but not the data in that Instance. It will reference the data on the instance that loads the view. Let's say we have two Cloud Content Instances.\n\n1. **Instance One** `8-x1y2z3-b4c5d6f7` has a view named `footer`\n2. **Instance Two** `8-b4c5d6-t4z3x2y1` has a view `homepage` that references the `footer` view in **Instance One**\n\n{% tabs %}\n{% tab title=\"Footer view file on Instance One\" %}\n```markup\n<div class=\"container\">\n    <div class=\"structure copyright\">\n        <h1>{{page.seo_meta_title}}</h1>\n        <a href=\"https://www.zesty.io\">\n            <img src=\"https://b4bf8f5fd4f88798b353-e0ad6217c420dd1c49b31c5c906a8967.ssl.cf2.rackcdn.com/or-zesty-logo-stand-alone.png\" />\n        </a>\n        <p>&copy;2012-{{site.date(Y)}} Parsley is proudly brought to you by <br/><a href=\"https://www.zesty.io\">Zesty.io Platform, Inc.</a>  </p>        \n    </div>\n</div>\n```\n{% endtab %}\n\n{% tab title=\"Homepage view file on Instance Two\" %}\n```markup\n<section>\n    Bunch of custom code here.....\n</section>\n<section class=\"footer\">\n    {{include 8-x1y2z3-b4c5d6f7.footer}}\n</section>\n```\n{% endtab %}\n{% endtabs %}\n\nThe homepage view file will include the foreign view from Instance One. Scope wise, the Parsley call to `{{page.title}}` in the footer view on **Instance One** will attempt to access the page data from **Instance Two,** not Instance One. This means that EcoCode shared views references local data on the instance its shared onto, not the remote data.\n","category":"guides","service":"accounts"},{"name":"Setting Up Two-factor Authentication","url":"/accounts/guides/how-to-set-up-two-factor-authentication","objectId":"-LbZ3ezJqDRznDcCVRyU","item":[],"content":"---\ndescription: >-\n  For that extra step of security, set up two-factor authentication. This\n  article will show a user how to enable two-factor authentication on their\n  account.\n---\n\n# Setting Up Two-factor Authentication\n\nTwo-factor authentication make Zesty.io safer for your business. We highly recommend you and your team uses two-factor authentication to logging in. In this guide we will walk you through a few simple steps to get two-factor enabled for your user login.\n\n1. [Log into Zesty.io](https://accounts.zesty.io/login)&#x20;\n2. [Open your account settings](https://accounts.zesty.io/settings/account)&#x20;\n3. Look for the 2-Factor Authentication (2FA) card\n4. Enter your phone number and click enable\n5.  Logout\\\n\n\n    Note: If this is your first time using the Authy 2FA app, then you will receive a text message with a link to download & install Authy&#x20;\n\n    * [Download](https://authy.com/download/) and install Authy via SMS link\n    * After downloading, enter the same email and phone number into the Authy app that you use for Zesty.io.&#x20;\n6. [Log back in to Zesty.io](https://accounts.zesty.io/login)&#x20;\n7. From the 2FA screen do one of the following:\\\n\n   * Open the Authy app and enter the Zesty.io token into the 2FA field.\\\n\n   * Use Authy One-Touch notification and click Approve\n8. Your 2FA setup is now complete.\n\n### Login\n\nThe very first thing you will need to do is [log into Zesty.io](https://accounts.zesty.io/). ![login sample](https://wyp1jm.media.zestyio.com/2fa-step1.png)\n\n### Open your profile settings\n\nOnce in the account manager you will need to click on my account (your name in the top right hand corner) and select my profile.\n\n![Click security link and click enable](https://wyp1jm.media.zestyio.com/2fa-step2.png)\n\n### Look for the 2-Factor Authentication Card\n\nEnter your phone number then click Enable.\n\n![enter your phone number](https://wyp1jm.media.zestyio.com/2fa-step3.png)\n\n### Get a text message with link to download Authy\n\nYour smart phone will get an SMS with a link to download the Authy app.\n\n![zesty text message download link](https://wyp1jm.media.zestyio.com/zesty-two-factor-message.png)\n\n### Download Authy\n\nProceed to download Authy. **After installing, enter the same **_**phone number**_** you entered into Zesty, and the **_**email**_** that matches your Zesty account.**\n\n![Authy Download](https://wyp1jm.media.zestyio.com/zesty-two-factor-download-authy.png)\n\n### Log Back Into Zesty.io\n\n![log into your property](https://wyp1jm.media.zestyio.com/2fa-step1.png)\n\n### After logging in, Zesty.io will prompt you for a two-factor key\n\n![Zesty asks for two-factor key](https://wyp1jm.media.zestyio.com/2fa-step4.png)\n\n### Open authy and enter the Zesty.io token shown in the 2FA field\n\n![view your two-factor key in Zesty and enter your key](https://wyp1jm.media.zestyio.com/zesty-two-factor-get-key.png)\n\n{% hint style=\"success\" %}\nYou have now completed two factor authentication for your account!\n{% endhint %}\n","category":"guides","service":"accounts"},{"name":"Refreshing the Cache","url":"/accounts/guides/refreshing-the-cache","objectId":"-M1lz4ra4oVKeudx4JhU","item":[],"content":"---\ndescription: >-\n  If you published updates but you're not seeing them on your live site you\n  might need to refresh the cache.\n---\n\n# Refreshing the Cache\n\n### Overview\n\nCaching allows for data to be stored and quickly retrieved when requests are made. However, sometimes when a cached item is updated you may not see the updates you've made even after you published them to the live site even though you can see the changes in preview. When that happens refreshing the cache (also known as busting the cache) purges the stored items and retrieves the latest items for storage. Once the cache is refreshed users will be able to see the updates that they've made.&#x20;\n\nLearn more about caching [here](https://en.wikipedia.org/wiki/Cache\\_\\(computing\\)).\n\n## Refreshing Cached Items\n\n### Steps to Refresh Cached Item(s)&#x20;\n\n1\\. Locate the item that needs its cache refreshed and select it.\n\n![Locate and select the item from the sidebar.](../../.gitbook/assets/01-cache-bust-find-item.png)\n\n2\\. In the editing view scroll down until you see Refresh Cached Item button in the right-hand sidebar and click it.\n\n![Scroll until you see the Refresh Cached Item button.](../../.gitbook/assets/02-cache-bust-find-button.png)\n\n3\\. A green success notification will show in the lower right-hand corner.\n\n![After clicking the button look for the green success notification.](../../.gitbook/assets/3-cache-bust-success-notification.png)\n\n4\\. Hard-refresh the live site and view your changes.&#x20;\n\n## Refreshing the Instance Cache\n\n{% hint style=\"info\" %}\nOnly user roles with publishing privileges can access this feature.\n{% endhint %}\n\n1\\. From any section in the content manager access the main instance menu in the upper right-hand corner by clicking on it. Then from the dropdown click on the **Refresh Instance Cache** button.\n\n![Content dashboard with instance cache button.](<../../.gitbook/assets/Screen Shot 2021-03-29 at 4.58.42 PM.png>)\n\n**Note:** If you have a large number of pages it may take some time for all of the pages refresh.\n\n","category":"guides","service":"accounts"}],"content":"# Accounts API\n\nAPI used to control management of users, roles, instances, and teams.\n\n{% hint style=\"warning\" %}\nAccounts-API requires Authentication, examples to authenticate can be found in wrapper documentation.\n{% endhint %}\n\n## Documentation\n\nFull REST API documentation available in multiple languages here: [https://accounts-api.zesty.org/?version=latest](https://accounts-api.zesty.org/?version=latest)\n\n## Tooling\n\nThe Node Wrapper hits a few Accounts API endpoints commonly used for development.\n\n{% content-ref url=\"broken-reference\" %}\n[Broken link](broken-reference)\n{% endcontent-ref %}\n\n## Webhooks\n\nDocumentation on creating, modifying and deleting webhooks can be found below.\n\n{% content-ref url=\"broken-reference\" %}\n[Broken link](broken-reference)\n{% endcontent-ref %}\n","category":"guides","service":"accounts"}],"content":"---\ndescription: >-\n  The accounts interface is where users can create instances, manage Teams, add\n  Blueprints, and more.\n---\n\n# Accounts UI\n\n## Overview\n\nAccounts settings can be accessed though the Accounts management interface as well as through the content management interface. The following items can be updated through your account settings:\n\n* User name\n* Gravatar\n* Primary email address\n* Add back-up email address\n* Password\n* 2-factor authentication\n* Preferences: manage blueprints, manage teams, and instance grid\n\n![Account settings interface.](../../.gitbook/assets/account-settings-screen.png)\n\n### Accessing Account Settings\n\n#### Accounts Interface\n\n1. From the all-instances view, click on your user name/avatar in the upper right-hand corner outlined in purple below.\n\n![Access account settings by clicking on your user name/avatar.](../../.gitbook/assets/accounts-interface-account-settings.png)\n\n1. A dropdown menu will appear with options. Choose My Account.\n\n![Select My Account from the dropdown.](../../.gitbook/assets/accounts-interface-dropdown-my-acct.png)\n\n1. [Accounts Interface overview](https://zesty.org/services/accounts-ui/accounts-interface-all-instances-view)\n2. [Blueprints](https://zesty.org/services/accounts-ui/blueprints)\n3. [Teams](https://zesty.org/services/accounts-ui/teams)\n","category":"ui","service":"accounts"},{"name":"Instances","url":"/instances","objectId":"RshrxCb0XQoqf4yeXb45","item":[],"category":"instances","service":""},{"name":"instances","url":"/instances","item":[{"name":"Guides","url":"/instances/guides","objectId":"4cuXrQhAvzFc86fz5qxa","item":[],"content":"# Guides\n\n","category":"guides","service":"instances"},{"name":"guides","url":"/instances/guides","item":[{"name":"Instances API","url":"/instances/guides/instances-api","objectId":"-M6f5BoV09p9p2_wSXp7","item":[],"content":"---\ndescription: A REST API for interacting with your instance resources.\n---\n\n# Instances API\n\nEvery instance created in Zesty.io can be interacted with over https using the instance [API](https://en.wikipedia.org/wiki/Application\\_programming\\_interface) (Application Programming Interface). When an instance is created it is assigned a [ZUID](https://github.com/zesty-io/zuid-specification) (Zesty Universal IDentifier). Using this ZUID the instances API can be requested with the following URL pattern.\n\n{% hint style=\"info\" %}\nComplete API Reference: [https://instances-api.zesty.org](https://instances-api.zesty.org)\n{% endhint %}\n\n```\nhttps://ZUID.api.zesty.io/v1/\n```\n\nThe instance API is implemented as a [REST](https://restfulapi.net/) (Representational State Transfer) architecture. It allows for [CRUD](https://en.wikipedia.org/wiki/Create,\\_read,\\_update\\_and\\_delete) (Create, Read, Update, Delete) operations on the requested instance.\n\nThere can be many consumers of the Instances API. For example; the [manager-ui](https://zesty.org/services/manager-ui) consumes your instances API to provide it's functionality. Another common example is making instances API requests as part of a [CI/CD](https://en.wikipedia.org/wiki/Continuous\\_integration) (Continuous Integration/Continuous Development) flow.\n\n### Access Permissions\n\nInstance access is restricted by a [roles & permissions](https://zesty.org/getting-started/roles-and-permissions) system. Accessing an instance with the API requires making an authenticated request. Which is a request that includes an `Authentication` header which contains either a [user session or an access token](https://zesty.org/apis/auth-api). Which one you use will depend upon your use case and needs.\n\n{% hint style=\"warning\" %}\nPublishing actions are _**not**_ supported with access tokens.\n{% endhint %}\n\n### Responses\n\nAll API responses are [JSON](https://www.json.org/json-en.html) (JavaScript Object Notation) format. Although JSON includes the JavaScript language name it is a common format consumable across many programming langauges. It acts as a standardized way to pass various data structures over http.\n\n## Tooling\n\n### Node SDK\n\nThe [node-sdk](https://www.npmjs.com/package/@zesty-io/sdk) is the primary tool for interacting with Zesty.io platform resources. It can be used to programmatically manage an instance.\n","category":"guides","service":"instances"},{"name":"How To's","url":"/instances/guides/how-tos","objectId":"M0MIoU5q54hMDQCWbER1","item":[],"content":"# How To's\n\n","category":"guides","service":"instances"},{"name":"how-tos","url":"/instances/guides/how-tos","item":[{"name":"Adding a Favicon","url":"/instances/guides/how-tos/adding-a-favicon","objectId":"-MW_NdeBvQm5nnMLEryu","item":[],"content":"---\ndescription: >-\n  Favicons serve a branding and help users identify your site when you have\n  multiple browser tabs open.\n---\n\n# Adding a Favicon\n\n### Overview\n\nFavicons are typically 16x16 pixel icon that's shown in a browser's tabs and bookmark lists. They not only serve as branding, but they help users easily identify your site in bookmark lists and among multiple browser tabs.&#x20;\n\n![Favicon in browser tab.](../../../.gitbook/assets/favicon-example.png)\n\n### Steps to add a favicon\n\n1\\. From the Content Manger click on the globe icon in the upper left-hand corner to launch the favicon modal\n\n![Locate the favicon in the upper left-hand corner.](../../../.gitbook/assets/01-click-on-favicon.png)\n\n2\\. Click the +  in the favicon modal to launch the media modal.&#x20;\n\n![Click the plus icon to launch the media modal.](../../../.gitbook/assets/02-favicon-modal.png)\n\n3\\. From the media modal select an existing image or upload a new image by dragging new images into the modal. Then select the image you want by clicking on it and click the green **Load Selected** button.\n\n![A selected image in the media modal.](../../../.gitbook/assets/03-media-modal-load-selected-icon.png)\n\n4\\. With your favicon selected, Zesty will show you the favicon at different sizes. If you're satisfied then click the green **Save Favicon** button. _Note: you may need to scroll to see all sizes and **Save Favicon** button._\n\n![Favicon modal with different favicon sizes.](../../../.gitbook/assets/04-save-favicon.png)\n\nCongratulations! You've added a favicon. \\\nYour selected favicon will appear in the upper left-hand corner of the content manager where the globe icon was.&#x20;\n\n![Content manager dashboard with custom favicon.](../../../.gitbook/assets/05-favicon-added.png)\n\n### Updating an existing favicon\n\n1\\. Click on the favicon which is in the upper left-hand corner to launch the favicon modal (shown in step 1 above).&#x20;\n\n2\\. Click on the X in the corner of the existing favicon to remove it.&#x20;\n\n![](../../../.gitbook/assets/05-update-existing-icon.png)\n\n3\\. Then click on the plus to add a new image (show in step 2 above) to select a new favicon.\n","category":"guides","service":"instances"},{"name":"Analytics","url":"/instances/guides/how-tos/analytics","objectId":"-LMiUvY_jAtdedVu9J6D","item":[],"content":"---\ndescription: Zesty.io supports a range of analytics products.\n---\n\n# Analytics\n\n## Google Analytics\n\n{% hint style=\"warning\" %}\n**Making Changes to Existing Integrations**: After making changes to an existing GA integration you must publish a file (either in the Editor or Content section) before you will see the changes on the live site.\n{% endhint %}\n\n### Getting Started\n\nTo setup Google Analytics for your cloud content instance, you will need to first sign up with Google and obtain an Urchin ID and Profile ID from them.  Once you have those, follow these steps:\n\n* Open the Manager\n* Click on the \"Schema\" tab\n* Click on the \"Site Settings\" button\n* Click on the \"Analytics\" tab in the left hand menu\n* Set your Google Urchin ID\n* Set your Google Profile ID\n* Make sure that the \"Use Google Universal Code\" toggle is on (green)\n* Click \"Save\"\n\n{% hint style=\"warning\" %}\nAnalytics are no longer accessible via the content manager homescreen.&#x20;\n\nAnalytics are now located at `/analytics`. \\\n\\\nOnly users with Owner, Admin, and Developer roles can setup Google Analytics.\n{% endhint %}\n\n#### Verifying Setup\n\nVisit a page on your instance's **live domain** and inspect the \\<head> element.&#x20;\n\n{% hint style=\"info\" %}\nGoogle Analytics setup can only be verified by inspecting the \\<head> of the _live_ domain. If your instance is not live use the zesty.dev domain to send your instance live and verify your Google Analytics setup.&#x20;\n{% endhint %}\n\nYou should see a Google Analytics \\<script> tag that looks something like this (with your ID replacing the demo data \"99999\"):\n\n```\n<!-- Google Analytics -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', '99999', 'auto');ga('send', 'pageview');\n</script>\n<!-- Google Analytics -->\n```\n\nOver time, you should see analytics data build up on the dashboard in your Google Analytics account.\n\n### Cross Domain Tracking\n\nZesty.io also supports configuration of cross domain tracking when using Google Analytics.  This makes it possible for Google Analytics to see sessions on two related sites as a single session.\n\n#### Cross Domain Tracking Setup\n\nTo configure this for your Zesty instance:\n\n* Open the Manager\n* Click on the 'Config' tab\n* Click on the 'Site Settings' button\n* Click on the 'Analytics' tab in the left hand menu\n* Set your Google Urchin ID\n* Set your Google Profile ID\n* Ensure that the \"Use Google Universal Code\" toggle is on (green)\n* Add a comma separated list of domains you wish to link for tracking into the \"Google Auto Linker\" field (example: domain1,domain2,domain3)\n* Click \"Save\"\n\n(If you don't see \"Google Auto Linker\" in your settings, contact Zesty.io support to have it added).\n\n#### Verifying Cross Domain Tracking Setup\n\nTo check your changes, visit a page on your instance's live domain and inspect the \\<head> element. You should see a Google Analytics \\<script> tag that looks something like this:\n\n```\n<!-- Google Analytics -->\n <script>\n (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i\n [r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsB\n yTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'sc\n ript','//www.google-analytics.com/analytics.js','ga');ga('create', '99999999', 'auto'\n , {'allowLinker': true});ga('require', 'linker');ga('linker:autoLink', ['domain1.com'\n ,'domain1.org','domain2.com']);ga('send', 'pageview');\n </script>\n <!-- Google Analytics -->\n```\n\nThat's all you need to do!\n","category":"guides","service":"instances"},{"name":"Adding Image Alt Text","url":"/instances/guides/how-tos/adding-image-alt-text","objectId":"-M8RaFSA3c525W2cySUA","item":[],"content":"---\ndescription: >-\n  Adding image alt text helps describe the image for screen readers and makes a\n  site more accessible.\n---\n\n# Adding Image Alt Text\n\n### Overview\n\nAdding alt text to images makes sites more accessible for users who are unable to see them.&#x20;\n\n### Implementation\n\nThere are several ways that alt text can be implemented in Zesty.io. We recommend using the [Media section](https://zesty.org/services/manager-ui/media)'s Title field, or a text [field](https://zesty.org/services/manager-ui/schema/fields) in the [Content section](https://zesty.org/services/manager-ui/content) to make the alt description easily accessible to and editable by the content owner.&#x20;\n\nAlt text can also be hardcoded in via the [Web IDE](https://zesty.org/services/manager-ui/editor), however this approach will not give your content owners the flexibility to edit that text as necessary.&#x20;\n\nThe steps below will cover how to use the Media sections Title field or a text field in the Content section to add alt text. &#x20;\n\n### Steps: Media Section Title Field\n\n1\\. Navigate to the Media section.\n\n![Navigate to the Media section.](../../../.gitbook/assets/manager-ui-media.png)\n\n2\\. Upload an image via drag n' drop or via the file manager.\n\n![Upload images with the blue Upload button.](../../../.gitbook/assets/02-upload-image.png)\n\n3\\. The Title field will automatically be filled out with the image's file name. Edit the Title field and add your image alt text.&#x20;\n\n![Image settings modal shows information about an image.](../../../.gitbook/assets/03-image-title-update.png)\n\n4\\. Save your changes to the Title field by clicking the green Save button.\n\n![After changing your title click the green Save button.](../../../.gitbook/assets/04-update-title-and-save.png)\n\n5\\. Navigate to the Content section.\n\n![Navigate to the Content section.](../../../.gitbook/assets/media-man-ui-nav-to-content.png)\n\n6\\. Add your image to your content and save (and publish as necessary).\n\n![Add your image and save.](../../../.gitbook/assets/06a-alt-text-add-image-and-save.png)\n\n7\\. Navigate to the Web IDE.&#x20;\n\n![Navigate to the Web IDE.](../../../.gitbook/assets/07ab-alt-text-navigate-to-ide.png)\n\n8\\.  Locate your view and add an HTML image tag and with an alt attribute. Fill out the alt attribute with the Parsley \\{{ .getImageTitle() \\}} call.&#x20;\n\n![Code in your image tag with alt text attribute.](../../../.gitbook/assets/08a-alt-text-code-in-title-field.png)\n\n### Steps: Content Section Text Field\n\n1.Navigate to the Media section.&#x20;\n\n![Navigate to the Media section.](../../../.gitbook/assets/01ab-alt-text-navigate-to-media.png)\n\n2\\. Upload an image via drag n' drop or via the file manager.&#x20;\n\n![Upload an image.](../../../.gitbook/assets/02ab-alt-text-add-an-image.png)\n\n3\\. Navigate to the Schema section.\n\n![Navigate to the Schema section.](../../../.gitbook/assets/03b-alt-text-navigate-to-schema.png)\n\n4\\. Locate the content model that you want to add the your alt text field to. In this example we're adding it to the About Us page.\n\n![Locate the Content Model that you want to add a field to.](../../../.gitbook/assets/04b-alt-text-schema-locate-content-model.png)\n\n5\\. Add a text field type called Image Alt Text.&#x20;\n\n![Add a text field type for your alt image text.](../../../.gitbook/assets/05b-alt-text-add-text-field.png)\n\n6\\. Navigate to the content section and locate the content model that you added your alt text field to.\n\n![Locate the content model that you added your alt text field to.](../../../.gitbook/assets/06b-alt-text-locate-content-model.png)\n\n7\\. Add or update your image, and add your alt text and save (and publish as necessary).\n\n![Add or update an image, and add alt text, and save.](../../../.gitbook/assets/07b-alt-text-add-save-new-alt-text.png)\n\n8\\. Navigate to the Web IDE.\n\n![Navigate to the Web IDE](../../../.gitbook/assets/07ab-alt-text-navigate-to-ide.png)\n\n9\\.  Locate your content model's related view. Add an HTML image tag and with an alt attribute. Fill out the alt attribute with the Parsley \\{{ this. \\}} call and complete the call with the name of the field that you created in step 2.\n\n![Code in your image tag and alt attribute.](../../../.gitbook/assets/09b-alt-text-code-in-image-alt-text-field.png)\n","category":"guides","service":"instances"},{"name":"Accepting an Invite to an Instance","url":"/instances/guides/how-tos/accepting-an-invite-to-an-instance","objectId":"-M7tUyhSE_h6lgnt7WkX","item":[],"content":"---\ndescription: >-\n  Before you can work on an instance that you're invited to, you'll need to\n  accept your invite.\n---\n\n# Accepting an Invite to an Instance\n\n### Overview\n\nOnly users of an instance can access it and edit its content. To become a user of an instance a user needs to be its [owner](https://zesty.org/getting-started/roles-and-permissions#owner), part of [team](https://zesty.org/guides/adding-a-team) that's assigned to it, or invited to access it. After a user is invited to access an instance they'll need to accept their invite before they can access the instance. Likewise, if a user is not the owner or a team member of an instance they'll need be invited _and_ accept that invite to an instance before they can access it.&#x20;\n\nThere are 2 ways to login to accept your invite: via email and by navigating to [https://accounts.zesty.io/login](https://accounts.zesty.io/login).&#x20;\n\n{% hint style=\"warning\" %}\nEven though a user does _not_ have a Zesty.io account they can still be invited to access an instance. However, they will need to create an account _before_ they can accept their invite.\n{% endhint %}\n\n### Before you begin\n\nIf you've never created an account in Zesty.io then [create an account](https://accounts.zesty.io/signup).\n\n1\\. Navigate to [https://accounts.zesty.io/signup](https://accounts.zesty.io/signup) to sign up for an account.\n\n![](../../../.gitbook/assets/accept-invitation-create-account-form.png)\n\n2\\. After you've created an account, check your email and verify your account.&#x20;\n\n{% hint style=\"info\" %}\nIf you don't see a verification email in your inbox check your spam folder.&#x20;\n{% endhint %}\n\n3\\. Click the orange \"Verify your email address\" button to verify your email address.\n\n![](<../../../.gitbook/assets/accept-invitation-email verification.png>)\n\n### Steps\n\nThere are 2 ways to get to the Zesty.io login screen:\n\n#### Get to the login screen via email&#x20;\n\n1a. Locate the invitation in your inbox.&#x20;\n\n![](../../../.gitbook/assets/accept-invitation-invitation-email.png)\n\n2a. Open the email and click on the orange \"Login to accept invite\" button, which will route you to the Zesty.io login screen.\n\n![](../../../.gitbook/assets/accept-invitation-email-click-to-accept.png)\n\n\n\n#### Get to the login screen via URL\n\n1b. Navigate to the [Zesty.io login](https://accounts.zesty.io/login) screen.\n\n#### After getting to the login screen follow the steps below:\n\n2\\. Use your account credentials to login to your account.&#x20;\n\n![Zesty.io login screen.](../../../.gitbook/assets/accept-invitation-sign-in.png)\n\n3\\. There will be an Invites section in your all-instances view. Click the green Accept Invite section to accept your invite.\n\n![Accounts homescreen with Invites and All-Instances sections.](../../../.gitbook/assets/accept-invitation-all-instances-view.png)\n\n4\\. Once you accept your invite the instance's settings drawer will open and you'll see a  notification in the lower left-hand corner that you've accepted access to an instance.&#x20;\n\n![Acceptance notification and instance settings drawer.](../../../.gitbook/assets/accept-invite-instance-drawer-and-notification.png)\n\n### Troubleshooting\n\n#### Email Mismatch\n\nIf you've been invited to access an instance but you do not see an invitation once you login, ensure that the invite email and Zesty.io account email _are an exact match_. For example, you'll have issues accessing your invitation if your account has been created with a personal email address, and the invitation was sent to a professional email address.\n\n**Invitee doesn't have a Zesty.io account**\n\nAnyone can be invited to access an instance whether or not they have an existing Zesty.io account. However, only users who **do have an existing account** will be able to accept an invite. Before you try to accept an invite be sure that you have a Zesty.io account under the email that you've been invited with.\n\n**Unable to accept invite via email link**\n\nIf you're unable to accept an invite via the link in the email you can login to your account and view invitations in the Accounts interface and accept them there. Invitations to instances show up in their own section above the instances that you already have access to. &#x20;\n","category":"guides","service":"instances"},{"name":"Accessing Basic API JSON Endpoints","url":"/instances/guides/how-tos/how-to-access-basic-api-json-endpoints","objectId":"-Lb5XEnqb1dyXgfZDxAs","item":[],"content":"---\ndescription: Learn about our basic API JSON endpoints and how to use them.\n---\n\n# Accessing Basic API JSON Endpoints\n\nThis guide covers our basic API JSON endpoints. \\[comment]: <> (If you're looking for our customizable API JSON endpoints read [this](https://developer.zesty.io/docs/code-editor/customizable-json-endpoints-for-content/) guide.)\n\nIn order to use our basic API JSON endpoints take the following steps:\n\n### &#x20;**Allow access to the basic API JSON endpoint**\n\n* Go to the Schema section -> Instance Settings -> Developer in the left-hand sidebar nav.&#x20;\n* Select either \"Access to Basic JSON API for content\" and/or \"Allow cross domain access to Basic JSON API\" by clicking the button, and then click \"Save\". If these settings are turned on the button will be green.\n\n&#x20;**View the endpoints at** `https://[hash].io-dev-preview domain.com/z/content/[zid].json`\n\n* Select a zuid from a page group or data set that you want to view\n* Plug in your Zesty.io developer preview URL and append with `/z/content/[zid].json`\n\nPlease note that images are not generated, however their CDN ID is shown.\n","category":"guides","service":"instances"},{"name":"Adding Instances to EcoSystems","url":"/instances/guides/how-tos/adding-instances-to-ecosystems","objectId":"-M6b7jRhP4CPEF0pCVwL","item":[],"content":"---\ndescription: Instances in ecosystem can easily share media with their ecosystem media bin.\n---\n\n# Adding Instances to EcoSystems\n\n## Overview\n\nUsers might have a use case for creating a group of interrelated instances. We call those interrelated instances an EcoSystem. When EcoSystems are created in Zesty.io they can share a media bin between all of the instances in the EcoSystem. The shared media bin allows assets to be shared so they won't need to be uploaded to every new instance in the EcoSystem.\n\n{% hint style=\"info\" %}\nThis guide only shows how instances are added to EcoSystems during the creation process.\n{% endhint %}\n\n## Steps to Adding Instances to EcoSystems\n\nNew instances can be added to an EcoSystem when they are being named. Follow the steps below to create a new instance and it to an EcoSystem in the process.\n\n1. Click the green  '+ Create Instance' button from the all-instances view.\n\n![The Create Instance button near the top right-hand corner of the all-instances view.](../../../.gitbook/assets/new-instance.png)\n\n1. Click in the text box and give you instance a name.\n\n![Name your instance text box.](../../../.gitbook/assets/name-instance.png)\n\n1. Click the arrow to reveal the dropdown and select which instance you'd like to share your media bin with (ie create an EcoSystem with).\n\n![Select an EcoSystem from the dropdown.](../../../.gitbook/assets/select-ecosys.png)\n\n1. Click the gray '+ Create New Instance' button.&#x20;\n\n![Create new instance button.](../../../.gitbook/assets/click-create-new-instance.png)\n\n1. Complete the instance creation flow beginning with selecting a blueprint. If you're unfamiliar with the process follow [this](https://zesty.org/guides/how-to-create-a-new-instance#step-2-select-a-blueprint) guide.&#x20;\n","category":"guides","service":"instances"},{"name":"Bottom Loading JavaScript","url":"/instances/guides/how-tos/bottom-loading-javascript","objectId":"-M6kf7X6xV9O7PXtt412","item":[],"content":"---\ndescription: >-\n  Bottom loading your JavaScript can improve page load times as well as other\n  benefits.\n---\n\n# Bottom Loading JavaScript\n\n### Steps\n\nFollow these steps to bottom load your JavaScript.\n\n1\\. Navigate to your Settings section -> Instance Settings category -> Developer.&#x20;\n\n![Navigate to your instance's Settings section.](../../../.gitbook/assets/01-bottom-load-js.png)\n\n2\\. Toggle the \"Automatically include JavaScript\" in head setting to _Off_ and save.\n\n![Automatically include JavaScript in head setting.](../../../.gitbook/assets/02-bottom-load-js-toggle.png)\n\n3\\. Navigate to the Editor and find the Loader listed under Views, and select it.\n\n![Editor section with loader file selected.](../../../.gitbook/assets/03-bottom-load-js-editor.png)\n\n4\\. Add a script tag with the following Parsley call in the `src` attribute `{{instance.getJsUrl()}}`. For example: `<script type=\"text/javascript\" src=\"{{instance.getJsUrl()}}\"></script>`\n\n![Add a script tag to the Loader.](../../../.gitbook/assets/04-bottom-load-js-add-script-tag.png)\n\n5\\. Save and Publish your changes to send them live.&#x20;\n\n![Save and publish to send your changes live.](../../../.gitbook/assets/05-bottom-load-js-save-and-publish.png)\n\n","category":"guides","service":"instances"},{"name":"Building the Schema and Selecting Fields","url":"/instances/guides/how-tos/building-the-schema-and-selecting-fields","objectId":"-LwZlNqPwUlYvmD7iqLu","item":[],"content":"---\ndescription: >-\n  Learn how to select content models and fields when building your instance's\n  schema.\n---\n\n# Building the Schema and Selecting Fields\n\n## Introduction\n\nBuilding your instance's schema is the first step to getting started with your new instance. Building your instance's schema means that we'll be creating content models and adding fields to those content models. There are 3 types of content models:\n\n1. Single Page (e.g. about us page)\n2. Multi-page sets (e.g. blog articles)\n3. Headless sets (e.g. blog tags)\n\nAfter we create content models, we'll add fields to them. Fields allow users to enter their content.\n\n## Content Models\n\nThe Schema section's home screen has a step-by-step guide to help you choose the right content model for your needs. After the content model type is selected, you'll name it, then select a parent if necessary, and create it.\n\n![Schema section home screen.](../../../.gitbook/assets/Schema-section-homescreen.png)\n\n### Step 1: Model Type\n\n![Creating a content model step 1: select a model type.](../../../.gitbook/assets/schema-section-content-model-creation-step1-model-type.png)\n\nUse the toggles to answer the prompts and the content model type will be automatically selected based on your answers. If you already know what you need go ahead and select your content model type from the dropdown.\n\n### Step 2: Model Description\n\n![Creating a content model step 2: give it a name.](../../../.gitbook/assets/schema-section-content-model-creation-step2-model-description.png)\n\nFill out the Display Name textbox and the Reference Name will auto-populate. The Display Name is used to identify the model in the Content section. The Reference Name is used to identify the model in the Editor section. The Description is optional. The model's Display Name, Reference Name, and Description can all be edited after it's been created.\n\n### Step 3: Model Parent\n\n![Creating a content model step 3: select a parent](../../../.gitbook/assets/schema-section-content-model-creation-step3-model-parent.png)\n\nSelecting a parent for your model will affect how it displays in Content section and will create default paths for its routing. For example if you have a set called Articles and you select a page called Blog Page as its parent, the URL path for the articles will be: `/blog-page/article-name`. The model's parent can be edited after it's been created.\n\n### Step 4: Content Model Creation\n\n![Creating a content model step 4: create the model](<../../../.gitbook/assets/create-new-model-button (1).png>)\n\nClick the green Create New Model button to create your model.\n\n## Fields\n\nFields are added to a content model after it's been created. Fields allow users to enter their content.\n\n![Content Model without any fields.](../../../.gitbook/assets/add-field-to-content-model.png)\n\n### Step 1: Field Dropdown\n\n![Add a field step 1: Click the dropdown for a list of field types.](../../../.gitbook/assets/field-selection-dropdown.png)\n\nClick the dropdown to select a field. Determine the field type you need by thinking about the type of content that will be entered. Learn more about field types by reading this [article](https://zesty.org/services/manager-ui/schema/fields).\n\n### Step 2: Field Type\n\n![Add a field step 2: select a field type](../../../.gitbook/assets/select-a-field-type.png)\n\nSelect a field from the dropdown by hovering over it and clicking it.\n\n### Step 3: Field Attributes\n\nFill out your field's attributes:\n\n1. Field Label\n2. Field Name\n3. Is this field required?\\*\n4. Show this value in the table listing view?\\*\\*\n5.  Tool Tip and Description\\*\n\n    \\* denotes optional attributes.\n\n\\*\\* denotes an optional attribute that apply to Multi-page and Headless sets only.\n\n{% hint style=\"info\" %}\nAll of these attributes can also be edited after the field is created. _\\*\\*_\n{% endhint %}\n\n**Field Label and Field Name**\n\n![Field Label and Field Name](../../../.gitbook/assets/label-and-name-your-field.png)\n\nGive your field a Field Label and Field Name.The Field Label will be displayed in the Content section when you're adding content. The Field Name will be used to identify a content model's field in the Editor. The Field Name will auto-populate based on the Field Label's text.\n\n**Is this field required?**\n\n![Required field toggle](../../../.gitbook/assets/field-required-option.png)\n\nIf this toggle is flipped to Yes then an asterisk will appear next to the Field Label in the Content section. This field will be required to have content in it prior to saving and publishing in the Content section.\n\n**Show this value in the table listing view?**\n\n![Show-in-table toggle](../../../.gitbook/assets/field-show-in-table.png)\n\nThis attribute only applies to multi-page sets and headless sets. If you'd like this field to show in the [table-listing view](https://zesty.org/services/manager-ui/content#table-listing-view) make sure this attribute is toggled to Yes.\n\n**Tool tip and description**\n\n![Tool tip and description attribute.](../../../.gitbook/assets/field-tool-tip-description.png)\n\nThe Tool tip and Description attributes are used to direct your content editors when they're entering content. For example, if you have a text area and you want to limit its content to 3 sentences you can instruct your content editors to limit the content to 3 sentences.\n\n### Step 4: Field Creation\n\n![Add Field button](../../../.gitbook/assets/add-field-button.png)\n\nOnce you're finished filling out the attributes click the green + ADD FIELD button to add the field to your content model.\n\nRepeat this process to add more fields to your content models.\n\n## Conclusion\n\nOnce you've completed this process with all of your content models hop on over to the Content section to enter your content.\n\nIf you need to create more content models and add more fields in the future simply navigate back to the Schema tab and create more content models and add fields.\n","category":"guides","service":"instances"},{"name":"Content Entry, Drafts, and Publishing","url":"/instances/guides/how-tos/content-entry-drafts-and-publishing","objectId":"-LwpLhVR91eDEl4EpzXd","item":[],"content":"---\ndescription: Learn the basics of navigating content entry and publishing.\n---\n\n# Content Entry, Drafts, and Publishing\n\n## Introduction\n\nOnce you're finished [building your schema](building-the-schema-and-selecting-fields.md) it's time to enter your content. Throughout this guide you'll learn that basics of content entry for single pages, multi-page sets, and headless sets, publishing your content, and more.\n\n## Identifying Content Model Types\n\nThe left-hand sidebar of the Content section lists all of your content models. Each content model type is identified by its icon.\n\n### Single Pages\n\nSingle page are denoted by a page icon.\n\n![Content sidebar and single page icon.](../../../.gitbook/assets/01-content-sidebar-single-page-icon.png)\n\n### Multi-Page Sets\n\nMulti-page sets are denoted by a list icon.\n\n![Content sidebar and multi-page icon.](../../../.gitbook/assets/01-content-sidebar-multi-page-icon.png)\n\n### Headless Sets\n\nHeadless sets are denoted by a database icon.\n\n![Content sidebar and headless-set icon.](../../../.gitbook/assets/01-content-sidebar-headless-set-icon.png)\n\n## Entering and Editing Content\n\n### Single Page\n\n1. Determine which single-page content model you want to edit and click on it to select it.&#x20;\n\nWhen a single-page content model is selected from the left-hand sidebar navigation, the main portion of the screen shows that page's content (outlined in purple below) and allows you to edit it.\n\n![Single-page content editing view with editable fields outlined in purple.](<../../../.gitbook/assets/03-single-page-editing-view (1).png>)\n\n1. Determine which piece(s) of content you want to update. Pieces of content are identified by their [field labels](https://zesty.org/services/manager-ui/schema/adding-fields#label-v-reference-name) which were assigned in the Schema section. Field Labels are located above each field.\n\n![](../../../.gitbook/assets/field-labels.png)\n\n1. Edit/add content according to the field type. Then click the green Save New Version button in the upper right-hand corner of the item editing view.\n\n![Save your changes with the green Save New Version button.](../../../.gitbook/assets/single-page-editing-view-save-button.png)\n\n### Multi-page and Headless sets\n\nMulti-page and headless sets have the same flow when it comes to editing and adding new content.\n\nFollow the steps below to **create a new multi-page or headless set item**.&#x20;\n\n1. Determine which multi-page or headless set that you want to add a new entry for and click on it to select it.&#x20;\n\n{% hint style=\"info\" %}\nParented multi-page and headless sets will be nested under their respective parent.\n\nUnparented multi-page sets will appear in the left-hand sidebar navigation under the Content section.\n\nUnparented headless sets will appear in the left-hand sidebar navigation under the Headless Content Models section.\n{% endhint %}\n\nWhen a multi-page or headless set is selected from the left-hand sidebar nav, the main portion of the screen shows that set's table-listing view. If there are already entries in the table-listing view they will be listed in the main portion of the screen, if not the main portion of the screen will look similar to the image below.\n\n![Multi-page or headless set table-listing view without item entries.](../../../.gitbook/assets/01-table-listing-view.png)\n\n1. Locate the table-listing view menu and click the blue button (outlined in purple below) to add a new entry. The blue button will have a plus sign and your set's name; for example: + my blog articles.\n\n![Table-listing view menu with new-item button outlined in purple.](../../../.gitbook/assets/02-table-listing-view-menu.png)\n\n1. Enter your content in the fields and click the green Create New Item button. As soon as you click the Create New Item button your item will be created. &#x20;\n\n![Multi-page and headless set new item creation view.](../../../.gitbook/assets/04-table-listing-new-item-creation.png)\n\nFollow the steps below to **edit an existing multi-page or headless item**.\n\n1. Determine which multi-page or headless set has the item that you want to edit and click on it to select it. The set's table-listing view will show all of the set's items.&#x20;\n\n![Table-listing view with a set's items.](../../../.gitbook/assets/table-listing-view-with-entries.png)\n\n1. Identify the item that you want to edit and click on it to select it. When the item is selected the item's editing view will show in the main portion of the screen (outlined in purple).&#x20;\n\n![Item editing view.](../../../.gitbook/assets/multi-page-headless-set-editing-item-editing-view.png)\n\n{% hint style=\"info\" %}\nWhether you're editing a single-page item, multi-page set item, or headless set item the item editing views will look the same.\n{% endhint %}\n\n1. Determine which piece(s) of content you want to update. Pieces of content are identified by their [field labels](https://zesty.org/services/manager-ui/schema/adding-fields#label-v-reference-name) which were assigned in the Schema section. Field Labels are located above each field.\n2. Once you're finished editing click the green Save New Version button.\n\n![Click the green Save New Version button to save your changes.](../../../.gitbook/assets/multi-page-headless-set-edit-save.png)\n\n### Globals\n\nGlobals is a special headless set that is built-in to every Zesty.io instance and it's used for an instance's global pieces of content such as logo, instance name, general contact information, hours of operation, and anything else a user wants to keep there.\n\nThis headless set does **not** have a table-listing view and does **not** allow for multiple entries. However, users can add fields to it via the Schema section. When Globals are selected in the left-hand sidebar navigation the editing view looks exactly like the other content editing views.\n\n![Editing Globals screen. Globals do not have a table-listing view. ](../../../.gitbook/assets/00-special-headless-set-globals.png)\n\n\n\n## Drafts and Publishing\n\nEvery time an edit is saved, a new draft or version is created. Drafts are created in numerical order. The current draft number is indicated in the dropdown next to the blue publish button. Once you save changes a link will be available to preview you changes. You'll also be able to preview your changes.\n\n![Arrows left to right: preview link, draft number, and publish button.](../../../.gitbook/assets/preview-link-draft-number-publish-button.png)\n\n{% hint style=\"info\" %}\nNote: Preview links are only available for items with URLs. Content models that have URLs are single page models and multi-page models.\n\nIf your item(s) has not been coded in the Editor section your preview might show a blank page.\n{% endhint %}\n\n### Conclusion\n\nRepeat these processes as many times as needed to finish entering your content. Once you've finished entering content we'll hop over to the Editor section and start coding.\n","category":"guides","service":"instances"},{"name":"Controlling and use of og:image","url":"/instances/guides/how-tos/how-to-control-and-use-og-image","objectId":"-Lb5WVuuDgvYHnLC-_Td","item":[],"content":"# Controlling and use of og:image\n\nWhen users share your content to a social network using the [Open Graph protocol](http://ogp.me/), e.g. Facebook, you can control the content that network will associate with the shared url.\n\nOne really nice attribute to control is `og:image`. Zesty will automatically detect the first entry in a page, pageset, or dataset with a field containing the word \"image\" and use it as the `content` value of `og:image`.\n\nA common practice is to create a `social_share_image` field that will be used for social networks.\n\nFacebook caches shared urls so if your adding this to pre-existing content you may need to use their [Debugging Tool](https://developers.facebook.com/tools/debug/) to update it.\n","category":"guides","service":"instances"},{"name":"Creating a Customizable JSON Endpoint For Content","url":"/instances/guides/how-tos/how-to-create-a-customizable-json-endpoint-for-content","objectId":"-Lb5XoqYDg0ELCfMDtI_","item":[],"content":"# Creating a Customizable JSON Endpoint For Content\n\nZesty.io's custom API JSON endpoints will save your app developers a lot of time by making requesting dynamic data on your frontend quick and easy. Learn more about the Zesty.io [headless CMS offering here](https://www.zesty.io/en-us/cms/headless-cms-websites-with-decoupled-architecture/).\n\n### Implementing Custom Endpoints\n\nBefore jumping into the steps below we recommend installing a [JSON viewer extension](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc) for Chrome for effortless viewing and simple debugging JSON.\n\n1. Navigate to the [Web IDE](https://zesty.org/services/manager-ui/editor) section, locate the blue \"create file\" button at the top of the left-hand navigation, and click it.&#x20;\n2. Select Custom File Type from the dropdown.\n3. Name your file. The name of this file will be used to reference your custom endpoint. For example if the file is named `/test-data` the endpoint is referenced at `https://www.example.com/test-data.json`The preview URL can also be used in place of your live domain. **Note:** _always consume the production URL when accessing endpoints. Preview.zesty.io URLs not only show unpublished data but also are not cached._\n4. Copy this code example below, and paste it into your new file&#x20;\n\n{% hint style=\"warning\" %}\nNote: Don't forget to add the leading slash in your file name as the file name gets concatenated to your instance's url.\n{% endhint %}\n\n{% embed url=\"https://gist.github.com/ardeay/1b8a4ccffd5bf1b8035df23e3eccb460\" %}\n\n5\\. Replace content references in the copied code above with actual [content models](https://zesty.org/services/manager-ui/schema/content-models) in your Zesty.io instance. You have full access to [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley) code in this view.&#x20;\n\n6\\. Edit content references as necessary to form proper JSON. We provide [`.escapeForJS()`](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#escapeforjs) for WYSIWYG content. To create comma separated lists in an each loop implement calls like `{{if {tag._length} != {tab._num} }},{{end-if}}`.\n\n7\\. Setup optional get parameters like `start` and `limit` to make custom pagination calls `https://www.yourdomain.com/test-data.json?start=0&limit=5`\n\n{% embed url=\"https://gist.github.com/ardeay/cdcfed6dd2c1ddb672ded64b2478ece5\" %}\n","category":"guides","service":"instances"},{"name":"Creating a feed","url":"/instances/guides/how-tos/creating-a-feed","objectId":"-M6qdgGgFCBEO5u1ri-y","item":[],"content":"---\ndescription: Use our built-in options or use a custom endpoint to create a feed.\n---\n\n# Creating a feed\n\n## Overview\n\nThere are two types of feeds: a built-in feed and a custom feed. The built-in feed is automatically created based on a content model's [Reference Name](https://zesty.org/glossary#parsley-reference-name). Custom feeds are built by a developer in Zesty.io's Editor section. Learn more about the built-in and custom feeds below.\n\n## Built-in Feed\n\nThe built-in feed is automatically created using a content model with the reference name `article`, `articles`, or `blog_article`. To view the built-in feed navigate to your domain slash (/) feed.xml - for example: `example.com/feed.xml`.\n\nThe built-in feed.xml file cannot be modified. If you want a custom feed then you'll need to create a custom endpoint in the Editor.\n\nIn the Settings section -> Instance Settings category -> SEO there is a field for overriding the default content models that's used for the feed.xml file. To use this override field locate the ZUID of the content model that you want to create a feed for; copy and paste the ZUID in that override field and save.\n\n## Custom Feed\n\nCustom feeds can be made by creating a custom endpoint in the [Editor section](https://zesty.org/services/manager-ui/editor). Navigate to the Editor section and create a new endpoint called, for example: `/feed/my-feed.xml` . In this file, use a Parsley [each loop](https://zesty.org/services/web-engine/introduction-to-parsley/each-loop-deep-dive#each-loop-basics) to loop through the items that you want in your feed. Note: be sure that your XML syntax is correct by previewing your new endpoint before sending it live. Once you're ready to send it live, publish it.\n","category":"guides","service":"instances"},{"name":"Creating a Lead Form","url":"/instances/guides/how-tos/how-to-create-a-lead-form","objectId":"-LbPSshfcUydTPcPWGBM","item":[],"content":"---\ndescription: >-\n  This guide walks through creating a lead capture form which will store the\n  data entered in the form to Zesty and send an email to the website marketing\n  manager.\n---\n\n# Creating a Lead Form\n\nThis guide walks through creating a lead capture form which will store the data entered in the form to Zesty and send an email to the website marketing manager.\n\n### Zesty.io Lead Form\n\nStart by creating a standard [HTML form](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form). Note the two hidden fields at the top of the form; `zcf` and `zlf`.\n\nPlease note: input names that are prepended with and underscore will not be emailed, however they will be captured in the Leads section. Example: `<input name=\"_sendcopy\">`\n\n{% embed url=\"https://gist.github.com/shrunyan/effa3ba9df5fe08b8543\" %}\n\n[Parsley](http://developer.zesty.io/parsley-templating/) is used to reference the `{{ page.title }}` this way we uniquely name the form and can identify it in the leads table.\n\n#### ZCF: Zesty Contact Form\n\nThe `zcf` input instructs Zesty.io to send an email to the recipient configured in _Settings_ > _Instance Settings_ > _Contact Form_ as shown in the picture below. A common use case for this would be having a contact form that is submitted to your company email, the recipient.\n\n![General contact form settings are accessible in the Settings section.](../../../.gitbook/assets/settings-instance-settings-contact-form.png)\n\n#### Email Override: Setting a specific form to notify a different email than the one in settings.\n\nTo override the email a form submission sends two a hidden input field in the form html with the name \"email\\_override\" and the value of the email you want to set.\n\n`input type=\"hidden\" name=\"email_override\" value=\"name@domain.com\"`\n\n#### ZLF: Zesty Leads Form\n\nThe `zlf` input instructs Zesty to record the form submission. Then you can view your leads from the _Lead_ section inside the content manager. The Leads section will not be visible until you have captured a lead submission. The value provided in the input is simply for organizing and identifying your forms.\n\nThis feature is a great alternative to a full CRM solution when you first get started capturing web generated leads.\n\n![The Leads section is only available once leads have been captured.](../../../.gitbook/assets/leads-section-01.png)\n\nAs more people fill out the form this table will grow. By default `email`, `first_name`, and `last_name` input names will be displayed. Every other field will be stored and shown to you on the individual lead view.\n\n![](../../../.gitbook/assets/leads-section.png)\n\n### Salesforce: Web to Lead\n\nA quick way to begin capturing leads in Salesforce is with their [Web-to-lead](https://help.salesforce.com/HTViewHelpDoc?id=customize\\_leadcapture.htm) feature. You will need to alter your web forms so the input names match the Salesforce field names. This is how Salesforce is able to match up the form input data.\n\nWhen using Salesforce Web-to-lead you will be posting directly to a Salesforce endpoint; `https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8`. This means you will by pass Zesty's lead capture feature. One way to send a lead to both Salesforce and Zesty is by using AJAX upon the form submit to post the data to another endpoint.\n\nSalesforce requires to hidden inputs.\n\n`<input type=hidden name=\"oid\" value=\"XXXXXXXXXXX\">` `<input type=hidden name=\"retURL\" value=\"https://zesty.io/example/thank-you/\">`\n\n* `oid`: Organization id, which is specific to your Salesforce account.&#x20;\n* `retURL`: As the name implies a url which the user submitting the form will be redirected to after submission.&#x20;\n","category":"guides","service":"instances"},{"name":"Creating and Adding a Team","url":"/instances/guides/how-tos/adding-a-team","objectId":"-LvvzfRAP8TRG3cVIKI2","item":[],"content":"---\ndescription: >-\n  Teams can help break up your users into easily manageable groups with a single\n  role.  Create teams for marketers, developers, contractors, and more.  Learn\n  how to add a team to your instance\n---\n\n# Creating and Adding a Team\n\n## Create a Team\n\nFollow these steps to add a team to your instance.\n\n1. Login to Zesty.io and click on the Teams icon in the accounts navigation bar. &#x20;\n\n![](../../../.gitbook/assets/Teams-01-accounts-nav-bar.png)\n\n1. Fill out the Teams form with a team name and description, and click the green **+ Create Team** button.  &#x20;\n\n![](../../../.gitbook/assets/Teams-02-create-a-team.png)\n\n1. Add Team members by entering in the email addresses of your teammates in the text box and click the gray **+ Invite** button to invite them to your team. &#x20;\n\n![](../../../.gitbook/assets/Teams-03-add-members.png)\n\n{% hint style=\"warning\" %}\nIf an invited user is not yet a Zesty.io user, they will need to create an account before they can accept your Team invite.\n{% endhint %}\n\nCongratulations! You created your first team. Now let's add it to your instance.\n\n## Add a Team to Your Instance\n\n1. Navigate to you Teams via the link in the accounts navigation bar. &#x20;\n\n![](../../../.gitbook/assets/Teams-01-accounts-nav-bar.png)\n\n1. Copy your team's ID by click the clipboard icon.  &#x20;\n\n![](../../../.gitbook/assets/Teams-02-copy-team-id.png)\n\n1. Navigate back to your instances by click Instances the accounts navigation bar.                                                           &#x20;\n\n![](../../../.gitbook/assets/Teams-03-navigate-to-instances.png)\n\n1. Locate the instance that you want to add your team to and click the settings cog icon to access your instance's settings. &#x20;\n\n![](../../../.gitbook/assets/Teams-04-instance-settings-cog.png)\n\n1. Scroll down in the instance's settings drawer until you see the Team Access section. Paste your team's ID text box with (Mac: CMD+v  PC: CTRL+v), select your team's [role](../../../introduction/guides/getting-started/roles-and-permissions.md), and then click the gray **Add Team** button.                                &#x20;\n\n![](../../../.gitbook/assets/Teams-05-team-access.png)\n\n{% hint style=\"warning\" %}\nIf a Team's member already has access to your instance via an individual invite and has a different role set than the Team's role then that member's individual role will override their Team role.\n{% endhint %}\n\nCongratulations! You just added your team to your instance.\n\n## Accepting an Invite to a Team\n\nIn order to accept an invite to a team, navigate to the Teams interface, and click the blue Accept Invite button. &#x20;\n\n![](../../../.gitbook/assets/teams-interface.png)\n","category":"guides","service":"instances"},{"name":"Create a Downloadable Image or Zip File","url":"/instances/guides/how-tos/create-a-downloadable-image-or-zip-file","objectId":"mpVlBHLJTEU7sqZffOS5","item":[],"content":"---\ndescription: >-\n  This guide will walk through how to create a downloadable image or zip file\n  utilizing a DAM stored media item.\n---\n\n# Create a Downloadable Image or Zip File\n\nThis tutorial will guide you through accessing media items stored in Content Items. As well as steps to creating a downloadable anchor tag for an image or zip. Throughout this guide, we will be using one Content Item that serves as our reference for all of our code samples.\n\n{% hint style=\"info\" %}\n**What you'll learn in this guide:**\n\n* Accessing your content item's media fields\n* How to use Parsley to call your media items URL\n* Query parameters used to allow for downloading content\n* Anchor tags 'download' attribute\n{% endhint %}\n\n### Where to upload my media items?\n\nTo add media assets into your Content Items, you will first need to add the desired assets to the DAM. This can be done by navigating to the Media App in the Zesty CMS platform. Once inside you can select the grouping you would like the asset added to or create a new subgroup.&#x20;\n\nAfter selecting the location, simply click the upload button to add the image or zip file.\n\n![Media App and DAM upload](../../../.gitbook/assets/DAM\\_upload.png)\n\n### Adding media assets to your content items\n\nOnce the media items have been uploaded into the DAM, they can be selected in any Content Item that has a media field. In the image below you can see we have a Content Item that has 2 media fields named: _**file**_ and _**download image**_.\n\nIn the file field, we have selected the zip file and the image field contains our selected image. To add media items, click the plus button in the media field and a DAM screen will display allowing you to select the media asset.\n\n&#x20;We will be using the fields' reference names to access their content in the Code App. These are the names that appear after the colon in the highlighted selections within the image. When fields are initially created, Zesty allows users to create their own field reference names for ease of recognition.\n\n![Content Item with loaded zip file and image media items](../../../.gitbook/assets/image\\_zip.png)\n\n### Creating a downloadable zip file\n\nNow that our zip file has been added to our Content Item, we can create the anchor tag in the Code App. First, we will navigate to our Content Model associated view file in the Code App.&#x20;\n\nOnce there we can utilize the Parsley keyword `this` to access our fields by their reference names using dot notation. For example, the following will output the content from our Title field:&#x20;\n\n```html\n/* we encompass our entire call in double curly brackets to initialize\nParsley. The keyword 'this' points to the view associated content model and\nwe connect it to the desired field reference name */\n\n<h1>{{this.title}}</h1>\n```\n\nUsing the above dot notation style syntax we can create our download anchor tag. To do so, we will need to use the Parsley `getMediaURL()` call. This call returns the original media DAM URL to the file.&#x20;\n\n#### 'download' query parameter\n\nIn addition to the `getMediaURL()` call, we will need to add a 'download' query parameter to the media item URL. This can be achieved within the `href` of the anchor tag. Below illustrates how to achieve this using our example _**file**_ field:\n\n<pre class=\"language-html\"><code class=\"lang-html\"><strong>/* the following anchor tag demonstrates the necessary syntax */\n</strong>&#x3C;a href=\"{{this.file.getMediaURL()}}?download=true\" download>Zip file&#x3C;/a>\n\n/* the resulting output */\n&#x3C;a href=\"https://123abc.media.zestyio.com/myfile.zip?download=true\" download>Zip file&#x3C;/a>\n</code></pre>\n\n### Creating a downloadable image file\n\nAs before, we add our image to the Content Item by selecting it in our _**download\\_image**_ field. Once selected, we will navigate to our Content Model associated view file in the Code App.&#x20;\n\nUsing the Parsley `getMediaURL()` call on an image will return the original file without the default optimization provided by Zesty. Additional query parameters are needed to complete the syntax. These will be added to the `href` as well.\n\n#### 'download' & 'raw' query parameters\n\nTwo query parameters are needed to create a downloadable image. In addition to 'download', you will also need 'raw' to allow for downloading the raw unoptimized image file. Below illustrates how to achieve this using our example _**download\\_image**_ field:\n\n```html\n/* the following anchor tag demonstrates the necessary syntax */\n<a href=\"{{this.file.getMediaURL()}}?download=true&raw=true\" download>Image</a>\n\n/* the resulting output */\n<a href=\"https://123abc.media.zestyio.com/myimage.jpg?download=true&raw=true\" download>Image</a>\n```\n\n### Anchor Tag 'download' Attribute\n\nIn the above code samples, you can see that a `download` attribute has been added to the anchor tags after the `href`. It specifies that the target provided by the `href` attribute will be downloaded when a user clicks on the hyperlink. This is necessary for each downloadable link created.&#x20;\n\nThe `download` attribute can also be provided an optional value, which will be the new file name after the item is downloaded. For example, we would like our image to download with the file name _'fan-art.jpg'._ To do so, we would use the following syntax:\n\n```html\n/* the following anchor tag demonstrates the download attribute\nwith an optional file name value */\n<a href=\"{{this.file.getMediaURL()}}?download=true&raw=true\" download=\"fan-art.jpg\">Image</a>\n```\n","category":"guides","service":"instances"},{"name":"Editor and Coding Basics","url":"/instances/guides/how-tos/editor-and-coding-basics","objectId":"-M37hmqkleNaaEP9F3FO","item":[],"content":"---\ndescription: >-\n  After Schema and Content, the last step is hopping over to the Editor to code.\n  Learn the coding basics to get started.\n---\n\n# Editor and Coding Basics\n\n### Overview\n\nAfter you've built your schema and entered your content, the last step is to navigate to the Editor section and code it in. The process of coding involves Zesty.io's proprietary templating language [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley), [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML), [style sheet](https://en.wikipedia.org/wiki/Style\\_sheet\\_\\(web\\_development\\)) language(s), and [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript). Parsley is used to dynamically populated pieces of content by defining a scope, and then selecting a field from that scope; HTML provides the structure, and JavaScript allows for a more dynamic experience.&#x20;\n\nBelow we'll give you a brief guide of the Editor section, including a brief Parsley overview. If you're not comfortable with HTML and Javascript there are plenty of educational resources online for users at every level.&#x20;\n\n### A Quick Guide to the Editor Section\n\nA link to the Editor section can be found in the header navigation. The header navigation is found at the top of the content manager.\n\n![Editor section in the header navigation.](../../../.gitbook/assets/navigate-to-editor.png)\n\nOnce the Editor section opens, select a file from one of the left-hand navigation's 3 sections: Views, Style Sheets, and Scripts,  and edit the code in the main portion of the screen. The drawer below the main portion of the screen is the utility drawer which contains snippets of Parsley, meta tags, publishing history, and more.\n\n![Editor section homescreen.](../../../.gitbook/assets/Editor-home-screen.png)\n\n#### Views\n\nThe views are organized alphabetically except of the endpoints that begin with a forward slash  `/` which will appear at the top of the list. Select a file by clicking on it and the code will show in the main portion of the screen.\n\n![Views is the first section of the left-hand navigation.](../../../.gitbook/assets/views-sidebar.png)\n\n**General tour**\n\nOnce a file is selected a tab will show below the header nav with that file's name and the code shows in the main portion of the screen.\n\n![Currently open files will show in tabs just below the main header navigation.](../../../.gitbook/assets/views-opened-files.png)\n\nThe name of the file that you're in shows at the top of the code editing portion (main portion) of the screen.\n\n![File names are shown at the top of the code editing portion of the screen.](../../../.gitbook/assets/file-names.png)\n\n**Adding files**\n\nAdd a new snippet, endpoint, or HTML Ajax file by clicking the `+` symbol in the Views header.\n\n![Click the plus symbol to add a new file.](../../../.gitbook/assets/editor-add-new-file.png)\n\n1\\. Click the `+` symbol.&#x20;\n\n2\\. Select an option: Snippet, HTML Ajax, or Endpoint.&#x20;\n\n3\\. A modal will open so you can name your new file.\n\n![Modal for new View file.](../../../.gitbook/assets/new-view-file.png)\n\nIf you choose an Endpoint make sure to start the name with a forward slash and include a file extension such as `.txt` or `.json`.\n\n4\\. Click the green Create button to create you new view.\n\n**Editing files**\n\nClick in the code editing portion of the screen to edit the code.&#x20;\n\n![Click into the main portion of the screen where the code is displayed to edit it.](../../../.gitbook/assets/coding-portion-of-the-screen.png)\n\n**Saving changes**\n\nUse CMD+s or CTRL+s to save your changes; additionally there is a save button that turns green once changes are made to a file.\n\n![The green save button highlights itself once a change has been made.](../../../.gitbook/assets/editor-save-button.png)\n\n**Publish file(s)**\n\nOnce a file has been changed there are several publishing workflows to consider:&#x20;\n\n* Once a file has been edited and saved. An icon will show next to its name in the left-hand navigation. Click the icon to publish it.&#x20;\n\n![Publish icon in the left-hand navigation.](../../../.gitbook/assets/pub-by-clicking-icon.png)\n\n* Click the Review and Publish button which is next to the green Save button.&#x20;\n\n![Click the Review and Publish button to review a diff of your changes before you publish.](<../../../.gitbook/assets/Screen Shot 2020-03-23 at 5.54.19 PM.png>)\n\nOnce you have reviewed your changes click the green Publish to Live Web Engine button to publish your changes.\n\n![Review and publish diff between current and dev versions.](../../../.gitbook/assets/editor-review-and-pub-diff.png)\n\n* Click the green Publish All button which is shown above the Review and Publish button.&#x20;\n\n{% hint style=\"danger\" %}\nUse the Publish All button with caution. This button will publish _all_ of your changes. For example, if multiple changes have been made and saved across a number of files like style sheets, script, and views clicking Publish All will send all of those files live.&#x20;\n{% endhint %}\n\n![The green Publish All button will publish all of the changes that have been made to any file.](../../../.gitbook/assets/editor-publish-all-button.png)\n\n{% hint style=\"info\" %}\nStylesheets and Scripts have the same editing, saving & publishing, and new file workflows as the Views thus the Style Sheet and Scripts descriptions will not contain images for viewing/editing/publishing/adding those files.\n{% endhint %}\n\n#### Stylesheets\n\nThe Stylesheets section is below the Views section in the left-hand sidebar and supports CSS, SCSS, and LESS files.&#x20;\n\n![Stylesheets are located below the Views.](../../../.gitbook/assets/stylessheets.png)\n\n**Reordering style files**\n\n1\\. Click the stacked up and down arrows to rearrange the order of your files.&#x20;\n\n![](../../../.gitbook/assets/stylesheet-reordering.png)\n\n2\\. Use the arrows to drag filed and rearrange them.\n\n![Use the arrows drag your files into a different order.](../../../.gitbook/assets/drag-arrows-to-rearrange.png)\n\n3\\. Click the orange button with disc icon to save the order of your files.\n\n![Orange save button with disc icon.](../../../.gitbook/assets/orange-save-button.png)\n\n{% hint style=\"info\" %}\nScript files are reordered in the same way as stylesheet files thus the Scripts section below does not contain images and instructions on how reorder files.\n{% endhint %}\n\n#### Scripts\n\nThe Scripts section is located below the Stylesheets section in the left-hand sidebar and supports JavaScript files.\n\nIn addition to manually coding and copying and pasting in code users can also use a JavaScript link to a CDN to add scripts. When adding a new script, select the JavaScript Link option to add a link to a CDN.&#x20;\n\n### Parsley\n\nThe following list details all of Parsley's basic rules. Learn more about Parsley&#x20;\n\n**Basic Rules**\n\n* Curly brackets (single or double):\n  * on the same line will be parsed\n  * on separate lines will **not** be parsed\n  * in fields will **not** be parsed\n* Spacing\n  * Single curly brackets: no spaces between Parsley call and bracket (e.g. `{this.my_field}`)\n  * Double curly brackets: space(s) allowed between call and bracket (e.g. `{{ this.my_field }}`)\n\n#### Syntax Structure\n\n**Whitespace**\n\nWhite space does not matter within double quotes but can't be used within single quotes.\n\n**Comparisons**\n\nUse double equals `==` in `if` statements and single equals everywhere else.\n\n**Quotes**\n\nDo not use quotes in `if` statements. Only use quotes around hard coded strings and single bracket parsley variables everywhere else.\n\n**Conjunctions**\n\nUse `&&` and `||` in `if` statements, and `and` and `or` everywhere else.\n\n**Brackets**\n\nUse double curly brackets `{{ }}` to start a Parsley statement. Use single curly brackets `{ }` when making a Parsley call within a double-bracketed call.&#x20;\n\n**Comments**\n\nUse `(**` to start and `**)` to end comments that will not render in the output of the website.\n\n{% hint style=\"warning\" %}\nParsley _only_ works in Views. It does not work in Style Sheets or Scripts.\n{% endhint %}\n\n**Defining Scope**\n\nWhen we're referencing a field on a page we need to use Parsley to call that field within its proper scope using `{{ this. }}`.  `this` provides the scope and once the user types a `.` or period, Zesty.io will populate a list of available fields and calls for that content model. HTML can be wrapped around Parsley calls too; for example`<h1>{{ this.page_title }}</h1>`\n\n![After scope is defined Zesty.io lists available fields which are outlined in purple here.](https://gblobscdn.gitbook.com/assets%2F-LKUXrO8I7u5ufn3Lefn%2F-M2k55Ai1HBXqdFEtDkJ%2F-M2kbJmHTZwbSa16DWfZ%2Fcode-available-fields-in-scope.png?alt=media\\&token=13d343ce-0455-4fea-9eb3-b49c80deedfb)\n\nWhen accessing items in a multi-page set or headless set it is often necessary to use a [Parsley each loop](https://zesty.org/services/web-engine/introduction-to-parsley/each-loop-deep-dive). Each loops allow users to iterate through a multi-page and headless content model's items. When using an each loop you need to know the name of the content model that you want to loop through. A content model's name is defined by its Reference Name which was assigned when the multi-page and headless content model was created. In the each loop below the content model's Reference Name is underlined in purple.\n\n![In each loops use the content model's Reference Name to access it.](https://gblobscdn.gitbook.com/assets%2F-LKUXrO8I7u5ufn3Lefn%2F-M2k55Ai1HBXqdFEtDkJ%2F-M2kg98XfqvCCy3qlmUZ%2Fcode-each-loop-for-sets.png?alt=media\\&token=c24c514c-24ad-4e4a-8381-b56db5c00ee1)\n\n### Conclusion\n\nThese basics should help you get started coding your website. For more information on Parsley reference the [Parsley section](https://zesty.org/services/web-engine/introduction-to-parsley) of our documentation.\n","category":"guides","service":"instances"},{"name":"How Webpages are Assembled","url":"/instances/guides/how-tos/how-webpages-are-assembled","objectId":"-LbZ8qdj-LLd4aCgTc0d","item":[],"content":"---\ndescription: >-\n  In this article we review how Zesty.io uses all of the content, files, and\n  settings for a web property to generate the HTML, CSS and JavaScript for a\n  webpage.\n---\n\n# How Webpages are Assembled\n\n### Webpage Basics\n\n#### What is a webpage?\n\n(If you know all this, jump down to the next section.)\n\nGenerally speaking, a webpage is a document served over the internet made up of HTML, CSS, and JavaScript. When you enter a URL into a browser, the computer powering that URL responds with the correct webpage document, and the browser interprets all that code. Once the code has been interpreted the browser renders your web browsing experience - all you can see, hear, click, hover, tap, swipe, etc.\n\nA webpage is made up of two main sections: a head and a body. The head is all the invisible information that the browser and other internet services need to know about the page. For example, the head is where you put the information you want a search engine to show when your page comes up as a result, or what image and copy you want social networks to show when someone shares a link to this page. The head also can contain references to files (e.g. style sheets or JavaScript) the browser needs to correctly render the page. The body is all the content and structure you can see in the browser including the header and footer, the big hero image, the page content, the social icons, and more.\n\n### Zesty.io Webpage Assembly\n\nHow Zesty.io renders a page can be unclear by simply looking at the interface. So, how does Zesty.io take the content, code, and settings from all over the interface and compile that into a document for the browser? We'll break everything into its parts and look at example code to determine where each piece comes from.\n\n#### Part 1: Responding to the URL\n\nWhen a valid request is made to a domain hosted by Zesty.io first we check to see if it matches the settings for that domain. Does `http` need to redirect to `https`? Does the root domain need to redirect to `www.`? Then we check the path. Does `/blog/example-article/` have an entry in this Zesty.io account or does it redirect to `/news/example-article/`, or is it a 404? Once we arrive at the correct path and it is a real page on that Zesty.io site, the webpage begins compiling.\n\n#### Part 2: Creating the Files\n\nZesty.io takes all of the editable style sheets including LESS, SCSS, and raw CSS, runs them through a compiler if necessary, minifies them and provides the browser with a single, clean `site.css` file. It does the same thing with editable Javascript files for a `site.js` file.\n\n#### Part 3: Compiling the Head\n\nThe head is built based on the meta information of the page and the site-wide settings.\n\nHere is a simplified `<head>` element featuring dynamic elements called out with content in curly brackets and where to edit in parentheses:\n\n```\n<head>\n  <title>{Page Meta Title}(page settings) | {Site Title}(content clippings, can be removed in Site Settings)</title>\n  <meta {default settings}(cannot be edited)>\n  <meta {favicon and apple touch icon meta}(Doctype/Favicon/Metatags)>\n  <meta name=\"description\" content=\"{Page Meta Description}(page settings)\" >\n  <meta {custom meta tags}(Doctype/Favicon/Metatags)>\n  <meta {social share meta}(page settings)>\n  <link {linked css files}(Editor)>\n  <link href=\"/site.css?v={version number}(autogenerated)\" >\n  <script {linked javascript files}(Editor)></script>\n  <script href=\"/site.js?v={version number}(autogenerated, can be removed in Site Settings)\" ></script>\n</head>\n<body>....\n```\n\n#### Part 4: Compiling the Body\n\nWhen Zesty.io renders a webpage, within the `<body>` tag, it references the `loader` file. The two exceptions are Ajax URLs and 404 pages; they are loaded directly, as is. Within the Loader file there is a `{{ current_view }}` Parsley call. The `current_view` call, dynamically references the specific template for the webpage that's being rendered. For example, loading the homepage would use the `homepage` template file where the `loader` calls `current_view`. This allows for site-wide template features to be used, like a header, footer and using site-wide scripts like tracking pixels.\n\nHere is an example loader file:\n\n```\n{{ include header }}\n{{current_view}}\n{{ include footer }}\n<script src=\"sitewidewidget.com/plugin.js\"></script>\n```\n\nThis is also where all the Parsley calls are replaced with the content they reference from the database. For example:\n\n```\n<h1>{{ page.title }}</h1>\n<ul>\n{{ each list_of_colors as color }}\n<li>{{ color.name }}</li>\n{{ end-each }}\n</ul>\n```\n\nbecomes:\n\n```\n<h1>Hello World</h1>\n<ul>\n<li>Blue</li>\n<li>Yellow</li>\n<li>Red</li>\n</ul>\n```\n\n#### Part 5: Put it all together\n\nNow that each of the individual pieces have been created and dynamic elements have been composed, the document is packaged and served to the browser.\n\n#### A note on caching.\n\nFor Zesty.io websites with full caching enabled, this whole process does not happen every time your site is visited. It happens once, and is provided to our global content delivery network (CDN) as a static file, and isn't compiled again until there is an a publish event on the instance or 24 hours pass from when it was first cached.\n","category":"guides","service":"instances"},{"name":"How do Instance or Blueprint LESS Variables Work","url":"/instances/guides/how-tos/how-do-instance-or-blueprint-less-variables-work","objectId":"-Lb95DUdfP67tKSt1pPv","item":[],"content":"# How do Instance or Blueprint LESS Variables Work\n\nPlate-Variables describe how the LESS Variables in the CONFIG tab are constructed. It creates placeholder content about how the variables work as well as the type of variables you have access to.\n\n![image](https://wyp1jm.media.zestyio.com/screen-shot-2016-06-07-at-2-22-09-pm.png)\n\n### How Variables Work\n\nThere are a few default variables in each template (there is no limit to how many you can add). The four default variables are dropdown, color, text, and image. These variables help get you started and stay consistent when creating your site.\n\n[Github link](https://github.com/zesty-io/plate-starting-foundation/blob/master/plate-variables.xml)\n\n### Examples\n\n#### Example Dropdown Variable:\n\nDropdown are used to give the user a preset of options. This is helpful for things such as font weight and background position.\n\n{% embed url=\"https://gist.github.com/Slunk32/dfc3feba6a0a0e22eabe0d2dcfd9551a\" %}\n\n![](../../../.gitbook/assets/Less-dropdown-example.png)\n\n#### Example Color Variable:&#x20;\n\nColor variables help you keep a reference to the colors used on your site. This is helpful for keeping a consistent color palette throughout your site.&#x20;\n\n{% embed url=\"https://gist.github.com/Slunk32/27e69fdba334fd216ed3d14dc509ea54\" %}\n\n![](../../../.gitbook/assets/Less-color-example.png)\n\n#### Example Text Variable:&#x20;\n\nText variables controls the options for styling related to text. An example would be the visited color for links and setting the curvature for borders.&#x20;\n\n{% embed url=\"https://gist.github.com/Slunk32/b0320e956739d715ac68977105dccd45\" %}\n\n![](../../../.gitbook/assets/Less-nav-height.png)\n\n#### Example Image Variable:&#x20;\n\nImage variables are default images that come with the template.\n\n{% embed url=\"https://gist.github.com/Slunk32/cd5ca7de273ac1174709b0c7ee91a634\" %}\n\n#### Example Font-Picker Variable:\n\nFont-picker is used to select font styling.\n\n{% embed url=\"https://gist.github.com/Slunk32/2200b2db43a7f0dffd6e039c48c7b68b\" %}\n\n#### Example Font-Weight Variable:\n\nFont-weight specifies the weight or boldness of the font.\n\n{% embed url=\"https://gist.github.com/Slunk32/c49af8d43e6c16539dc6a174445c99dd\" %}\n","category":"guides","service":"instances"},{"name":"How to Create a one_to_many Relationship","url":"/instances/guides/how-tos/how-to-create-a-one_to_many-relationship","objectId":"-M6b7jRqKY-R1mPsBRlY","item":[],"content":"# How to Create a one\\_to\\_many Relationship\n\n## Getting Started\n\nA good way to explain one-to-many relationships is through tags. In Zesty.io blogs, tags can be used to tie related content together.\n\nTo demonstrate how to use tags, lets make a blog content model. Once the blog is created, create a new Article Tag from the content page.\n\n![contentTab](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-07-at-12-33-26-pm.png)\n\nNow in the Articles section, you can select a tag from the 'Article Tags' field.\n\n![articleTag](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-07-at-1-24-23-pm.png)\n\nThe one-to-many relationship here works in that you can have many tags to one article. This is particular useful for organizing your content, or even doing creative things like looping through the tags to create a way to filter through articles by the tags themselves. For a guide to do just that, click [here](https://zesty.org/guides/how-to-filter-by-tags)\n\n## In Parsley:\n\nWhen you create a blog in zesty, the logic behind the tags is already set up. Lets take a look at how tags are connected to articles in Parsley:\n\n{% embed url=\"https://gist.github.com/Slunk32/4ea1c2033455c3dce273d383da5ada64\" %}\n\nThe above code creates the listing of tags in the article 'tag' page:\n\n![tags](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-07-at-5-34-30-pm.png)\n","category":"guides","service":"instances"},{"name":"How to Create one_to_one Relationships","url":"/instances/guides/how-tos/how-to-create-one_to_one-relationships","objectId":"-Lb5ipz9HMAFKzpU2Ya3","item":[],"content":"# How to Create one\\_to\\_one Relationships\n\n### Overview\n\nAn easy way to think of one-to-one relationships in Zesty.io is to think of radio buttons.\n\n![radiobuttons](http://i.stack.imgur.com/Ngv2E.png)\n\nAs opposed to something like check boxes where you can select many options for one question, with radio buttons you can only select one option for each question. One-to-one relationships in Zesty.io work exactly in this fashion. Lets take a blog for example.\n\nWhen you create a blog in Zesty.io a one-to-one relationship between an article and an author is created.\n\n{% embed url=\"https://gist.github.com/Slunk32/1b869aaa4aa485c5d9556dde9217a83f\" %}\n\n#### relationship:\n\nThis has to match the name of the data set/template set/page set. Once the name is the same, this will dynamically set the dropdown field with the name of authors.\n\n#### relationship\\_field:\n\nThis is what the field will be called inside of the content page.\n\n#### required:\n\nThis makes the field required to be submitted.\n\n#### list:\n\nThis adds the field to the table-view.\n\n## In Manager App:\n\nIn the config tab, here is what the above code creates:\n\n![configexample](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-07-at-11-43-53-am.png)\n\nNow if we were to create an author:\n\n![author](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-07-at-11-54-16-am.png)\n\nEach article will have a dropdown populated by the various authors you have saved in your dataset. Each article will have a required field of selecting one author, which is the core of the one-to-one relationship. Now whenever a new author is created, it will automatically be available in the article dropdown when selecting an author.\n\n![authorarticle](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-07-at-11-57-16-am.png)\n","category":"guides","service":"instances"},{"name":"Export Content Model to CSV","url":"/instances/guides/how-tos/export-content-model-to-csv","objectId":"-MAUBzTun3c03GC9E411","item":[],"content":"# Export Content Model to CSV\n\nYou can export a model's content items to a Comma Separated Value file by using a GET request to the  cloud function  `contentToolsModeltoCSV` or by writing your own NodeJS script.\n\n{% swagger baseUrl=\"https://us-central1-zesty-prod.cloudfunctions.net/contentToolsModeltoCSV\" path=\"\" method=\"get\" summary=\"Content Model to CSV\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Authentication\" type=\"string\" %}\nBearer XXXXXX\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"instanceZUID\" type=\"string\" %}\n8-XXX-XXXXX\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"modelZUID\" type=\"string\" %}\n6-XXX-XXXXX\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"A CSV output\" %}\n```\na comma seperated value string    \n```\n{% endswagger-response %}\n{% endswagger %}\n\n### Write your Own CSV Export\n\nIf you are looking for a more custom export, here is the the node code to export a [Content Model ](../../ui/schema/content-models.md)to a CSV using the [Node SDK](../../../tools/guides/node-sdk/).\n\n```javascript\nconst SDK = require(\"@zesty-io/sdk\");\n\nconst modelZUID = '6-xxx-xxxxx';\nconst instanceZUID = '8-xxx-xxxxx';  \nconst authToken = 'XXXXX';\n\nconst sdk = new SDK(instanceZUID, token);  \nlet items = await sdk.instance.getItems(modelZUID);\n\nlet header = []\nlet itemData = []\n\n// start the headers\nheader.push({id: 'zuid', title: 'zuid'})\nheader.push({id: 'url', title: 'url'})\n// create the csv headers based on the content (data) row\nfor (let [key, value] of Object.entries(items.data[0].data)) {\n  header.push({id: key, title: key});\n}\n\nitems.data.map(async item => {\n  item.data.url = item.web.path ? item.web.path : null;\n  item.data.zuid = item.meta.ZUID;\n  console.log(item.data)\n  itemData.push(item.data);\n});\n\n// take first item and convert it to a header\nconst createCsvStringifier = require('csv-writer').createObjectCsvStringifier;\nconst csvStringifier = createCsvStringifier({\n    header: header\n});\n\nlet csvstring = csvStringifier.getHeaderString()+csvStringifier.stringifyRecords(itemData);\nconsole.log(csvstring);\n```\n","category":"guides","service":"instances"},{"name":"How to Create a Search Page","url":"/instances/guides/how-tos/how-to-create-a-search-page","objectId":"-Lb97iU3_kTGrRp-ZQK1","item":[],"content":"---\ndescription: >-\n  This guide shows how to create a search results page within Zesty,\n  demonstrating with a zipcode search example.\n---\n\n# How to Create a Search Page\n\nIn this guide you will learn how to create a search form and search results on the Zesty platform. We will be creating a search form which will lookup results based on a postal code. Using AJAX we will request search results for a smooth user experience.\n\nWe will need to create 3 files;\n\n1. `zip-search-form` Zesty snippet file\n2. `zip-search-results` Zesty HTML AJAX file&#x20;\n3. `zip-search.js` Zesty JavaScript file\n\nHere is an example of what that code would look like. Read on to cover each step independently.\n\n{% embed url=\"https://gist.github.com/shrunyan/0176f2511d5376b56a9f\" %}\n\n### Events Dataset\n\nStart by structuring your data. For this example we are searching for events listed on our web property. The events dataset will be structured with a _title_, _zipcode_, & _image_ fields. Later we will be fuzzy matching user input against the _zipcode_ field. This can be expanded on with any other necessary fields, for example; _description_, _address_, _price_, etc...\n\n### Search Form\n\nIn the code editor we will create a snippet file to build the search form in. This will allow the form to be included anywhere we need. For our example we are creating a `zip-search-form` snippet and will `include` it on a page. We are not including a form tag with an action attribute because we will be controlling submitting the user input via AJAX.\n\n```\n<input id=\"search\" />    \n<ul id=\"results\"></ul>\n```\n\n\\\n&#x20;This a very simple example and can be expanded upon to fit your search purposes. As well as made more semantic with a form tag and labels for inputs.\n\n### Search Results\n\nFor the search results we are going to make a HTML AJAX file in the code editor. AJAX files are templates that we write JavaScript AJAX requests against and get an HTML response. We plan on posting the user entered search term to this file so we know the Parsley `get_var` property will be available for us to fuzzy match against.\n\nWe need to write a Parsley `each` loop to match the posted term against any dataset property that we have setup. In our example we will see if there are any event zip codes which match our search term. We could easily add a Parsley `OR` statement and match against multiple values.\n\n```\n{{each events as event WHERE event.zip_code LIKE '%{get_var.term}%'}}\n    <h1>{{event.title}}</h1>\n    <h2>{{event.zip_code}}</h2>\n{{end-each}}\n```\n\nThe `%` character acts as a wildcard mechanism in Parsley. This will allow fuzzy matching as a user refines their search term.\n\n### AJAX to Request Results\n\nLastly we need to write some JavaScript to capture the user input then request the results via AJAX. We are going to use the jQuery library to accomplish this since it provides some really nice methods to deal with AJAX requests. First we select the `#search` form and attach an event handler for the `keyup` event. So every time someone types into the form we will execute the callback function, `cb()`.\n\n`$('#search').on('keyup', function cb() {`\n\nInside `cb()` we will use the jQuery [`load`](https://api.jquery.com/load) function to fetch the search results by composing a url with our search term as a GET query.\n\n`$('#results').load('/ajax/zip-search-results.html/?term='+$(this).val());`\n\nTwo important things to note about the url;\n\n1. All HTML AJAX files can be requested at the `/ajax/YOUR-FILENAME` url path.\n2. Attaching the input value to the url makes the value available as a `get_var.term` on the fetched page.\n\n_Our file path includes a_ `.html` _file extension. This is not necessary since Zesty templates are virtualized. We are using it so we can see it and understand conceptually what it represents._\n\n### Finishing Up\n\nNow we have a search form, search results & JavaScript to fetch the results. To implement this form we can `include zip-search-form` on any Zesty page template and our searching against events dataset functionality will be available.\n","category":"guides","service":"instances"},{"name":"How to Deal With CORS","url":"/instances/guides/how-tos/how-to-deal-with-cors","objectId":"-ME9U4ytzhe2BWFPBpfo","item":[],"content":"---\ndescription: >-\n  This guide explains CORS and provides tips and strategies around debugging\n  these types of requests.\n---\n\n# How to Deal With CORS\n\n### Overview\n\nCORS can be one of the most frustrating things to debug when working with front-end code. This guide provide steps for determining if you are having a CORS issue, ways to resolve them, and how to configure CORS on your Zesty.io instance.\n\n{% hint style=\"info\" %}\nIf you are just starting to learn about CORS one of the best places to start is the [Mozilla Developer Network (MDN) documentation on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS). It is an excellent resource for all things front-end.\n{% endhint %}\n\n### What is CORS?\n\nCORS is an acronym for Cross-Origin Resource Sharing. CORS is when one domain makes an XMLHttpRequest (XHR) to another domain. This commonly occurs when using JavaScript to make an HTTP request to an API. ****&#x20;\n\n![CORS diagram](../../../.gitbook/assets/cors.png)\n\nCORS provides instructions by the requested server to the requesting client (your web browser) on what its rules are on requests from other domains which aren't itself. A basic example of CORS is as follows: When domain-A makes a request to domain-B, domain-B will send instructions back to domain-A stating whether or not domain-A is _allowed_ to make that request to domain-B. _We will refer to this example throughout this guide._\n\nThose instructions act as a security mechanism to limit _how_ data is accessed. However, it should be noted that CORS is _not_ _an absolute_ measure to prevent access to an API as it is up to the requesting client (domain-A) whether to respect the instructions returned by the requested server (domain-B). This means that things such as cURL (Client URL) can be used to bypass these instructions.\n\nThe \"instructions\" we are referring to are the HTTP headers `Access-Control-Allow-*` returned when accessing a domain's URL which has a CORS policy in place.\n\nCORS requests are known as \"complex requests\" which trigger a web browser (domain-A) to send a \"preflight\" OPTIONS request. The preflight request is an HTTP request which the browser (domain-A) makes in order to ask the requested server (domain-B) what its policy on CORS is. Based upon the response, the browser (domain-A) will then decide whether it should proceed with making the intended HTTP request. This is usually where we begin to see errors being thrown.\n\n### Debugging CORS\n\nWhile CORS policies are set by the back-end server (domain-B) there are a few things that you'll want to test on the front-end (domain-A) to ensure that your request is being sent correctly.\n\n#### Browser Extensions\n\nOne of the biggest \"gotchas\" in front-end development can be browser extensions. When installed you've given them permission to run code on the browser tabs you are viewing and  as such they have the ability to modify functionality happening on a web page. Not all extensions are good actors and can cause intentional and unintentional side effects; one of those being modifying network requests. Whenever you are debugging front-end issues we always suggest using a \"clean-room\" profile.  A \"clean-room\" profile is a browser profile without any extensions installed. This will ensure that you don't have any unexpected changes in behavior from 3rd party code locations.\n\n#### Setting Request Headers\n\nExplicitly setting the header can cause issues. These issues will be indicated by an error in the console. For example, the error below says: Request header field skip-caching is not allowed by Access-Control-Allow-Headers in preflight response.&#x20;\n\n![Access-Control-Allow-Headers failure in the Chrome console.](../../../.gitbook/assets/header-errors.png)\n\nThis means that a skip-caching header has been explicitly declared and is causing the failure. \\\nExplicitly set request headers, that are not default headers, have to be explicitly allowed by the values returned in the `Access-Control-Allow-Headers` header. If you're unsure about  what allowed headers the endpoint supports, look at the preflight Options response. The values displayed on the Access-Control-Allow-Headers determines what can be used.&#x20;\n\n#### Investigating HTTP Response Headers\n\nWhenever you need to debug front-end code your best friend will be a [browser's inspector](https://developer.mozilla.org/en-US/docs/Learn/Common\\_questions/What\\_are\\_browser\\_developer\\_tools). A browser's inspector is a browser's internal tool for examining the source code and resulting behaviors of a web page.&#x20;\n\n_Please be aware that not all browser inspectors are created equal and can have significant differences in available functionality; these differences can impact a user's ability to debug their code._\n\nMost browsers' inspectors can be accessed by right-clicking on a web page to show the context menu and selecting the \"inspect\" option.&#x20;\n\n![Opening the inspector in Chrome](<../../../.gitbook/assets/open-inspector (1).png>)\n\nThis should open the inspector which will contain multiple tabs. The two we are interested in will be the \"Console\" and \"Network\" tab.\n\n![Chrome's inspector.](../../../.gitbook/assets/open-inspector-shown.png)\n\n**Console**\n\nThe console is where we can see errors and logs from both the browser and our page's source code.&#x20;\n\n![Chrome's console](../../../.gitbook/assets/console.png)\n\nWhen a CORS error occurs you should see a console error stating what the error was.\n\n{% hint style=\"info\" %}\nSometimes when a server error occurs the browser will display it as a CORS error. When you see a CORS error in the console it is important to inspect the request in the Network tab and confirm the response headers.&#x20;\n{% endhint %}\n\nTypically the displayed error will point out the exact header which caused the CORS failure.\n\n![Example CORS error from the console.](../../../.gitbook/assets/cors-error.png)\n\n&#x20;This information is usually enough to understand what caused the failure and what is needed to allow the request to succeed. Most commonly this is a mismatch between the origin-domain (domain-A) and requested-domain (domain-B). If your response header `Access-Control-Allow-Origin` value does not match the domain you are on, then it will fail. If this is the case you will need to communicate with the back-end server owner (domain-B) to determine a solution. For example: they would need to allow the domain (domain-A) you are requesting from.\n\n{% hint style=\"info\" %}\nThe origin value of `Access-Control-Allow` is the combination of the protocol, domain, and port.&#x20;\n{% endhint %}\n\n`Access-Control-Allow-Origin` has a special value which can be set, an asterisk `*`. This is known as a wildcard which means that the back-end server (domain-B) allows requests from _any_ origin (domain-A). Public APIs need this value set in order to allow requests from any origin.\n\nIn addition to the `Access-Control-Allow-*` headers there are also [`Access-Control-Request-*`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers) headers. It's important to have a cursory understanding of the available values here to more fully understand how CORS requests are formulated. If you need more information, please refer to the CORS article linked at the top of this guide.\n\n**Network**\n\nBy using the network tab we can inspect all the network traffic to and from the domain we are on.&#x20;\n\n![Chrome's inspector tool.](../../../.gitbook/assets/network-tab.png)\n\nWhen clicking on a request, such as our HTTP [OPTIONS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS) method request, (OPTIONS is a type of [HTTP request method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) like GET, POST, etc.) we will see both the request and response headers.&#x20;\n\n_Note:_ In order to see the requests' methods you may need to right-click in the inspector and select _Method_ from the menu shown.\n\n![Select Method from the ,menu to shown to see the Method column. ](../../../.gitbook/assets/inspector-show-method.png)\n\nIn looking at the response headers of our OPTIONS request we will be able see what `Access-Control-Allow-*` were returned from our back-end server. These instructions are the instructions that the browser then follows.\n\n![Request headers in Chrome's inspector.](../../../.gitbook/assets/inspector-headers.png)\n\nIf the domain we are on is _not_ shown in the `Access-Control-Allow-Origin` value then we will not be able to make the CORS request.\n\n{% hint style=\"info\" %}\nMost browsers' network tabs allow for filtering types of requests, such as XHR, CSS, etc. When an OPTION request fails some browsers will not make the actual request which will cause it to _not_ appear in the filtered XHR list. For this reason it is important to be on the \"All\" filter to ensure you are seeing any failures which could be occurring.\n{% endhint %}\n\n#### JavaScript Fetch Settings\n\nWhen authoring code which will make a `Fetch` CORS request one setting you will want to be familiar with is [`mode`](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode). This is the setting which explicitly states what type of request you want to make. It is useful to define this to ensure consistency in how a browser makes  requests along with communicating to yourself or other, future developers what the intent and expectations of network requests are.\n\n### Solving CORS Issues\n\nThe most important thing to understand is that **CORS policies are set by the requested domain's server** (domain-B). When making a network request with JavaScript in a web browser (domain-A) if the back-end server (domain-B) does not want to serve requests across origins there is nothing you will be able to do with your JavaScript code to circumvent that. At that point you would need to work with whoever maintains the back-end (domain-B) to understand what their CORS policy is.\n\nThat being said sometimes there are things in the front-end (domain-A) JavaScript that can be setup incorrectly. Before you contact the back-end (domain-B) owners you'll want to ensure you've gone through the steps here to debug your CORS requests.\n\n#### CORS Settings on Zesty.io Instances\n\nSince your Zesty.io instance can act as an API to front-end code you have the option of controlling how CORS requests are responded to by your instance.\n\n{% hint style=\"info\" %}\n[Learn more about using your instance as an API](https://zesty.org/guides/how-to-create-a-customizable-json-endpoint-for-content)\n{% endhint %}\n\nYour instance has two types of APIs the [Instant JSON API](https://zesty.org/apis/instant-content-api) and [Custom Endpoints](https://zesty.org/services/manager-ui/editor/custom-file-types-endpoints). By [turning on the CORS setting](https://zesty.org/services/manager-ui/settings/instance-settings#developer) for these APIs in the [instance Developer settings](https://zesty.org/services/manager-ui/settings/instance-settings#developer) you will allow  requests from external domains to yours. This is how you can allow public browser access to your APIs.\n\n![Zesty.io CORS developer settings.](../../../.gitbook/assets/zesty-io-cors-settings.png)\n\n## Conclusion\n\nCORS errors can be one of the biggest points of frustration when authoring front-end code. Hopefully with this guide we have given you some helpful insights and strategies for debugging these error when they occur.\n\n**Sources**\n\n* [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n* [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)\n* [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers)\n* [https://fetch.spec.whatwg.org/#http-cors-protocol](https://fetch.spec.whatwg.org/#http-cors-protocol)\n","category":"guides","service":"instances"},{"name":"How to Filter by Tags","url":"/instances/guides/how-tos/how-to-filter-by-tags","objectId":"-Lb5hQNXihYTDkQ2O5zt","item":[],"content":"---\ndescription: Learn how to filter through your content using tags\n---\n\n# How to Filter by Tags\n\nIn this guide we will walk through the process of using tags to filter through articles.\n\nThe first step is to create a one-to-many dataset with a text-field.\n\nFrom page groups:\n\n![onetomany](https://wyp1jm.media.zestyio.com/screen-shot-2016-06-29-at-2-31-27-pm.png)\n\nFrom the data set:\n\n![tags](https://wyp1jm.media.zestyio.com/screen-shot-2016-06-29-at-12-30-55-pm1.png)\n\nResult:\n\n![articleex](https://wyp1jm.media.zestyio.com/screen-shot-2016-06-29-at-11-35-39-am.png)\n\nNow that we have our articles with tags constructed, we can start by creating buttons out of our tags. IMPORTANT: Be sure to set the value of the zid to each button as this is what will reference which tag is being called\n\n{% embed url=\"https://gist.github.com/Slunk32/c0b4ddf7568b39e61a0e8aab6ae2dfa8\" %}\n\nYou will also need to make a div for the results of your request.\n\n{% embed url=\"https://gist.github.com/Slunk32/51ce8478f6611ceae1521364a7414185\" %}\n\nNow that you have your buttons, you need to create the Ajax HTML file that will be called on each button press. AJAX files are templates that we write JavaScript AJAX requests against and get an HTML response. We plan on posting the user entered search term to this file so we know the Parsley get\\_var property will be available for us to fuzzy match against. Let's have the results of our search display the title and body of the article.\n\nLastly, we have to write the javascript to add the click event to the buttons. To do this, let's put it in script tags at the bottom of the article file.\n\n{% embed url=\"https://gist.github.com/Slunk32/7951aac722ca8f5e080cf96df88d2400\" %}\n","category":"guides","service":"instances"},{"name":"Integrations","url":"/instances/guides/how-tos/integrations","objectId":"-Lb-zQrZn4hdZ9LQOU2N","item":[],"content":"---\ndescription: Learn how to integrate third-party services and applications with Zesty.io.\n---\n\n# Integrations\n\nThere are a number of integrations that can be integrated with Zesty.io including HubSpot, Marketo, and Airtable.&#x20;\n","category":"guides","service":"instances"},{"name":"integrations","url":"/instances/guides/how-tos/integrations","item":[{"name":"HubSpot CRM Form Integration","url":"/instances/guides/how-tos/integrations/hubspot-crm-form-integration","objectId":"-Lb04Wf1b5tJzt1tf2dC","item":[],"content":"---\ndescription: >-\n  Zesty.io can integrate seamlessly with HubSpot's CRM. Draw customers into a\n  website with engaging content and capture lead information with a form that\n  then syncs with your Hubspot CRM.\n---\n\n# HubSpot CRM Form Integration\n\nZesty.io can integrate seamlessly with HubSpot's CRM. Draw customers into a website with engaging content and capture lead information with a form that then syncs with your Hubspot CRM.\n\n![HubSpot Logo](http://logonoid.com/images/hubspot-logo.png)\n\nFrom Hubspot: _“The forms API's principle method is the submit form method, which allows you to pass any information captured on your website or application to HubSpot, including any custom data. This endpoint doesn't require authentication, so you can make the call from a form to our API from the client without needing to worry about insecurity.”_\n\n## How to Submit data to a form\n\n**Prerequisite:** You must have a form pre-built in your Hubspot CRM before integrating. You can see a list of forms on your portal by going to the Contacts > Forms page.\n\n### Steps\n\n**1. Find your form’s GUID.**\n\nYou can locate this in HubSpot easily. Navigate to Contacts > Forms from the navigation menu > click to edit the form you wish to connect. When editing a specific form, you can find the Form GUID in the URL. In the URL\n\n`https://app.hubspot.com/forms/62515/78c2891f-ebdd-44c0-bd94-15c012bbbfbf/edit/`\n\nthe form GUID is 78c2891f-ebdd-44c0-bd94-15c012bbbfbf\n\n**2. Line up form fields**\n\n**Required Parameters used in the Request URL**\n\n* **Portal ID** (an alpha numeric chain, like the one we got above)\n* **Form GUID** (numerical)\n\n**Optional Parameters**\n\n* **Form Fields** _&{property key}=x_ - You can include any number of Contact Properties in the form data. Use the Key for the property. (The key for a property is contained in the \"name\" value when looking up your properties via the Contacts API)\n* **HS Context** _\\&hs\\_context=x_ - Used in the request body, A JSON formatted block that contains contextual information for the form submission. See the following entries for descriptions of the included data, and below for the format of this parameter.\n*   **HubSpot tracking cookie** _\"hutk\":x_ - Used in the hs\\_context parameter, The tracking cookie token value used for HubSpot lead activity tracking. You can retrieve this value from the \"hubspotutk\" cookie placed in the user's browser by the HubSpot JavaScript Tracking Code; the tracking code must be installed on the page that contains the form.\n\n    Please Note While the hutk value is not required for the submission to be accepted, this token is used to associate analytics data with a contact record, so without this you will not see any page views or analytics source data for the contact record.\n* **IP Address** _\"ipAddress\":x_ - Used in the hs\\_context parameter, The IP Address of the lead converting. You can retrieve this from the server request.\n* **Page URL** _\"pageUrl\":x_ - Used in the hs\\_context parameter, The URL the page is submitted on.\n* **Page Name** _\"pageName\":x_ - Used in the hs\\_context parameter, The Name or Title of the page the form is submitted on.\n* **Redirect URL** _\"redirectUrl\":x_ - Used in the hs\\_context parameter, The url to redirect the visitor to. This value must be an absolute URL that includes the protocol (http:// or https:// as the case may be). Please Note If you have a redirect URL set up for the form in the UI, it will override this option, even if no redirect URL is included in the form POST.\n\n**3. Setup URL and Post Request**\n\n_Example URL:_ [https://forms.hubspot.com/uploads/form/v2/GUID](https://forms.hubspot.com/uploads/form/v2/GUID)\n\n_Example body:_\n\n&#x20;The hs\\_context parameter should contain the following data, formatted in JSON. Please Note All parameters must be URL encoded before being passed through the API, including the hs\\_context parameter.\n\n**Example successful json response:**\n\n```\n{\n    \"hutk\": \"60c2ccdfe4892f0fa0593940b12c11aa\",\n    \"ipAddress\": \"192.168.1.12\", \n    \"pageUrl\": \"http://demo.hubapi.com/contact/\", \n    \"pageName\": \"Contact Us\", \n    \"redirectUrl\": \"http://demo.hubapi.com/thank-you/\"     \n}\n```\n\n**4. Test the Response**\n\nThe response from this API call will depend on how the call is made. If there is no \"redirectUrl\" value in the hs\\_context parameter, then the response will be as follows:\n\n* 204 when the form submissions is successful\n* 302 when the form submissions is successful and a redirect URL is included or set in the form settings.\n* 404 when the Form GUID is not found for the provided Portal ID\n* 500 when an internal server error occurs\n\nFor more details on HubSpot integrations, view their documentation [here](https://developers.hubspot.com/docs/methods/forms/submit\\_form).\n","category":"guides","service":"instances"},{"name":"Marketo: Custom Integration","url":"/instances/guides/how-tos/integrations/marketo-custom-integration","objectId":"-Lb07Q7MKUUAlleWsaaF","item":[],"content":"# Marketo: Custom Integration\n\nZesty.io can integrate seamlessly with Marketo's Rest API. Draw customers into a website with engaging content and capture lead information with a form that then syncs seamlessly with Marketo.\n\n![Marketo Logo](http://logonoid.com/images/marketo-logo.png)\n\n### Get started with Marketo’s REST API\n\nYou must have created a designated API only user before integrating with Zesty.io. For documentation, please visit [Marketo’s Quick Start Guide](http://developers.marketo.com/blog/quick-start-guide-for-marketo-rest-api/).\n\n1. A Custom service is required to uniquely identify your client application. To create a custom application, go to the Admin->LaunchPoint screen and create a new service.\n2. From the services options, choose \"Custom.\" Input an appropriate Display Name, Description. It may be best to choose a descriptive Display Name and Description such as “ZESTY.IO INTEGRATION,” for clarity. For the user email address, select the API only user previously created.\n3. After you create your custom service, click on “View Details” link on the grid.\n4. Your client application will be able to use the Client Id and Client Secret to generate an access token.\\\n   ![Marketo Example](https://wyp1jm.media.zestyio.com/marketo-example.png)\n5. Copy and paste your authentication token into a text editor for your reference. Your authentication token will look similar to the example below: cdf01657-110d-4155-99a7-f986b2ff13a0:int\n6. Now you’ll want to find the endpoint URL. All requests to the Marketo REST API will follow the format: `<REST API Endpoint URL>/rest/` To find your REST API Endpoint URL, go to Marketo Admin ->Web Services. Scroll down to REST API. Your Marketo endpoint URL structure should look similar to the example below: `http://100-AEK-913.mktorest.com/rest/v1/lead/{id}.json`\n7. Now you’ve got everything together to use your Authentication Token to Call Get Lead by Id API!\n8. The easiest way to make your request to Marketo REST API is to paste the URL into your web browser’s address bar. Follow the format below: `http://<REST API Endpoint URL for your Marketo instance>/rest/v1/<API you are calling>?<access_token>` Example `http://100-AEK-913.mktorest.com/rest/v1/lead/318581.json?access_token=cdf01657-110d-4155-99a7-f986b2ff13a0:int`\n9. If your call is successful, it will return JSON with the format below.\n\nLearn more about [Authentication with Marketo](http://developers.marketo.com/documentation/rest/authentication/)\n","category":"guides","service":"instances"},{"name":"Marketo Realtime Personalization Integration (RTP Tag)","url":"/instances/guides/how-tos/integrations/marketo-realtime-personalization-integration-rtp-tag","objectId":"-Lb06lC-CAB88sqV1_9Z","item":[],"content":"# Marketo Realtime Personalization Integration (RTP Tag)\n\nIntegrating RTP JavaScript API extends Marketo to your Zesty.io site easily. Using this script enables teams to track events and customize web pages dynamically in accordance to your Marketo campaigns with this script. You can also incorporate custom data events, display dynamic content, get visitor data, and exclude tag for specific bots.\n\n_Note: You must be a Marketo Web Personalization customer and have the RTP tag deployed on your site prior to using the JavaScript API to utilize all of the possible integrations with Marketo listed above._\n\n![Marketo Logo](http://logonoid.com/images/marketo-logo.png)\n\n### Quick Tag Setup\n\nThe RTP tag should be inserted into the page you which to personalize. You can also have it present on every page by putting it into the zesty.io `loader` file.\n\n### Account Setup\n\nThis method is called automatically on the tag level to set the relevant account id. You can set the account id when you wish to split between different domains.\n\nMethod Name: 'setAccount'\n\nParameter: accountId (passed as a string)\n\nExample: `var accountId = '561-HYG-937';` `rtp('setAccount', accountId);`\n\n### Personalizing Div Elements\n\n_Note: In Marketo, you company must be a Web Personalization account and have the RTP tag deployed on your site prior to using the Dynamic Content API._ [_Read More_](http://developers.marketo.com/documentation/websites/rtp-dynamic-content-api/)\n\nIf autoRender parameter is passed as true, then this function will automatically render the content in the designated DOM element. `var autoRender = true;` `rtp('get', 'campaign', autoRender);`\n\n`<div>` elements can be personalized by designated them with ID tags. For example you can create the div `<div id=\"my-marketo-personalization\"></div>` , in Marketo's interface you need to setup a personalized space and input the target id to `my-marketo-personalization`.\n\n### More learning\n\nFor full details on the RTP integration, visit the [Marketo documentation](http://developers.marketo.com/documentation/websites/rtp-js-api/)\n","category":"guides","service":"instances"},{"name":"Form Post to PHP with File Captured","url":"/instances/guides/how-tos/integrations/form-post-to-php-with-file-captured","objectId":"-Lb3wi6c5mvLtUuXVO7y","item":[],"content":"---\ndescription: >-\n  This document walks you through posting a form with a file payload from a\n  Zesty.io website to a remote PHP server that will capture the information,\n  store the file to a temporary directory, and return\n---\n\n# Form Post to PHP with File Captured\n\n![Zesty.io outbound webhook](https://wyp1jm.media.zestyio.com/zestyio-outbound-webhook.png)This document walks you through posting a form with a file payload from a Zesty.io website to a remote PHP server that will capture the information, store the file to a temporary directory, and return back to the Zesty.io website. This tutorial expects you to have a Zesty.io site ready to work in, and have roughly 10-20 minutes to test from start to finish.\n\n## Steps to set up a Form File Capture in Zesty.io\n\n_10-20 minute start to finish_\n\nWe have set up a simple example that leverages a free server on [Heroku](https://www.heroku.com/) which deploys a codebase from Github. It will capture a Zesty.io Form post and store information locally, then return to a website thank you page . To get started you need a [Heroku account](https://signup.heroku.com/), it is free and only take a few minutes to create.\n\n### Step 1: Deploy your PHP Heroku Server\n\nIf you already have a Heroku account, proceed to click the button below. If you do not have an account, [create one here](https://signup.heroku.com/), then click the **Depoly to Heroku** button below.\n\n[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy?template=https://github.com/zesty-io/example-form-file-post-with-return-php)\n\nThat button will open a Heroku prompt to create a new server using this PHP repository we created for this tutorial: [Example Post File Capture Project for PHP](https://github.com/zesty-io/example-form-file-post-with-return-php). When you are done with this tutorial you may fork this repository and customize it to suit your needs. In the Heroku prompt, it will ask for a config variable: your file size limit **FILE\\_SIZE\\_LIMIT**\n\nAfter clicking deploy, you will see two buttons `manage app` and `view`, click `manage app`. It will open a dashboard with six menu items. The last one is `settings`, click settings. Scroll down to the Domains section, and copy the _Heroku Domain_ provided.\n\n### Step 2: create the Form with Files in Zesty.io\n\nTake your copied Heroku domain from step 1 and prepend `https://`. The full URL should look something like this: `https://zesty-php-file-capture-test.herokuapp.com/`. This is the URL you will put in the form action parameter on the `<form>` tag.\n\n**Example form HTML Form code to put on your Zesty.io template in the Code Editor:**\n\n```\n<form enctype=\"multipart/form-data\" action=\"http://zesty-php-file-capture-test.herokuapp.com/\" method=\"POST\">\n    \n    <!-- MAX_FILE_SIZE must precede the file input field -->\n    <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"30000\" />\n    \n    <!-- RETURN_URL must precede the file input field, used after file is uploaded -->\n    <input type=\"hidden\" name=\"redirect_target\" value=\"http://www.your-website.com/thank-you/\" />\n    \n    \n    <!-- Name of input element determines name in $_FILES array -->\n    <label>Send this file: <input name=\"userfile\" type=\"file\" /></label>\n    <br>\n    <input type=\"submit\" value=\"Send File\" />\n</form>\n```\n\nSave in Zesty.io, goto the page in Zesty.io's live preview, and Submit a form. Depending on your file size and internet connection, the time may vary before the page return to the thank you call back. You can verify the file uploaded by visting your Heroku domain `https://zesty-php-file-capture-test.herokuapp.com/list.php` as that will show you files uploaded. Note, every time to redeploy the Heroku site, all files will be wiped out. From here you pass the files to your favorite storage service like AWS S3 or Dropbox.\n\n### Congratulations! Now let's dive deeper.\n\nYou just successfully connected Zesty.io to your own custom PHP server hosted on Heroku. Congratulations, you all star! Being able to network applications together allows you to maximize the benefits of each application without running into the security or update risks that occur when you customize a softwares codebase!\n\n### Modifying the PHP middleware server\n\nIf you wish to modify the codebase you deployed to Heroku, start by checking out the Github Repo example we used: [https://github.com/zesty-io/example-form-file-post-with-return-php](https://github.com/zesty-io/example-form-file-post-with-return-php) the two files you should be most interested in are `/public/index.php` in the `/public/` directory, and `/public/list.php` file in the `/public/` directory. `index.php` does all the heavy lifting of accepting the payload and saving the file to the server's `/tmp/` directory. `list.php` is there to verify your file uploads are working.\n\nYou can Fork the [https://github.com/zesty-io/example-form-file-post-with-return-php](https://github.com/zesty-io/example-form-file-post-with-return-php), hook it up to Heroku or your own server, are start making changes to connect to any service you wish.\n\nHave fun!\n","category":"guides","service":"instances"},{"name":"Stripe Checkout Integration","url":"/instances/guides/how-tos/integrations/stripe-checkout-integration","objectId":"-Lb05svhY7UQXUMrpg_y","item":[],"content":"---\ndescription: Integrate Stripe and Zesty.io to easily collect fees or donations.\n---\n\n# Stripe Checkout Integration\n\n### Get Started\n\nStripe Checkout makes collecting a fee or donation easier than ever.\n\nFirst, make sure you set up your API Keys in the Stripe Settings:\n\n![](https://forum.zesty.io/uploads/zesty/original/1X/ad7a4922eed817969a0fdfe10f7340a85be2044f.png)\n\nOnce you've set up your API keys, you can add the necessary code:\n\nYou should see a button that looks like this:\n\n![Stripe Button Example](https://wyp1jm.media.zestyio.com/stripe\\_pay\\_with\\_card\\_button.png)\n\nWhen clicked it will bring a modal that looks like this:\n\n![Stripe Checkout Modal Example](https://wyp1jm.media.zestyio.com/checkout\\_modal\\_example.png)\n\nNote: Zesty will automatically use your test Stripe API key if you are on the development preview URL (the one that looks like abcdef-dev.preview.zestyio.com).\n\nAfter the card details are submitted the user will be redirected to the URL you specify in the `success_redirect` value (if successful), or to the `failure_redirect` URL if unsuccessful.\n\n### Example #2: Variable Amount Donation Form\n\n### Example #3: Subscribe to a Recurring Stripe Plan\n\nNote that the endpoint for the form `action` is slightly different (`/-api/stripe/subscribe`).\n\n### Example #4: Subscribe to a Plan with a Custom Amount\n\nThis is a workaround for Stripe having set plan prices. If you submit a new subscription (via Zesty) with a interval of `month` and a price of `999`. It will check if a plan `monthly-9.99` exsits. If it doesn't, it will create it. Either way, it will create a new subscription to that plan. See the below the code example below. Note: the endpoint for this is also slightly different (`/-api/stripe/subscribe-custom`).\n","category":"guides","service":"instances"},{"name":"Using ICS to create a Calendar Downloadd","url":"/instances/guides/how-tos/integrations/using-ics-to-create-a-calendar-downloadd","objectId":"-Lb0-e0iTZ9Dqg0sMDHy","item":[],"content":"---\ndescription: >-\n  In this guide we will review how to create a button to download a calendar\n  event connected to an event.\n---\n\n# Using ICS to create a Calendar Downloadd\n\n### Overview\n\nYou can view an example of this working of this functionality at the [Zesty Burger Demo](http://burger-demo.zesty.site/events/).\n\n### Create the endpoint\n\nCreate an endpoint with any relevant name and a `.ics` extension. In this example we used `event.ics`.\n\n### Write the ICS file\n\nBelow is an example ICS syntax wrapped with a parsley each loop, and replacing dynamic pieces of content with parsley calls to relevant fields:\n\n```\n{{ each event_list as event where event._item_zuid = '{get_var.id}' limit 1}}\nBEGIN:VCALENDAR\nVERSION:2.0\nPRODID:{{ event.getUrl() }}\nCALSCALE:GREGORIAN\n(** Timezone start **)\nBEGIN:VTIMEZONE\nTZID:America/Los_Angeles\nBEGIN:DAYLIGHT\nTZOFFSETFROM:-0800\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\nDTSTART:20070311T020000\nTZNAME:PDT\nTZOFFSETTO:-0700\nEND:DAYLIGHT\nBEGIN:STANDARD\nTZOFFSETFROM:-0700\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\nDTSTART:20071104T020000\nTZNAME:PST\nTZOFFSETTO:-0800\nEND:STANDARD\nEND:VTIMEZONE\n(** Timezone end **)\n(** Event start **)\nBEGIN:VEVENT\nTRANSP:OPAQUE\nDTSTART;TZID=America/Los_Angeles:{{ event.date.date(Ymd) }}T{{ event.date.date(his) }}\nDTEND;TZID=America/Los_Angeles:{{ event.date.date(Ymd) }}T{{ math({event.date.date(h)+1}) }}{{ event.date.date(is) }}\nUID:{{ event.zuid }}\nDTSTAMP:{{ site.date(Ymd) }}T{{ site.date(his) }}\nLOCATION: ZestyBurger\nDESCRIPTION: {{event.calendar_description.striptags(start,end) }}\nURL;VALUE=URI:https://{{ site.domain }}{{ event.getUrl() }}\nSUMMARY: {{event.name}}\nDESCRIPTION: {{event.description}}\nCREATED:{{ site.date(Ymd) }}T{{ site.date(his) }}\nEND:VEVENT\n(** Event End **)\nEND:VCALENDAR\n{{ end-each }}\n```\n\nNote that the query in the each loop is looking for a query parameter names `id` to get the correct event.\n\n### Add the Markup\n\nHere is the HTML and parsley we are using on the event page to generate the button where we are referencing the end point we created and adding in the event id as a query parameter.\n\n```\n{{each event_list as event sort by event.date}}\n <div class=\"card\">\n         .....\n    <a href=\"/-/custom/event.ics?id={{event._item_zuid}}\" class=\"btn btn-primary\">Add to Calendar</a>\n    ....\n</div>\n{{end-each}}\n```\n","category":"guides","service":"instances"},{"name":"Zesty.io Google Webmasters Integration","url":"/instances/guides/how-tos/integrations/zesty.io-google-webmasters-integration","objectId":"-Lb020ihLj77JCEHr5hn","item":[],"content":"---\ndescription: >-\n  This guide shows how to set up 301 redirect links from your Wordpress website\n  to Zesty.io\n---\n\n# Zesty.io Google Webmasters Integration\n\nGoogle Webmasters is basically a tool that allows you to keep and record a list of all your links and pages on your website, that google can use to add to their search engine. What is important is that if you change any of your links to be a different URL (ex. migrating content management systems), you can then have Google Webmasters know where to direct the old link to so the information is still accessible to people.\n\nYou can transfer all links with Zesty.io through our tool that integrates with Google Webmaster. This is useful if you have changed the links on your website; for instance migrating a website to a new platform. ![Alt text](https://wyp1jm.media.zestyio.com/webmasters\\_screenshot.png)\n\nIt is important to note that this is especially useful for such cases as somebody placing a link from an old version of your website in documentation, or perhaps just a favorite in their browser. Zesty.io, will work with Google Webmaster to import the link information from Google and allow you to redirect every link that is entered there through setting up a simple 301 redirect.\n\nIt is important to note that this tutorial requires a Google account to work. If you do not have one, you can make one, by clicking [here](https://accounts.google.com/SignUp?continue=https%3A%2F%2Fwww.google.com%2F\\&hl=en) Now, once you have done this, you can start to get Webmasters set up. In order to do this, you will need to connect your website to Google Webmaster tools. This is a relatively simple process and the steps can be found [here](https://www.google.com/webmasters/tools/home?hl=en).\n\nIn order to set up Google Webmasters, the recommended method, as discussed in the link above requires you to verify your website with Google. This is done through uploading an HTML file into your root folder of your website. In order to do this, you will need to click this link to log into the Google Webmasters site by clicking [here](https://www.google.com/webmasters/verification/home?hl=en) If you have not already signed in to Google, you will need to do so now.\n\nIf you do not have the ability to do this, there are several alternative methods, not discussed in our docs, outlines here at this linkalt text\n\n![Alt text](https://wyp1jm.media.zestyio.com/Google\\_Webmaster.svg)\n\nOnce you have connected, you simply select a CSV file extracted from your current platform into Zesty.io, allowing you to have your older links redirect right to your new links that will be on Zesty.io, where you can align all of the details to where each link will redirect to.\n\nFor more information about our redirect tool, the Redirect Creator, please click [here](https://developer.zesty.io/docs/seo-tools/redirects/)\n","category":"guides","service":"instances"}],"content":"---\ndescription: >-\n  Zesty.io can integrate seamlessly with HubSpot's CRM. Draw customers into a\n  website with engaging content and capture lead information with a form that\n  then syncs with your Hubspot CRM.\n---\n\n# HubSpot CRM Form Integration\n\nZesty.io can integrate seamlessly with HubSpot's CRM. Draw customers into a website with engaging content and capture lead information with a form that then syncs with your Hubspot CRM.\n\n![HubSpot Logo](http://logonoid.com/images/hubspot-logo.png)\n\nFrom Hubspot: _“The forms API's principle method is the submit form method, which allows you to pass any information captured on your website or application to HubSpot, including any custom data. This endpoint doesn't require authentication, so you can make the call from a form to our API from the client without needing to worry about insecurity.”_\n\n## How to Submit data to a form\n\n**Prerequisite:** You must have a form pre-built in your Hubspot CRM before integrating. You can see a list of forms on your portal by going to the Contacts > Forms page.\n\n### Steps\n\n**1. Find your form’s GUID.**\n\nYou can locate this in HubSpot easily. Navigate to Contacts > Forms from the navigation menu > click to edit the form you wish to connect. When editing a specific form, you can find the Form GUID in the URL. In the URL\n\n`https://app.hubspot.com/forms/62515/78c2891f-ebdd-44c0-bd94-15c012bbbfbf/edit/`\n\nthe form GUID is 78c2891f-ebdd-44c0-bd94-15c012bbbfbf\n\n**2. Line up form fields**\n\n**Required Parameters used in the Request URL**\n\n* **Portal ID** (an alpha numeric chain, like the one we got above)\n* **Form GUID** (numerical)\n\n**Optional Parameters**\n\n* **Form Fields** _&{property key}=x_ - You can include any number of Contact Properties in the form data. Use the Key for the property. (The key for a property is contained in the \"name\" value when looking up your properties via the Contacts API)\n* **HS Context** _\\&hs\\_context=x_ - Used in the request body, A JSON formatted block that contains contextual information for the form submission. See the following entries for descriptions of the included data, and below for the format of this parameter.\n*   **HubSpot tracking cookie** _\"hutk\":x_ - Used in the hs\\_context parameter, The tracking cookie token value used for HubSpot lead activity tracking. You can retrieve this value from the \"hubspotutk\" cookie placed in the user's browser by the HubSpot JavaScript Tracking Code; the tracking code must be installed on the page that contains the form.\n\n    Please Note While the hutk value is not required for the submission to be accepted, this token is used to associate analytics data with a contact record, so without this you will not see any page views or analytics source data for the contact record.\n* **IP Address** _\"ipAddress\":x_ - Used in the hs\\_context parameter, The IP Address of the lead converting. You can retrieve this from the server request.\n* **Page URL** _\"pageUrl\":x_ - Used in the hs\\_context parameter, The URL the page is submitted on.\n* **Page Name** _\"pageName\":x_ - Used in the hs\\_context parameter, The Name or Title of the page the form is submitted on.\n* **Redirect URL** _\"redirectUrl\":x_ - Used in the hs\\_context parameter, The url to redirect the visitor to. This value must be an absolute URL that includes the protocol (http:// or https:// as the case may be). Please Note If you have a redirect URL set up for the form in the UI, it will override this option, even if no redirect URL is included in the form POST.\n\n**3. Setup URL and Post Request**\n\n_Example URL:_ [https://forms.hubspot.com/uploads/form/v2/GUID](https://forms.hubspot.com/uploads/form/v2/GUID)\n\n_Example body:_\n\n&#x20;The hs\\_context parameter should contain the following data, formatted in JSON. Please Note All parameters must be URL encoded before being passed through the API, including the hs\\_context parameter.\n\n**Example successful json response:**\n\n```\n{\n    \"hutk\": \"60c2ccdfe4892f0fa0593940b12c11aa\",\n    \"ipAddress\": \"192.168.1.12\", \n    \"pageUrl\": \"http://demo.hubapi.com/contact/\", \n    \"pageName\": \"Contact Us\", \n    \"redirectUrl\": \"http://demo.hubapi.com/thank-you/\"     \n}\n```\n\n**4. Test the Response**\n\nThe response from this API call will depend on how the call is made. If there is no \"redirectUrl\" value in the hs\\_context parameter, then the response will be as follows:\n\n* 204 when the form submissions is successful\n* 302 when the form submissions is successful and a redirect URL is included or set in the form settings.\n* 404 when the Form GUID is not found for the provided Portal ID\n* 500 when an internal server error occurs\n\nFor more details on HubSpot integrations, view their documentation [here](https://developers.hubspot.com/docs/methods/forms/submit\\_form).\n","category":"guides","service":"instances"},{"name":"Forms and Form Webhooks","url":"/instances/guides/how-tos/forms-and-form-webhooks","objectId":"-LtHERPwHKHgh6TReeUF","item":[],"content":"---\ndescription: Working with html forms and utilizing Webhooks in Zesty.io WebEngine\n---\n\n# Forms and Form Webhooks\n\nHTML pages rendered in WebEngine have access to a few ways to capture form data, render form data, or to send form data.\n\n## Capturing Form Data to an Instance's Leads Feature\n\nZesty.io Leads is feature of zesty that lets you capture user submitted data through an HTML form. Data is captured through \\<form> POSTs. Here is an example:\n\n```\n<form method=\"post\">\n    <input type=\"text\" name=\"first_name\">\n    <input type=\"text\" name=\"last_name\">\n    <input type=\"text\" name=\"email\">\n\n    <input type=\"hidden\" name=\"zlf\" value=\"form_name\">\n\n    <input type=\"submit\" value=\"Submit Button\">\n</form>\n```\n\nUpon POST submission, Zesty.io will look for an input named `zlf` (Zesty Lead Form), and if it finds it, it will capture the form data to the leads table which can be viewed ini the Zesty.io Manager app of the instance the submission occurred on. The value you set for `zlf` is captures as the form name, you can use this value to organize your leads into groups.\n\nIf you want to learn more about leads, have a look at the leads api [https://instances-api.zesty.org/?version=latest#6ba715eb-485f-4a4b-8e8a-f2f3fa81e9a1](https://instances-api.zesty.org/?version=latest#6ba715eb-485f-4a4b-8e8a-f2f3fa81e9a1)\n\n## Sending Form Data to an Email or Through a Webhook\n\nThere is built in functionality to send form data to an email address that is set in Zesty.io Manager Settings, under contact form. Alternatively you can have a payload sent to any remote server using a Webhook. That is often used for custom integrations or used with systems like [**Zapier**](https://zapier.com/).\n\n**Sending Form Data to an Email**\n\nIn your HTML form, you can add an input with the name `zcf`, (Zesty Contact Form) when that exists, Zesty.io WebEngine will detect it and send an email to the email set in contact form settings or the optional `email_override` input.\n\n`email_override` is often used for dynamic forms that change who the need to email. This value could be changed dynamically by Javascript based on user input. A good example is changing the email based on the department like support or billing, or based upon the location like state.\n\n```\n<form method=\"post\">\n    <input type=\"text\" name=\"first_name\">\n    <input type=\"text\" name=\"last_name\">\n    <input type=\"text\" name=\"email\">\n\n    <input type=\"hidden\" name=\"zcf\" value=\"1\">\n\n    <!-- optional -->\n    <input type=\"hidden\" name=\"email_override\" value=\"my@email.com\">\n\n    <input type=\"submit\" value=\"Submit Button\">\n</form>\n```\n\n**Sending Form Data via Webhook**\n\nIn your HTML form you can add an input with the name `_zesty_webhook` (Zesty Webhook), which WebEngine will look for. If WebEngine see `_zesty_webhook` it will attempt to send a POST request to the value of `_zesty_webhook` which should be the url of the remote service you wish to send a payload too. Let's look at a code:\n\n```\n<form method=\"post\">\n    <input type=\"text\" name=\"first_name\">\n    <input type=\"text\" name=\"last_name\">\n    <input type=\"text\" name=\"email\">\n\n    <input type=\"hidden\" name=\"_zesty_webhook\" value=\"https://hooks.zapier.com/hooks/catch/1111111/xxxxxx/\">\n\n    <input type=\"submit\" value=\"Submit Button\">\n</form>\n```\n\nUpon submission Zesty WebEngine will capture that post and send a payload to the `_zesty_webhook` value, which in our example is a Zapier url. The payload will look like this:\n\n```\n{\n            \"_verification_key' => \"zyx123zyz\",\n            \"submitted_from_url\": \"https://www.yourdomain.com/contact/\",\n            \"submitted_at\": \"timestamp\",\n            \"submitted_from_domain\" :  \"www.youdomain.com\"\n            \"first_name\": \"captured_form_input\",\n            \"last_name\" : \"captured_form_input\",\n            \"email\" : \"captured_form_input\"\n}\n```\n\nThe verification key is an MD5 hash of your Instance ZUID, you can use this to prevent spam from hitting your endpoints.\n\n## Using All Three Capture Methods\n\nIt possible to use all three methods in conjunction, so go nuts, but don't hurt yourself!\n\n```\n<form method=\"post\">\n    <input type=\"text\" name=\"first_name\">\n    <input type=\"text\" name=\"last_name\">\n    <input type=\"text\" name=\"email\">\n\n    <input type=\"hidden\" name=\"zcf\" value=\"1\">\n    <input type=\"hidden\" name=\"zlf\" value=\"my form\">     \n    <input type=\"hidden\" name=\"_zesty_webhook\" value=\"https://hooks.zapier.com/hooks/catch/1111111/xxxxxx/\">\n\n    <input type=\"submit\" value=\"Submit Button\">\n</form>\n```\n\n## Handling Form Data with Parsley\n\nSometimes its nice to customize your page base on the user's input. You can access values of a form post in parsley like this:\n\n```\n{{if {post_var.email} }}\n<h1>Thank you {{post_var.first_name}}!</h1>\n<p>We will reach out to {{post_var.email}} within the nexst 24 hours</p>\n{{end-if}}\n```\n","category":"guides","service":"instances"},{"name":"How to Implement Simple Pagination","url":"/instances/guides/how-tos/how-to-implement-simple-pagination","objectId":"-Lb5k4eoYHhgHxV_r5jA","item":[],"content":"---\ndescription: >-\n  Pagination is a great way to break up content over a number of pages. Whether\n  it's a multi-page article or a table of data breaking it across multiple pages\n  can help your user navigate more easily.\n---\n\n# How to Implement Simple Pagination\n\n### Things to know\n\nThis article is going to assume a proficient knowledge of [each loops](https://developer.zesty.io/parsley-templating/iteration-or-looping/) and [variables](https://app.gitbook.com/guides/understanding-and-using-parsley-variables). Specifically we will be heavily using the \"limit\" filter for each loops and the \"get\\_var\" functionality. For this guide, I will be looping through a pageset named \"blog\\_article\" and will be showing 5 articles per page.\n\n### Step one:\n\n#### &#x20;Write the each loop for the first page using variables for limit operators\n\nTo start we want to create the page with the each loop set up to generate the content for the page. We want to add a limit to the each loop. If you write \"limit\" followed by one number, that is the total number the each loop with show. If you write \"limit\" followed by 2 numbers, separated by a comma, the first number is how many items to skip, and the second number is how many to show. Our initial loop we will use a limit of 0, 5 so we skip none and show five. We'll set those numbers as variables and then call those variables in the each loop\n\n{% embed url=\"https://gist.github.com/dustinhorning/400beeb72f3cf28ae71ed220c94bbc9a#file-pagination-step-1\" %}\n\n### Step two&#x20;\n\n#### Update the number to skip to be dynamically set by a Get Variable\n\nThe only thing that changes between pages in our each loop will be how many entries to skip. So we are going to set up the skip variable to check if there is a Get Variable, a variable in the URL, and if so update the skip variable to that number. If there isn't a Get Variable we know we are on the first page, so we can set the skip variable to zero in that case.\n\n{% embed url=\"https://gist.github.com/dustinhorning/e5503968d931cc190d14b0746ff15448#file-pagination-step-2\" %}\n\n### Step Three\n\n#### Add previous and next buttons that set our Get Variable\n\nNow that our skip variable is ready to be set by a get variable, all we need is a link that updates the url. Our get variable for our next page will always be equal to the number we skipped on our current page, plus the number we've shown, and our get variable for our previous page will always be the number we skipped minus the number we showed. We can use the parsley \"math\" call to do some basic math in our hrefs.\n\n{% embed url=\"https://gist.github.com/dustinhorning/58490e7eb862d3c69dbc76367e2dbf08#file-pagination-step-3\" %}\n\n### Step Four&#x20;\n\n#### Hide previous link on the first page\n\nOur previous button does no good when we are on the first page, so we need to add an if check to know when to show it. We know the number to skip is always equal to zero on the first page, so we can check if our skip variable is not equal to zero, then show the previous link.\n\n{% embed url=\"https://gist.github.com/dustinhorning/83e6fe9f9108fab277699ebc8f1766e2#file-pagination-step-4\" %}\n\n### Step Five&#x20;\n\n#### Hide next link on the last page\n\nKnowing when you're on the last page is trickier than knowing when you're on the first page. With the first page skip is always zero, but with the last page the number to skips is dynamic and will change as entries are added or removed. We need a way to check if the last item in our each loop is the last item available or if it was stopped because of the limit. Then we know if the last item in our each loop wasn't the last item available then we still need a next button. There are a couple ways to go about this, but my solution is to add a new each loop below our original and exactly like it except with the reverse sort order and a limit of 1. Then set a unique variable in both each loops equal to the item's ZID. Now we can check if these ZIDs aren't the same, we know to show the next button, because there are still more entries that can be shown. Pay attention to line 6 and lines 9 through 13 in the code below.\n\n{% embed url=\"https://gist.github.com/dustinhorning/05206db9ac9f160a38316ff4d7abe843#file-pagination-step-5\" %}\n\n### Here is the complete code\n\n{% embed url=\"https://gist.github.com/dustinhorning/dddf3d47377b7adeea0289131a45944e#file-pagination-step-6\" %}\n\n","category":"guides","service":"instances"},{"name":"How to Launch an Instance","url":"/instances/guides/how-tos/how-to-launch-an-instance","objectId":"-M6b7jRxEqHG8-c8iHP6","item":[],"content":"---\ndescription: >-\n  It's easy to launch your instance with Zesty.io. Simply set your domain,\n  configure your DNS, and then confirm your site is live.\n---\n\n# How to Launch an Instance\n\n**This guide is for launching instances with custom domains. Please disregard this if you're using the default `zesty.dev` domains.**\n\nThere are 3 steps to making your instance accessible to the public.\n\n1. Set a custom domain name\n2. Configure your DNS\n3. Confirm your instance is live\n\n{% hint style=\"info\" %}\nBefore beginning the process to send your instance live ensure that all content and code that you want to be made available to the public are published and listed accordingly.\n{% endhint %}\n\n{% file src=\"../../../.gitbook/assets/Zesty.io New Site Launch Checklist Includes Links.pdf\" %}\nNew Site Launch Checklist\n{% endfile %}\n\n{% file src=\"../../../.gitbook/assets/Zesty.io Migration Launch Checklist Includes Links.pdf\" %}\nSite Migration Checklist\n{% endfile %}\n\n## 1. Set a Custom Domain Name\n\nStart by locating the instance that you want to launch in the Accounts Manager interface and then click that instance's \"Publish Instance\" button.\n\n![To begin launching your instance click the \"Publish Instance\" button.](<../../../.gitbook/assets/Screen Shot 2019-08-30 at 1.04.05 PM.png>)\n\nAfter you click the \"Publish Instance\" button the instance settings will open and prompt you to set a domain name and configure your DNS settings.&#x20;\n\n![Instance Settings drawer prompts for sending your instance live.](../../../.gitbook/assets/accounts-setting-launch-instructions.png)\n\nEnter your custom domain name in the textbox, select a branch, and click **+ Add Domain**. The domain name should be limited to the root only. Do not add protocol or trailing slash. For example, if your domain is example.com you'll enter `example.com`.&#x20;\n\n![Enter your domain, select a branch, and click Add Domain.](../../../.gitbook/assets/add-domain-set-branch.png)\n\n## 2. Configure your DNS\n\n{% hint style=\"info\" %}\n**Hybrid OYD:** If you are setting up a domain with Hybrid Zesty.io, please follow this guide\n{% endhint %}\n\nConfigure your domain's DNS settings by following the instructions in the settings drawer.&#x20;\n\n![DNS instructions in the Instance Settings drawer.](../../../.gitbook/assets/zesty-dns-settings.png)\n\n{% hint style=\"info\" %}\n**Please note**: Domain registrars are not one-size-fits-all so each step may not be applicable. See the [**Common DNS Registrars**](https://zesty.org/guides/how-to-launch-an-instance#common-dns-registrars) section below for more information.\n{% endhint %}\n\n{% hint style=\"warning\" %}\n**Cloudflare Users**: When setting DNS records in Cloudflare be sure to have the proxied by Cloudflare, an orange cloud icon, turned off on each record. Zesty.io cannot effectively manage the cache if Cloudflare is proxying requests and caching them.\n{% endhint %}\n\nThere are 2 primary records you will want to ensure are setup.\n\n1. The apex record (_e.g. example.org_)\n2. The WWW sub-domain record (_e.g. www.example.org_)\n\nWhen creating these records there will be 3 values that are required to set them up.\n\n1. Record type\n2. Host (or name)\n3. Value.\n\n### Apex Record\n\n[What is an apex record?](https://docs.microsoft.com/en-us/azure/dns/dns-zones-records#record-types)\n\n[Why can't I use a CNAME for my apex record?](https://www.isc.org/blogs/cname-at-the-apex-of-a-zone/)\n\nCreate or set an existing apex record with the following values:\n\n* _Record type_: `A`\n* _Host_: `@`\n* _Value_ (**Create a separate A record for each of these IP addresses**):\n  * `151.101.1.161`\n  * `151.101.65.161`\n  * `151.101.129.161`\n  * `151.101.193.161`\n\n{% hint style=\"info\" %}\nThe `@` symbol is a special value in DNS that means, the current domain.\n{% endhint %}\n\n### WWW Record\n\nCreate or set an existing WWW record with the following values:\n\n* _Record type_: `CNAME`\n* _Host_: `WWW`\n* _Value_: `zesty.map.fastly.net`\n\n![Standard WWW sub-domain request flow for Customers on Zesty.io Cloud](<../../../.gitbook/assets/Basic DNS setup.png>)\n\n## 3. Confirm your instance is live\n\nTo confirm that your instance is live click the green \"? Check DNS\" button. You should see a notification in the bottom left-hand corner of the screen letting you know if your DNS has been verified.\n\n{% hint style=\"info\" %}\nDNS changes can take time to propagate and for your ISP to pickup. They can also be cached. If you don't see your changes taking effect try loading the domain in a new browser and/or giving it more time. Typically an hour or two is enough.\n{% endhint %}\n\n## Additional Configurations\n\n### HTTPS & WWW\n\n{% hint style=\"info\" %}\nIf necessary you can configure your HTTPS and WWW settings before launching your site.\n{% endhint %}\n\nOpen the Content Manager interface and navigate to the Settings section. Under General, you'll find your HTTPS and WWW site settings.&#x20;\n\n![HTTPS and WWW settings.](../../../.gitbook/assets/www-settings-general.png)\n\nAbove you can see these settings outlined in orange. The tooltips will help you navigate this area and give you information about each setting.\n\nIf you want to always redirect to HTTPS then the \"HTTPS on?\" setting must be turned on. To turn this setting on click the \"HTTPS on?\" button and it will turn green.\n\nIf you'd like to force prepending your domain with WWW then click the \"Always prepend WWW to my domain?\" button.\n\nEnsure you save settings before continuing on.\n\n## **Common DNS Registrars**\n\nSince there are many places to purchase domains it's difficult to create all-inclusive instructions to setting up a DNS record. Below you'll find some common DNS registrars and their setup instructions.\n\n{% tabs %}\n{% tab title=\"Name Cheap\" %}\n* [Setting a CNAME record for www](https://www.namecheap.com/support/knowledgebase/article.aspx/9646/10/how-can-i-set-up-a-cname-record-for-my-domain)\n* [Redirecting example.org to www.example.org](https://www.namecheap.com/support/knowledgebase/article.aspx/385/77/how-do-i-set-up-a-url-redirect-for-a-domain)\n{% endtab %}\n\n{% tab title=\"GoDaddy\" %}\n* [GoDaddy Managing DNS](https://support.godaddy.com/help/article/680/managing-dns-for-your-domain-names)\n{% endtab %}\n\n{% tab title=\"Domain.com\" %}\n* [Manage DNS settings](https://www.domain.com/help/article/dns-management-how-to-update-dns-records)\n* [Updating CNAME records](https://www.domain.com/help/article/dns-management-how-to-update-cname-aliases)\n{% endtab %}\n\n{% tab title=\"bluehost\" %}\n* [DNS management](https://my.bluehost.com/hosting/help/559)\n* [Creating and understanding CNAMEs](https://my.bluehost.com/hosting/help/cname)\n{% endtab %}\n\n{% tab title=\"HostGator\" %}\n* [DNS management](https://www.hostgator.com/help/article/manage-dns-zones)\n{% endtab %}\n{% endtabs %}\n\n## Swapping out domains\n\nTwo instances cannot have the same domain assigned to it. Before the domain is added to a new instance it will need to be removed from the old one.&#x20;\n\n### Removing a domain name\n\n1. From the Accounts settings drawer, click the red trashcan icon button to the right of the name.&#x20;\n\n![Use the trashcan button to remove a domain name.](<../../../.gitbook/assets/Screen Shot 2020-12-21 at 2.48.11 PM.png>)\n\n2\\. A modal will pop up and confirm that you'd like to remove the domain. To confirm click the red **Remove** button.&#x20;\n\n![Click the red Remove button to remove the domain.](<../../../.gitbook/assets/Screen Shot 2020-12-21 at 3.01.21 PM.png>)\n\nIf it's been successfully removed a success notification will appear in the lower left-hand corner of the screen and you'll be able to add that domain to another instance.\n","category":"guides","service":"instances"},{"name":"How to Personalize User Experience by Accessing Geolocation","url":"/instances/guides/how-tos/how-to-personalize-user-experience-by-accessing-geolocation","objectId":"-LbYzRZNJRF40-e855PY","item":[],"content":"---\ndescription: >-\n  If a user's browser has access to the W3C Geoloction API, you can learn the\n  latitude and longitude of a user through a couple simple Javascript function.\n  This article gives you the example functions,\n---\n\n# How to Personalize User Experience by Accessing Geolocation\n\n### Browser Compatibility\n\nThe Geolocation API works on the following browser versions and all of their successor editions: Firefox 3.5, Google Chrome, Opera 10.6, Internet Explorer 9.0, and Safari 5.\n\n### Setting up the Javascript\n\nPut this javascript into your `main.js` or inline on page in `<script>` tags, save, and open your site preview.\n\n```\nfunction geoFindMe() {\n    if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(success, error, geoOptions);\n    } else {\n        alert(\"Geolocation services are not supported by your web browser.\");\n    }\n}\n\nfunction success(position) {\n    var latitude = position.coords.latitude;\n    var longitude = position.coords.longitude;\n    var altitude = position.coords.altitude;\n    var accuracy = position.coords.accuracy;\n    alert(\"lat: \" + latitude + \" long: \" + longitude); // for testing purposes, delete this line before sending to production\n    // write in your logic here\n}\n\nfunction error(error) {\n    alert(\"Unable to retrieve your location due to \" + error.code + \": \" + error.message);\n}\n\nvar geoOptions = {\n    enableHighAccuracy: true,\n    maximumAge: 30000,\n    timeout: 27000\n};\n```\n\n### Accessing Latitude and Longitude\n\nTo test the script above is working, open your browser developer console and type `geoFindMe();` and hit return. If the above script was installed correctly, your browser should prompt you for permission to access your location. Allow permission. After allowing permission you should see a popup dialog box with your latitude and longitude.\n\nThe `success()` function shows you how to access the latitude and longitude values from the position object. Write your custom scripts in there and have fun!\n","category":"guides","service":"instances"},{"name":"Personalize User Experience with JavaScript Cookies","url":"/instances/guides/how-tos/how-to-personalize-user-experience-with-javascript-cookies","objectId":"-LbZ-5D1xT1hDZZQPBus","item":[],"content":"---\ndescription: >-\n  In the event where you want to store a cookie based on a user action without\n  passing a link, you would need to use JavaScript. This guide explains how to\n  setup cookies using JavaScript, and later how\n---\n\n# Personalize User Experience with JavaScript Cookies\n\nIn the event where you want to store a cookie based on a user action without passing a link, you would need to use JavaScript. This guide explains how to setup cookies using JavaScript and later how to use logic to control personalization.\n\n### Setting up the JavaScript\n\nIn Zesty code editor, create a JavaScript file called `cookies.js` and paste this code:\n\n```\nfunction createCookie(name,value,days) {\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime()+(days*24*60*60*1000));\n        var expires = \"; expires=\"+date.toGMTString();\n    }\n    else var expires = \"\";\n    document.cookie = name+\"=\"+value+expires+\"; path=/\";\n}\n\nfunction readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i < ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\n\nfunction eraseCookie(name) {\n    createCookie(name,\"\",-1);\n```\n\nWhen the file is setup, you may now make JavaScript calls to set and read cookies.\n\n**Example usage:**\n\n```\n<script type=\"text/javascript\">\ncreateCookie('test_cookie','cookie content',7);\nvar x = readCookie('test_cookie')\nif (x) {\n    alert('wooo my cookie: ' + x);\n}\n</script>\n\n```\n\n### The Business Logic\n\n{% hint style=\"warning\" %}\nParsley access to cookies should not be used on statically cached pages. Note cookies should be used carefully and should not expose sensitive information.\n{% endhint %}\n\nWith an `if` statement, we are going to check the cookie's value to returned customized content. If it's a match, we will show one type of content, otherwise we will show our default content. It's quick to implement, let's take a look at the code.\n\n```\n<h1>Page Title</h1>\n<hr/>\n{{if @test_cookie == 'cookie content'}}\n\n<h2>{{@test_cookie}}</h2>\n<p>{{page.personlized_content}}</p>\n\n{{else}}\n\n<p>{{page.default_content}}</p>\n\n{{end-if}}\n```\n\nIt's that easy, have fun!\n","category":"guides","service":"instances"},{"name":"How to Personalize User Experience with Session Variables","url":"/instances/guides/how-tos/how-to-personalize-user-experience-with-session-variables","objectId":"-LbZ-eyJ6g3KVRjhVFzG","item":[],"content":"---\ndescription: >-\n  When a user has cookies disabled, or their ad blocker blocks cookies, your\n  best to use session variables to ensure personalization works for them. This\n  guide will show you how to use session variables\n---\n\n# How to Personalize User Experience with Session Variables\n\n{% hint style=\"warning\" %}\nParsley access to session variables should not be used on statically cached pages.&#x20;\n{% endhint %}\n\nIn this guide you will learn how to create page personalization, using session variables, on the Zesty platform. We will be modifying the loader file and a view file to create the most basic form of personalization.\n\nThere are three key components to executing personalization. The **URL**, the **Session Variable**, and the **Business Logic**. Let's start by looking at how to format the **URL**.\n\n### The URL\n\nThe url will contain the key to personalization, it is simply stored in a Get variable. A Get variable can be appended to the end of any URL. In our example, let's use `st`, short for session test.\n\n```\nhttps://mydomain.com/page/?st=developer\n```\n\n&#x20;_**Note**: when you setup links with advertisers, just append_ `?st=developer` _or_ `?st=marketer`_etc. and you can custom curate any experience you want to deliver._\n\nEasy right? Now let's store that value to a session variable.\n\n### The Session Variable\n\nSession variables are single references stored to memory on Zesty servers. Once a session variable is set, it can be accessed with Zesty's reference language, parsley. Parsley provides a simple way to set and access cookies, which looks like `$_variable = 'hello world'`. Note the `$_` denotes the variable a session variable, where are variable `$` without the `_` underscore is only available in a single page load.\n\nIn this example, we are going to store the Get variable passed by the URL to our session variable. To ensure we capture this on any page, we are going to put our code in the `loader` view. From the Code Editor in your Satellite, open the `loader` view file, and enter this line of code:\n\nOpen the loader view file and add:\n\n```\n{{$_sesvar = {get_var.ct} }}\n    \n<div class=\"container\">\n    {{current_view}}\n</div>\n```\n\n&#x20;_**Note**: the name of the session variable doesn't effect the result, but the name cannot have spaces or abnormal characters. Session variables can also be overwritten, so on a page for marketers you could overwrite the variable to_ `{{$_sesvar = 'marketers'}}`_, and then start targeting your language to marketers._\n\n### The Business Logic\n\nIn our URL `https://mydomain.com/page/?st=developer` we are passing the value `developer` and capturing that value into our session variable. With an `if` statement, we are going to check the session variable's value against our desired match `developer`. If it's a match, we will show one type of content, otherwise we will show our default content. It's quick to implement, let's take a look at the code.\n\n```\n<h1>Page Title</h1>\n<hr/>\n{{if $_sesvar == 'developer'}}\n\n<p>{{page.content_for_developers}}</p>\n<a href=\"/link/for/developers/\">Sign up you Code Monkey!</a>\n\n{{else}}\n\n<p>{{page.content_for_marketers}}</p>\n<a href=\"/link/for/marketers/\">Sign up and Market Awesome!</a>\n\n{{end-if}}\n```\n\n&#x20;It's that easy, have fun!\n","category":"guides","service":"instances"},{"name":"How to Prevent Bots From Submitting Forms","url":"/instances/guides/how-tos/how-to-prevent-bots-from-submitting-your-form","objectId":"-Lb5JFTAhQfb1tab4eoG","item":[],"content":"---\ndescription: >-\n  Are bots submitting your form? Screen out form submissions by bots by\n  implementing our honeypot feature.\n---\n\n# How to Prevent Bots From Submitting Forms\n\n### Overview\n\nA honeypot is a feature that's added to site manager and site engine to prevent spam. Learn more about honeypots \\[here]\\([https://en.wikipedia.org/wiki/Honeypot\\_(computing](https://en.wikipedia.org/wiki/Honeypot\\_\\(computing))). The idea is that a hidden HTML input can be injected by JavaScript or coded in with HTML. When a bot fills out and submits a form including that hidden input with a value the server will trigger a 500 error thus preventing spam. In other words: the honeypot code will not be visible to a site's visitors and will work at a server level to deflect spam.\n\n### How it works\n\nWhen the honeypot is turned on and a form is submitted the server looks for the hidden input with a name attribute matching the honeypot field string and a value attribute that's empty. If either of those requirements are not met then the server will return a 500. The following examples describe this process in more detail.\n\n**Submission will fail if honeypot is turned ON and:**\n\n* The hidden HTML input with the honeypot code has not appended to your form.\n* The `name` attribute **does not** match the honeypot field.\n* A `value` attribute has been set. For example `<input ... value=\"wlkncitns\">`.\n\n**Submission will succeed if honeypot is turned on and:**\n\n* The `name` attribute matches the honeypot field _and_ the `value` attribute is empty.\n\n### Setting up the honeypot\n\nThe honeypot setting is accessed by navigating to the Schema section -> Instance Settings -> Contact Form. This setting will be off by default. To turn this setting on simply add text to the honeypot field and save, and then navigate to the Editor section and add this Parsley call for the honeypot field to all of your forms: `{{setting.contact-form.honeypot}}`. Once the honeypot is turned on it will affect ALL forms on an instance.\n\n#### Coding in the honeypot with JavaScript or HTML\n\nIf there are multiple forms on your instance it's likely easier to append your forms with the honeypot code using JavaScript. Otherwise you can simply add 1 line of code in HTML.\n\n**JavaScript**\n\nHoneypots can be added to all forms with simple JavaScript at the end of the loader file. This code will append the honeypot to all of your forms.\n\n```\nvar input = document.createElement('input');\ninput.setAttribute('name','{{setting.contact-form.honeypot}}');  input.setAttribute('type','hidden'); (edited)\ndocument.querySelectorAll('form').forEach(form =>; { form.appendChild(input); });\n```\n\n**HTML**\n\nTo add the honeypot code with HTML, add the following line between your HTML form tags.\n\n`<input type=\"hidden\" name=\"{{setting.contact-form.honeypot}}\" value=\"\">`\n","category":"guides","service":"instances"},{"name":"How to Set Up Internationalization (i18n)","url":"/instances/guides/how-tos/how-to-set-up-internationalization-i18n","objectId":"-Lb5PqjyOV3_EGHllAaj","item":[],"content":"---\ndescription: >-\n  Setting up internationalization allows users to add multiple languages to\n  their instance.\n---\n\n# How to Set Up Internationalization (i18n)\n\n### Overview\n\nInternationalization (i18n) refers to adapting your instance's into another language. This gives sites with an international audience the ability to create content in different languages with the click of a button. _**Note: By default all Zesty.io instances are in English. Contact support@zesty.io if want to make an instance with a different default language.**_ When languages are added the muti-lang URLs will contain both the language _and_ locale as applicable. For example, es (Spanish) has variants by locale such as CO (Columbia), ES (Spain), MX (Mexico), UY (Uruguay) and so on; the URL will be in the form of domain/language-locale/my-content e.g., `example.com/es-mx/my-content`.\n\n![Example URL structure in internationalization.](../../../.gitbook/assets/i18n-domain-paths.png)\n\n{% hint style=\"warning\" %}\nZesty.io's multi-lang will **not** translate the page for you. However, it will add the language and locale to the URL.\n{% endhint %}\n\nOnce a language is added the template is duplicated. Although languages share a template _they have separate ZUIDs_ - in other words - duplicates do not share their ZUID with the original language. For example, the template for English will have the same template as Spanish, however, each one will have their own ZUID.&#x20;\n\n![Content is duplicated when languages are added.](../../../.gitbook/assets/01a-duplicated-content.png)\n\n&#x20;And the item's path will be prepended with the language and locale _except for the original language_.\n\n![Languages (except original) are prepended with language and locale.](../../../.gitbook/assets/02b-lang-locale-paths.png)\n\n{% hint style=\"danger\" %}\nDeleting one multi-lang item will delete all of its siblings. \\\nFor example, if you have an item in en-US, es-MX, and fr-FR and you delete the es-MX item, its en-US and fr-FR siblings will also be deleted.\n{% endhint %}\n\n### Before you begin&#x20;\n\nAdding languages to your instance requires using our [API](https://zesty.org/getting-started/i18n-multi-language) to both add _and_ activate languages. If you're not familiar with using APIs there are many resources online to support your learning, such as [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side\\_web\\_APIs/Introduction).\n\n### **Steps for implementing i18n**\n\n#### **Step 1: Adding languages**\n\nFollow our API documentation to [add a language](https://zesty.org/getting-started/i18n-multi-language#adding-a-language).\n\n{% hint style=\"info\" %}\nMultiple languages **cannot** be added with a single **POST**. Every language that you add requires a separate POST. For example, if you wanted to add es-MX, es-ES, and es-UY - you'll need to do three (3) separate **POST**s to add each language.\n{% endhint %}\n\n#### **Step 2: Activating languages**\n\nFollow our API documentation to [activate a language](https://zesty.org/getting-started/i18n-multi-language#activating-a-language). **Languages must be activated in order to be viewed on a live site.**\n\n{% hint style=\"info\" %}\nMultiple languages **cannot** be activated with a single PUT. Every language that you want to activate requires a separate PUT.\n{% endhint %}\n\n### **Creating Content in Other Languages**\n\nOnce internationalization is setup, a language selector dropdown will appear in each content item that allows you to select the language.\n\n![Select the content's language through this dropdown.](../../../.gitbook/assets/05-i18n-language-select-dropdown.png)\n\nSelect the language/locale option from the dropdown. Once selected, you will be able to edit content for that item in the chosen language/locale. Each language/locale will have its own versions and ZUID.\n\n![Content editing views are duplicated on a per-language basis.](../../../.gitbook/assets/06-i18n-es-mx-editing-content.png)\n","category":"guides","service":"instances"},{"name":"How to Use the Safe Email Send To Setting","url":"/instances/guides/how-tos/how-to-use-the-safe-email-send-to-setting","objectId":"-MVcA4xVUI8uYrt4ap7N","item":[],"content":"---\ndescription: Safeguard against email spoofing with the Safe Email Send To setting.\n---\n\n# How to Use the Safe Email Send To Setting\n\n### Overview\n\nIn order to safeguard against email spoofing we've added a setting for forms that are using are an [email override](https://zesty.org/guides/how-to-create-a-lead-form#email-override-setting-a-specific-form-to-notify-a-different-email-than-the-one-in-settings) field. This field is activated by adding a list of emails in the form of comma separated values (CSV). When the field is activated the email override value will be validated against the CSV list; if the email override value does _not_ match a value in the list the email will not be sent.\n\n### Behavior\n\nThere are 3 different behaviors that can happen on form submission depending on whether or not the Safe Email field is filled out.&#x20;\n\n1. **The field is left blank:** on submission the field is ignored.\n2. **The field is filled out **_**and matches**_** the email override value:** on submission Zesty.io will validate the email override value against the Safe Email field value(s) and will send an email.\n3. **The field is filled out and it **_**does not match**_** the email override value:** on submission Zesty.io will validate the email override value against the Safe Email field value(s) and will not send an email.\n\n### Adding the Safe Email Send To Setting\n\nThis setting can be added via our [API](https://instances-api.zesty.org/#d295e8c8-40a2-435c-85cd-23a043a7135f) with the following JSON body:\n\n```\n{\n    \"category\": \"contact-form\",\n    \"keyFriendly\": \"Safe Email Send To List\",\n    \"key\": \"safe_emails\",\n    \"value\": \"\",\n    \"admin\": false,\n    \"parselyAccess\": false,\n    \"dataType\": \"text\",\n    \"options\": \"\",\n    \"tips\": \"CSV of Safe Emails for Email Override\"\n}\n```\n\nIf you're not comfortable using our API send a request via [Slack](http://chat.zesty.io/) or email support@zesty.io and ask for the setting to be added to your instance.\n\n### Using Safe Email Send To\n\nBefore trying to use this feature be sure that it is available on your instance. If it is not follow the above instructions on how to add it.\n\n1\\. Navigate to Settings and then Contact Form.&#x20;\n\n![](../../../.gitbook/assets/01-navigate-to-settings.png)\n\n2\\. Fill out the Safe Email Sent To List field with comma separated value(s).\n\n![](../../../.gitbook/assets/02-enter-emails.png)\n\n3\\. Save your changes.\n\n![](../../../.gitbook/assets/03-save.png)\n\n4\\. Refresh the cache by publishing a file or use the [refresh cache button](https://zesty.org/guides/refreshing-the-cache) to ensure that the changes you've made have persisted.\n","category":"guides","service":"instances"},{"name":"How to Create a Blueprint in Github","url":"/instances/guides/how-tos/how-to-create-a-blueprint-in-github","objectId":"-Lb94cFgkr72BLhEhEVl","item":[],"content":"# How to Create a Blueprint in Github\n\n### Getting Started\n\nTo start building a template, you will first need a [GitHub Account](https://github.com/join?source=header-home), click [here](https://github.com/join?source=header-home) to create one. Now that you have an account (or if you already have an account), open up the [default Zesty.io template example](https://github.com/zesty-io/plate-starting-foundation). Once you are signed in to github and on the 'plate-starting-foundation' template, fork it.\n\n## Required Files\n\n* Plate.xml\n* Plate-Variables.xml\n* shield.png\n* .tpl files for every view in the Plate.xml\n\nNow go to the Zesty.io Account Manager. After clicking the new web property button, in the top right area of the 'Select a Design Framework' screen you will be given the option to upload your custom template.\n\n![managetemps](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-01-at-11-23-53-am.png)\n\nFrom the 'My Account' page, click on 'Add New Framework'. Fill out the manager page to finalize your templates creation.\n\n![manager](https://wyp1jm.media.zestyio.com/screen-shot-2016-06-08-at-12-23-12-pm.png)\n\n**Plate Name:**\n\nThe custom name of your template\n\n**Github Repo URL:**\n\nThis will be the url of your github repository. In this default example, the url will be '[https://github.com/zesty-io/plate-starting-foundation](https://github.com/zesty-io/plate-starting-foundation)'.\n\n**Template Example Preview URL:**\n\nThis is the URL to the website the template starts with, such as '[http://c429f79152da850d8a2844cce33ff2ab.sites.gozesty.com/](http://c429f79152da850d8a2844cce33ff2ab.sites.gozesty.com/)'\n\n**Shield Image URL:**\n\nA custom image url would go here if you wanted to override the default shield image.\n\n**Background Cover Image URL:**\n\nA custom image url would go here if you wanted to override the default cover image.\n\n**Tags:**\n\nTags are a taxonomy system. Tags are helpful way to organize a large amounts of templates.\n\n## Finishing Up:\n\nYour template will now be visible in 'My Custom Templates' from the create a new web property framework selection.\n\n![startfoundation](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-01-at-11-32-08-am.png)\n\nLastly, you have the option of resetting your account and selecting a new framework if you choose.\n\n![changeframework](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-01-at-11-35-24-am.png)\n","category":"guides","service":"instances"},{"name":"JavaScript Component Libraries","url":"/instances/guides/how-tos/javascript-component-libraries","objectId":"-M7yMnWKbD2CRLt-LiQF","item":[],"content":"---\ndescription: Implementing JavaScript component libraries on Zesty.io\n---\n\n# JavaScript Component Libraries\n\nThis is a conceptual overview of the strategies around delivery and rendering of JavaScript based component libraries. With examples demonstrating how to implement on Zesty.io\n\n```\nf(d) = v\n```\n\nOne of the ways, although an oversimplification, to describe how these libraries work is the equation of a function given data results in a view. The function for our purposes being the component library code you author, data being content coming from the Zesty.io CMS and view is the resulting HTML output of this combination.\n\nThe first thing that needs to be understood when examining these rendering options is that most JavaScript component libraries have a build step. This is the step which occurs on a computer or server, which is not the consumers (_read_: website visitor), that transforms a domain specific language (DSL) into JavaScript (ES5/6) which a browser can execute. Meaning there is \"source code\" which you author and a \"shipped\" JavaScript file.\n\n**Note**: Some libraries do allow for \"runtime\" transformations. Meaning the source code is shipped to a consumer's browser and the library then transforms that into browser usablem JavaScript on their machine, which is then rendered to the page.\n\nExamples of JavaScript component libraries which can be used to implement these strategies;\n\n* [ReactJS](https://reactjs.org/)\n* [PreactJS](https://preactjs.com/)\n* [VueJS](https://vuejs.org/)\n* [AngularJS](https://angularjs.org/)\n\n### Single Page Application (SPA)\n\n* [create-react-app.zesty.dev](https://create-react-app.zesty.dev)\n* [github.com/zesty-io/create-react-app.zesty.dev](https://github.com/zesty-io/create-react-app.zesty.dev)\n\nArguably the simplest and most common of these strategies. This is when source files are built into a \\*single bundle which is served to a web page that mounts it to a DOM element. Typically a root element such as a child div of the body tag. This is also known as a \"headless\" strategy.\n\n```markup\n<html>\n <head>\n   <!-- Your pre-built app bundle -->\n   <script type=\"text/javascript\" src=\"path/to/app/bundle.js\"></script>\n </head>\n <body>\n   <div id=\"app\">\n     // App mounts to this element\n   </div>\n </body>\n</html>\n```\n\nWith this strategy when the application is initially mounted it contains no data to render. It will make http network requests to the CMS API to fetch necessary data and then render out views.\n\nA SPA can be used across all urls of a site or on a single path part. _e.g. example.org/app/_\n\n### In Page Component\n\n* [preact.zesty.dev](https://preact.zesty.dev)\n* [github.com/zesty-io/preact.zesty.dev](https://github.com/zesty-io/preact.zesty.dev)\n\nThere is not a hard requirement for component libraries that they are the only thing on a page. Usually the only rule is that anything nested below the mount element of the component is not interacted with externally.\n\nThis allows for combining static pages with embeded dynamic components.\n\n```markup\n<html>\n <head>\n   <!-- Your pre-built component bundle -->\n   <script src=\"path/to/component/bundle.js\"></script>\n </head>\n <body>\n   <div id=\"blog\">\n     <main id=\"post\">\n       <header>\n         <h1>Post Title</h1>\n       </header>\n       <div>\n         <p>Post content ...</p>\n       </div>\n       <footer>\n         <div id=\"ComponentMountPoint\">\n           // Your mounted JavaScript component.\n           // This child DOM structure should not \n           // be interacted with externally.\n         </div>\n       </footer>\n     </main>\n   </div>\n </body>\n</html>\n```\n\n### Server Side Rendering (SSR)\n\n> e.g. [Next.js](https://nextjs.org/), [Nuxt.js](https://nuxtjs.org/)\n\nSSR is when a browser requests a page and the server responding will in turn fetch the necessary data, typically from an http networked service like a CMS API, run a build combining the data and source code into the rendered HTML page. Which it then returns to the requester. At this point we have served a \"static\" page. This page then typically includes code which allows it to \"hydrate\" the data. Part of this static page is a script tag for the JavaScript bundle. Which when the browser automatically downloads and parses will take over the static page and convert into a dynamic single page application.\n\nWhile Zesty.io does not offer a server execution runtime, meaning we won't run your source code on a server, you can combine Parsley templates with a SPA in a similar fashion. By authoring Parsley templates, which have access to the same CMS data, you can generate static pages which include a JavaScript bundle that once loaded will overtake the static page and provide a dynamic SPA experience which then will request CMS data via APIs.\n\n### Static Page Builders\n\n> e.g. [GatsbyJS](https://www.gatsbyjs.org/)\n\nThis is a solution where you author component source code which goes through a build step which combines data with the source code and outputs the generated static files. These static files are then pushed to a host which serves them to consumers.\n\nWith this strategy usually you will have separate data, code and hosting management (_read_: third party providers). Whereas Zesty.io offers both data and hosting management allowing you to pick your choice of code authoring and build steps.\n\n_e.g. Zesty (data) + Gatsby (code) + GCP Bucket (hosting)_\n\n## In Conclusion\n\nThese strategies boil down to two main groups; is the server rendering or is the browser rendering. Both the SPA and in page components require the browser to render. While SSR starts with the server doing an initial render and eventually has the browser take over rendering.\n\nZesty.io does not offer custom server rendering environments. That is, we will not run a build script for your source code.\n\nWhen rendering in browser, on Zesty.io, there are a few ways to deliver application bundles; globally, per model, per page and inline.\n\nWith all of these solutions there are a few implementation details they all must consider.\n\n* How is the code built?\n* How is the code delivered?\n* How is data fetched?\n\nEach strategy typically allows for multiple combinations of solutions to these concerns.\n\n_A single bundle is not a requirement. It's possible to build multiple bundles which are shipped independently._\n","category":"guides","service":"instances"},{"name":"Building Related Single and Multi-page Content Models","url":"/instances/guides/how-tos/building-related-single-and-multi-page-content-models","objectId":"-MJmS-NEIWJ4kQ46qPNe","item":[],"content":"---\ndescription: >-\n  Related multi-page and single-page content models can be configured in\n  different ways to accommodate the content manager's and developer's needs.\n---\n\n# Building Related Single and Multi-page Content Models\n\n### Overview\n\nWhen building your instance's Schema it's important to consider what you'd like your URL paths to look like and to understand how building those paths will impact your content manager and developer.\n\nWhen you're building an instance with multiple single-page content models that are related to multi-page model(s) it can be confusing to know which way to build them. Do you make one multi-page model for each single-page model? Or do you make a one multi-page model for _all_ of your single-page models? There are at least a couple different ways to architect your content models and this article will help you understand the implications of 2 types of builds.\n\n_Note:_ having a general, global understanding your teams needs including basic coding skills will help you further assess their needs and understand how to [build your Schema](https://zesty.org/guides/building-related-single-and-multi-page-content-models#building-your-schema).\n\n{% hint style=\"info\" %}\nSome of the images below contain hard-to-read text. Click the images to expand them & zoom-in to read text.\n{% endhint %}\n\n### Considerations Before Building\n\n#### Routing\n\n![Example URLs showing parent and child.](../../../.gitbook/assets/01-domain-routing.png)\n\nIt's important to understand the URL paths that you're trying to create before you build your Schema. Breaking up the URL into parent, child, grandchild will then help you understand which _content models_ will be the parents, children, grandchildren, and so on. For example, if your URL paths need to be: `/support/my-question/`, `faq/my-question`, `general-questions/my-question` all of these URLs follow the structure of `/parent/child/`. If you had a longer URL the structure would be: /parent/child/grandchild/great-grandchild and so on. The structure of the path will likely reflect how you'll build your Schema, however it doesn't mean that you'll need to build in a one-to-one fashion. These builds are further described in the [Building Your Schema ](https://zesty.org/guides/building-related-single-and-multi-page-content-models#building-your-schema)section below.\n\n#### Understanding your team's needs\n\nUnderstanding your content manager's needs allows you to balance them with  your developer's needs. It'll also help you understand how your content team prefers to enter data and what needs to be done with the data which can influence how to decide to construct the Schema. With this understanding you can see where compromises may need to be made as well.\n\n**Content Manager**&#x20;\n\n![The content section navigation will change depending on how the Schema is built.](../../../.gitbook/assets/02-content-manager.png)\n\nThe content manager(s) will be the person(s) who are [entering/editing content](https://zesty.org/guides/content-entry-drafts-and-publishing). Consider how much effort managing content will take. The content manager may find it easier to do all of their work in one multi-page model **** (shown above as _One multi-page model for many single-page models_), or they may find it easier to organize their content into several multi-page models (Shown above as _Each single-page model has a child multi-page model_). Be sure to communicate with your content team so you can take their needs into consideration.\n\n**Developer**\n\nYour developer(s) will need to consider how this information will be consumed and where it will be sent. How will the content be displayed and on which pages? Will the content be sent elsewhere (e.g. a mobile app)? How will content be assorted or combined? The answers to these questions will help you understand how complex the code will need to be.\n\n### Building Your Schema\n\nBelow we've described 2 different ways of designing a setup:\n\n* Each single-page model has a child multi-page model\n* One multi-page model for many single-page models\n\n#### Each single-page model has a child multi-page model\n\nEach single-page model will have a multi-page model as its child. When this structure is built each multi-page model will have their [parent selected](https://zesty.org/guides/building-the-schema-and-selecting-fields#step-3-model-parent) when it's created.\n\n**Schema**&#x20;\n\nWhen the [Schema is built](https://zesty.org/guides/building-the-schema-and-selecting-fields) it will reflect the diagram below where the single-models are the parents and the multi-page models are the children.\n\n![Each single-page model will have a multi-page model as its child.](../../../.gitbook/assets/3a1-multi-page-per-single-page.png)\n\n**Content**&#x20;\n\nThe Schema's structure is reflected in the content navigation sidebar. When the content manager is entering content the parent will automatically be selected for them in the Meta section and they will need to enter their content in multiple models.&#x20;\n\n![The item's meta section automatically has the item's parent selected.](../../../.gitbook/assets/3a2-content-manager-each-single-page-has-multi-child.png)\n\n**Code**\n\nIf the content from each model must be combined and assorted developers can use a [custom JSON endpoint](https://zesty.org/services/manager-ui/editor/custom-file-types-endpoints#creating-a-custom-file-type-from-the-web-ide) to combine the entries, and use JavaScript to filter and display the data. Each single-page model can use a [Parsley each loop](https://zesty.org/services/web-engine/introduction-to-parsley/each-loop-deep-dive) to display its related multi-page model information.&#x20;\n\n![Shows how Schema & Views are related including custom endpoint example.](../../../.gitbook/assets/3a3-multipage-route-with-code.png)\n\n#### One Multi-Page Model For Many Single-Page Models\n\nSingle-page models will have one multi-page model. When this structure is built the multi-page model will **not** have any [parent item](https://zesty.org/guides/building-the-schema-and-selecting-fields#step-3-model-parent) selected.\n\n**Schema**\n\nWhen the [Schema is built](https://zesty.org/guides/building-the-schema-and-selecting-fields) it will reflect the diagram below where the single-models are a multi-page model are top-level items. The arrow indicates that the related articles (following our example) will all be housed in a single multi-page model.\n\n![All content models are top-level and all items are housed in a single multi-page content model.](../../../.gitbook/assets/3b1-one-multipage-for-many-single-pages.png)\n\n**Content**\n\nThe content manager will be able to enter all of their content into one multi-page model, however they will need to select the item's parent from the Meta tab. If a parent isn't selected then the article will be a top-level item.\n\n![Each multi-page item will need its parent item selected.](../../../.gitbook/assets/3b2-content-manager-1-multi-page-model.png)\n\n**Code**\n\nSince the content is already gathered in a single model, displaying the content on a page requires a single [each loop](https://zesty.org/services/web-engine/introduction-to-parsley/each-loop-deep-dive) to iterate through all the content. If the content needs to separated out by its parent that can be done with an [if-conditional](https://zesty.org/services/web-engine/introduction-to-parsley/if-conditionals) (shown below) or multiple each loops with [`where` filters](https://zesty.org/services/web-engine/introduction-to-parsley/each-loop-deep-dive#using-where-to-your-results).\n\n![Shows how Schema & Views are related & includes example each loops.](../../../.gitbook/assets/3b3-one-multipage-for-many-single-pages-w-code.png)\n\n### Conclusion\n\nThere are multiple ways to build architect your content models based on the a user's needs. These examples show 2 ways of doing this, including examples of code a developer might use to build their views. Take this information into consideration and use it with your own innovative [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley) and JavaScript techniques to design your [Schema](https://zesty.org/services/manager-ui/schema) build your [views](https://zesty.org/services/web-engine/view-templating).\n","category":"guides","service":"instances"},{"name":"Microsoft Single Sign-On (SSO)","url":"/instances/guides/how-tos/microsoft-sso","objectId":"-MVcSFcAPTjdehQVRpst","item":[],"content":"---\ndescription: You may log into Zesty.io using Microsoft Single-On\n---\n\n# Microsoft Single Sign-On (SSO)\n\n{% hint style=\"warning\" %}\nOnce you've logged in via Microsoft SSO your account is tied to Microsoft SSO login and you must always login using this method.\n{% endhint %}\n\nTo log in to Zesty.io using Microsoft SSO click the **Sign in with Microsoft** button which is located below the login form at [https://accounts.zesty.io/login](https://accounts.zesty.io/login)\n\n![The Microsoft SSO button is located below the user/password form located at https://accounts.zesty.io/login](<../../../.gitbook/assets/image (46).png>)\n\n### For Organizations\n\nOrganizations that have enterprise licensing with Zesty.io may choose to have new account creation be blocked on a email domain basis thus forcing new users to use Microsoft SSO.\n\nOnce a user in your organization connects to Zesty.io with Microsoft SSO users may be deleted them from your Azure organization to prevent them from logging in again.\n\n#### Synchronized Permissions\n\n**Permissions are not synchronized** with Microsoft Active Directory. Single Sign-On login is only available once your organization's Microsoft Active Directory admin has allowed the [Zesty.io](http://zesty.io/) application.\n\nYou can streamline permission access by using Teams in Zesty.io, which enables you to add a single team to an instance under specific roles and permissions. Adding and removing a user from a Team is the best way to cascade access. Learn more about [Teams](../../../accounts/ui/teams.md).\n\n{% content-ref url=\"../../../accounts/ui/teams.md\" %}\n[teams.md](../../../accounts/ui/teams.md)\n{% endcontent-ref %}\n\n","category":"guides","service":"instances"},{"name":"Reordering Child Items in a Parsley Auto-generated Navigation Bar","url":"/instances/guides/how-tos/reordering-child-items-in-a-parsley-auto-generated-navigation-bar","objectId":"-MAhgSYRBWJGe0yWtqMe","item":[],"content":"---\ndescription: >-\n  Reordering the child items in an auto-generated navigation bar is as simple as\n  adjusting some numbers in the content editing view.\n---\n\n# Reordering Child Items in a Parsley Auto-generated Navigation Bar\n\n### Overview\n\nParsley's  [`{{ navigation() }}`](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#navigation-number) call automatically creates a navigation bar based on an instances content models. Depending on how the call is configured, users will see child items in their navigation bar. Child items will show up in dropdowns underneath their parent item.&#x20;\n\n**Note:** the `{{ navigation() }}` call creates an HTML list structure but does not styles the navigation bar as shown below.\n\n![A dropdown of child pages is shown outlined in purple.](../../../.gitbook/assets/auto-gen-nav-dropdowns.png)\n\nThese child items are shown in the order they're created, however users may want to reorder them. Follow the steps below to reorder them.\n\n### Steps to reorder navigation child items\n\nUsing the image above as our example we're going to step through how to reorder child  items.\n\n1\\. Decide on the order that you want the child items in.\n\n![Example order of child items.](../../../.gitbook/assets/auto-gen-nav-child-items-order.png)\n\n2\\. In the Content Manager, navigate to the Content section.\n\n![Navigate to the Content section.](../../../.gitbook/assets/02-navigate-to-content-section.png)\n\n3\\.  Locate the item that you've selected to be your first child item and select it.\n\n![Locate your first child item and select it.](../../../.gitbook/assets/03-locate-item-and-select-it.png)\n\n4\\. Scroll down to find the Parsley Behaviors section in the right-hand sidebar.&#x20;\n\n![Parsley Behaviors in the right-hand sidebar.](../../../.gitbook/assets/04-locate-parsley-behaviors.png)\n\n5\\. Use the number picker to reorder your item.&#x20;\n\n![Use the number picker to reorder your item.](../../../.gitbook/assets/05-use-the-number-picker-to-reorder-item.png)\n\n6\\. Click  the green Save button and preview your changes before sending them live.\n\n![Save and preview your changes.](../../../.gitbook/assets/06-save-and-preview-changes.png)\n\n7\\. If you're satisfied with the order click the blue Publish to send your changes live.\n\n![Click the blue Publish button to send your changes live.](../../../.gitbook/assets/07-publish-changes.png)\n\n8\\. Repeat steps 3-7 for each item that you'd like to reorder.\n","category":"guides","service":"instances"},{"name":"Using Snippets","url":"/instances/guides/how-tos/using-snippets","objectId":"-MCPFfiA56fkThfhves2","item":[],"content":"---\ndescription: >-\n  Snippets are a file type in the Web IDE that allow for small pieces of code to\n  be abstracted out from the views.\n---\n\n# Using Snippets\n\n### &#x20;Overview&#x20;\n\nThe code in Views can get pretty crowded with code depending on what you're working on. [Snippets](https://zesty.org/glossary#snippet) can make all that code more modular and easy to manage by allowing user to abstract complicated and repeated pieces of code into a separate file. When you want to include your abstracted code into a view, use the Parsley [`{{ include }}`](https://zesty.org/services/web-engine/introduction-to-parsley/include) call.&#x20;\n\n### Common Use Cases&#x20;\n\nThere are several common use cases that Snippets are commonly used for:&#x20;\n\n* Headers&#x20;\n* Footers&#x20;\n* Sidebars&#x20;\n* Navigation bar(s)&#x20;\n\nWhile these are common use cases, more complex pieces of code can be abstracted as well. For example, it may be easier to work on a large form when it's abstracted into its own Snippet, or a complex in-View script may be easier to work when it's not surrounded by a View's HTML.&#x20;\n\n{% hint style=\"info\" %}\nThe Loader, which comes with every single Zesty.io instance, is a Snippet. This file allows for views to be rendered using the [`{{ current_view }}`](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#current\\_view) call.&#x20;\n{% endhint %}\n\n### Creating Snippets&#x20;\n\nFor this guide we're going to be making a simple header for our website. We are starting at the last step of the [Schema-Content-Code](https://zesty.org/guides/the-connection-between-schema-content-and-code) process: coding it all in. If you need a refresher on how Zesty.io works refer to these articles: [create an instance](https://zesty.org/guides/how-to-create-a-new-instance), [build the Schema](https://zesty.org/guides/building-the-schema-and-selecting-fields), and [add Content](https://zesty.org/services/manager-ui/content/adding-and-managing-content) before jumping into the Web IDE to code it all in.&#x20;\n\n1\\. Navigate to the Web IDE.\n\n![Navigate to the Web IDE.](../../../.gitbook/assets/01-create-snippet-navigate-to-ide.png)\n\n2\\. Create the blue Create File button. Note: depending on your screen size you'll simple see a blue button with a + sign on it.\n\n![Create a new file.](../../../.gitbook/assets/02-create-snippet-blue-create-file-button.png)\n\n3\\. Select Snippet from the dropdown.\n\n![Select Snippet as your File Type.](../../../.gitbook/assets/03-create-snippet-select-snippet-from-dropdown.png)\n\n4\\. Give it a name. There is no need to add an extension to the file name.&#x20;\n\n![Give your snippet a name.](../../../.gitbook/assets/04-create-snippet-name-it.png)\n\n5\\. Click Create.\n\n![Click the green Create File button to create your file.](../../../.gitbook/assets/05-create-snippet-click-create-file.png)\n\n### Using Snippets\n\nWhen working on your Snippet you'll need to include it in a view in order to preview your changes. Since we're working on a header that we want to be on every single page, we're going to add our Snippet to the [Loader](https://zesty.org/services/manager-ui/editor/outputting-content#loader) which loads every view.\n\nAfter creating your Snippet:&#x20;\n\n1\\. Include your snippet in a View so you can view your changes as you're coding.\n\n![Include your snippet in a view.](../../../.gitbook/assets/01-use-snip-include-in-view.png)\n\n2\\. Code your Snippet as necessary.\n\n![Add code to your snippet file.](../../../.gitbook/assets/02-use-snip-code-snippet-as-necessary.png)\n\n3\\. Save your changes.&#x20;\n\n![Save your changes.](../../../.gitbook/assets/03-use-snip-save-changes.png)\n\n4\\. preview them before sending them live.\n\n![Before and after adding the header snippet.](../../../.gitbook/assets/snippets-before-and-after.png)\n\n5\\. Once you're satisfied with the code in your Snippet, send it live by publishing it.\n\n![Publish your snippet once you're ready to go live.](../../../.gitbook/assets/05-use-snip-send-live.png)\n\n{% hint style=\"info\" %}\nTo send snippets live both the snippet _and_ the view that the snippet is included in need to be published.\n{% endhint %}\n","category":"guides","service":"instances"},{"name":"Video Embedding or Streaming Capabilities","url":"/instances/guides/how-tos/video-embedding-or-streaming-capabilities","objectId":"-M5OF2xcz7i1gIaiu_hW","item":[],"content":"---\ndescription: >-\n  Zesty.io can display video through 3rd party video services or self hosted\n  videos uploaded to the media service.\n---\n\n# Video Embedding or Streaming Capabilities\n\n### Embedding Video from Youtube, Instagram and Vimeo\n\nStandard embed codes provided by social media sites may be copy and pasted into a WYSIWYG Editor or directly into the content model HTML view file.\n\n![In youtube, click share, then click the embed option to get this view.](<../../../.gitbook/assets/image (4) (2).png>)\n\nWeb Developers can take advantage of parsley by adding a field to a content model called \"youtube\\_id\" (for example), and can make dynamic template views by using code like this:\n\n```markup\n<iframe width=\"560\" \n        height=\"315\" \n        src=\"https://www.youtube.com/embed/{{this.youtube_id}}\" \n        frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n        allowfullscreen>\n</iframe>\n```\n\n### Streaming Video&#x20;\n\nFor running your own stream, we suggest using a third party like [Mux.com](https://www.mux.com). A Mux stream can be put into any Zesty.io view, and a content model field and parsley can be used to give the Content Editor control of the stream id. In this example, we use the field name _playback\\_id_ for the Mux stream ID\n\n```markup\n\n<video id=\"liveStream\" autoplay controls height=\"900\" width=\"1600\"></video>\n\n<!-- Use HLS.js to support the HLS format in browsers. -->\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@0.8.2\"></script>\n<script>\n\t(function(){\n\t\t// Replace with your asset's playback ID\n\t\tvar playbackId = \"{{this.playback_id}}\";\n\t\tvar url = \"https://stream.mux.com/\"+playbackId+\".m3u8\";\n\t\t\n\t\t// HLS.js-specific setup code\n\t\tif (Hls.isSupported()) {\n\t\t\tvar video = document.getElementById(\"liveStream\");\n\t\t\tvar hls = new Hls();\n\t\t\thls.loadSource(url);\n\t\t\thls.attachMedia(video);\n\t\t}\n\t})();\n\t</script>\n```\n\n### Video Conferencing\n\nYou can run your own video conferencing setup on Zesty.io using Vidyo ([https://www.vidyo.com/](https://www.vidyo.com/)), create an account. The setup requires view editing with javascript and an external server server call to issue a connection token.&#x20;\n\n**View Code Example**\n\n```markup\n\n<script>\n\tfunction makeid(length) {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n// Add Vidyo Libray Callback\nfunction onVidyoClientLoaded(status) {\n  switch (status.state) {\n    case \"READY\":\n      // Create Vidyoconnector\n      VC.CreateVidyoConnector({\n\t\t  viewId: null, //\"renderer\",\n        viewStyle: \"VIDYO_CONNECTORVIEWSTYLE_Default\",\n        remoteParticipants: 3,\n        logFileFilter: \"warning info@VidyoClient info@VidyoConnector\",\n        logFileName: \"\",\n        userData: \"\",\n      }).then(function (vidyoConnector) {\n        //For acessing camera, microphone and speaker in chrome for latest vidyo library 4.1.24.15 register this device listener\n        vidyoConnector\n          .RegisterLocalCameraEventListener({\n            onAdded: function (localCamera) {\n              // New camera is available\n            },\n            onRemoved: function (localCamera) {\n              // Existing camera became unavailable\n            },\n            onSelected: function (localCamera) {\n              // Camera was selected/unselected by you or automatically\n            },\n            onStateUpdated: function (localCamera, state) {\n              // Camera state was updated\n            },\n          })\n          .then(function () {\n            console.log(\"RegisterLocalCameraEventListener Success\");\n          })\n          .catch(function () {\n            console.error(\"RegisterLocalCameraEventListener Failed\");\n          });\n\n        // Handle appearance and disappearance of microphone devices in the system\n        vidyoConnector\n          .RegisterLocalMicrophoneEventListener({\n            onAdded: function (localMicrophone) {\n              // New microphone is available\n            },\n            onRemoved: function (localMicrophone) {\n              // Existing microphone became unavailable\n            },\n            onSelected: function (localMicrophone) {\n              // Microphone was selected/unselected by you or automatically\n            },\n            onStateUpdated: function (localMicrophone, state) {\n              // Microphone state was updated\n            },\n          })\n          .then(function () {\n            console.log(\"RegisterLocalMicrophoneEventListener Success\");\n          })\n          .catch(function () {\n            console.error(\"RegisterLocalMicrophoneEventListener Failed\");\n          });\n\n        // Handle appearance and disappearance of speaker devices in the system\n        vidyoConnector\n          .RegisterLocalSpeakerEventListener({\n            onAdded: function (localSpeaker) {\n              // New speaker is available\n            },\n            onRemoved: function (localSpeaker) {\n              // Existing speaker became unavailable\n            },\n            onSelected: function (localSpeaker) {\n              // Speaker was selected/unselected by you or automatically\n            },\n            onStateUpdated: function (localSpeaker, state) {\n              // Speaker state was updated\n            },\n          })\n          .then(function () {\n            console.log(\"RegisterLocalSpeakerEventListener Success\");\n          })\n          .catch(function () {\n            console.error(\"RegisterLocalSpeakerEventListener Failed\");\n          });\n\t\t \t\t  \n\t\t  \n        let user = makeid(5);\n        \n        let tokenEndpoint =\n          \"https://XXXXX.cloudfunctions.net/vidyo-token-generator?userName=\" +\n          user;\n\n        fetch(tokenEndpoint)\n          .then((response) => {\n            return response.json();\n          })\n          .then((data) => {\n            var token = data.token;\n            vidyoConnector.Connect({\n              host: \"prod.vidyo.io\",\n              token: token,\n              displayName: user,\n              resourceId: \"testRoom\", //Conference Name\n              onSuccess: function () {\n                console.log(\"Sucessfully connected\");\n              },\n              onFailure: function (reason) {\n                console.log(\"Error while connecting \", reason);\n              },\n              onDisconnected: function (reason) {\n                console.log(\"Disconnected \", reason);\n              },\n            })\n              .then(function (status) {})\n              .catch(function () {});\n          });\n      });\n      break;\n    case \"RETRYING\":\n      console.log(\"Retrying\");\n      break;\n    case \"FAILED\":\n      console.log(\"Failed\");\n      break;\n    case \"FAILEDVERSION\":\n      console.log(\"Failed Version\");\n      break;\n    case \"NOTAVAILABLE\":\n      console.log(\"Not Available\");\n      break;\n  }\n  return true;\n}\n\n</script>\n<div id=\"renderer\" style=\"position: absolute; top: 50px; left: 0px; bottom: 0px; z-index: 99; height: 100%; width: 100%;\"></div>\n<script src=\"https://static.vidyo.io/latest/javascript/VidyoClient/VidyoClient.js?onload=onVidyoClientLoaded&webrtc=true&plugin=false\"></script>\n\n```\n\n**GCP Cloud Function that issues a Token**\n\n```javascript\nexports.vidyoToken = (req, res) => {\n  const cors = require(\"cors\")();\n\n  cors(req, res, () => {\n    exportVidyoToken(req, res);\n  });\n};\n\nconst exportVidyoToken = async (req, res) => {\n  \n    if (!req.hasOwnProperty('query') && !req.query.hasOwnProperty('userName')) {\n        return res.status(400).send(\"Error: expected userName param.\");\n    }\n\n    jsSHA = require('jssha');\n    btoa = require('btoa');\n    fs = require('fs');\n    var tokenGenerated = false;\n   \n   \n    function generateToken(key, appID, userName, expiresInSeconds, vCard) {\n        var EPOCH_SECONDS = 62167219200;\n        var expires = Math.floor(Date.now() / 1000) + expiresInSeconds + EPOCH_SECONDS;\n        var shaObj = new jsSHA(\"SHA-384\", \"TEXT\");\n        shaObj.setHMACKey(key, \"TEXT\");\n        jid = userName + '@' + appID;\n        var body = 'provision' + '\\x00' + jid + '\\x00' + expires + '\\x00' + vCard;\n        shaObj.update(body);\n        var mac = shaObj.getHMAC(\"HEX\");\n        var serialized = body + '\\0' + mac;\n        return btoa(serialized);\n    }\n\n    let userName = req.query.userName\n    let expiresInSeconds = 99999;\n    let expiresAt = '';\n    let appID = process.env.APP_ID\n    let key = process.env.DEVELOPER_KEY\n    let vCard = ''\n\n    let token = generateToken(key, appID, userName, expiresInSeconds, \"\");\n    \n    return res.status(200).json({\n        'token': token,\n        'user': userName\n    });\n}\n\n\n\n\n```\n\n### WebRTC Options\n\nHere is a list of 3rd party service options for peer to peer streaming through a website or mobile app.\n\n1. [**Zoom**](https://zoom.us/plan/api) **- $100 for 4000 minutes ($0.025/minute)**\n   1. Pros - Large-scale, reliable company with solid, proven tech, robust API\n   2. Cons - Expensive, lots of features, could potentially restrict content\n2. [**Vidyo**](https://vidyo.io/) **- $3000 for 250,000 minutes ($0.012/minute)**\n   1. Pros - Simple html code to get started\n   2. Cons - Company is focused on medical, large-scale accounts, weak support\n3. [**EasyRTC**](https://easyrtc.com/) **- Free if you host your own**\n   1. Pros - Do it yourself, more control, free\n   2. Cons - Bare bones, no support\n4. [**Twilio**](https://www.twilio.com/docs/video) **Video - $0.0015/minute for peer-to-peer, $0.01/minutes for room features**\n   1. Pros - Great price for peer-to-peer only meaning you don’t get server-based room features&#x20;\n   2. Cons - Only 10 people per room max, no group room features like recording, messaging, etc\n5. [**AppRTC**](https://zoom.us/plan/api) **- Free, DIY**\n   1. Pros - The ultimate bare bones, google sample app for WebRTC\n   2. Cons - Online demo had maybe 1- 1.5s delay, probably harder to implement\n6. [**Agora.io**](https://www.agora.io/en/pricing/) **- $2.50 per/1,000 minutes ($0.0025/minute) for 720p**\n   1. Pros - No limit on rooms, inexpensive, lots of features such as broadcasting, solid codebase\n   2. Cons - Website not as enticing as Twilio but not bad either\n","category":"guides","service":"instances"},{"name":"How to Implement Cross-instance Content Sharing","url":"/instances/guides/how-tos/how-to-implement-cross-instance-content-sharing","objectId":"-Lb5Wlb3kHAhukfNn76d","item":[],"content":"# How to Implement Cross-instance Content Sharing\n\nWith cross satellite content sharing, you can dynamically feed content from one site to another. Take the footer on zesty.io for example:\n\n![footerexample](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-01-at-12-52-58-pm.png)\n\nThe 'From our Blog' section is pulling from blog.zesty.io's endpoint:\n\n![blogendpoint](https://wyp1jm.media.zestyio.com/screen-shot-2016-07-01-at-2-22-04-pm.png)\n\nWe can fetch the blogs content, loop through and display it on our footer.\n\n{% embed url=\"https://gist.github.com/Slunk32/0a6db5b353ce7f7640a4976ae779ddca\" %}\n\n","category":"guides","service":"instances"},{"name":"how-to-implement-cross-instance-content-sharing","url":"/instances/guides/how-tos/how-to-implement-cross-instance-content-sharing","item":[{"name":"Password Protect Web Engine Preview","url":"/instances/guides/how-tos/how-to-implement-cross-instance-content-sharing/password-protect-web-engine-preview","objectId":"-Ls3JQpaNYTCOPTlndUj","item":[],"content":"---\ndescription: Two methods to password protect the preview url for your content instance\n---\n\n# Password Protect Web Engine Preview\n\n### **Method 1:** **Hard Lock with Query Parameter**\n\nFirst Method is a hard lock, it requires a query parameter. Edit your loader file and wrap all the code in an if statement like this:\n\n{% code title=\"loader\" %}\n```javascript\n{{ if {get_var.pw} == 'test' || {site.env} == 'live' }}\n\n    {{ current_view }}\n\n{{ end-if }}\n```\n{% endcode %}\n\nWhat it does: if the site is now the live url, its check for query parameter `pw` to equal the set string. For example `https://xyz.preview.zestyio.com?pw=test` will load the page, but anything else will show a blank screen. This requires every preview url to have the `?pw=test` appended to the url.\n\n### **Method 2:** **Javascript Prompt with Memory**\n\nThis method is a soft lock because the page can be accessed with a curl request outside of a normal browser, or with a browser that has javascript disabled.\n\nThis method uses javascript to get and set cookies, and to fire off a prompt in your loader file. In your loader you check to see if the website is NOT live. If it is not live then it will lock you out of the page with a javascript prompt before the site loads. It will ask for a password. An incorrect password will redirect you away (line 18), a correct password will store a cookie which will bypass requesting a password as you browse the stage preview site for 30 days.\n\n{% code title=\"loader\" %}\n```markup\n{{ if {site.env} != 'live' }}\n\n<script>    \n    function getCookie(name) {\n        var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n        return v ? v[2] : null;\n    }\n    \n    function setCookie(name, value, days) {\n        var d = new Date;\n        d.setTime(d.getTime() + 24*60*60*1000*days);\n        document.cookie = name + \"=\" + value + \";path=/;expires=\" + d.toGMTString();\n    }\n    \n    function blockMe() { \n        var pw = prompt(\"Password\"); \n        if (pw != 'test') {\n            window.location = 'https://www.zesty.io';\n        } else {\n            setCookie('bypass', true, 30)\n        }\n    } \n    \n    if (getCookie('bypass') == null) {\n        blockMe();\n    }\n</script>\n\n{{ end-if }}\n\n{{ current_view }}\n```\n{% endcode %}\n","category":"guides","service":"instances"}],"content":"---\ndescription: Two methods to password protect the preview url for your content instance\n---\n\n# Password Protect Web Engine Preview\n\n### **Method 1:** **Hard Lock with Query Parameter**\n\nFirst Method is a hard lock, it requires a query parameter. Edit your loader file and wrap all the code in an if statement like this:\n\n{% code title=\"loader\" %}\n```javascript\n{{ if {get_var.pw} == 'test' || {site.env} == 'live' }}\n\n    {{ current_view }}\n\n{{ end-if }}\n```\n{% endcode %}\n\nWhat it does: if the site is now the live url, its check for query parameter `pw` to equal the set string. For example `https://xyz.preview.zestyio.com?pw=test` will load the page, but anything else will show a blank screen. This requires every preview url to have the `?pw=test` appended to the url.\n\n### **Method 2:** **Javascript Prompt with Memory**\n\nThis method is a soft lock because the page can be accessed with a curl request outside of a normal browser, or with a browser that has javascript disabled.\n\nThis method uses javascript to get and set cookies, and to fire off a prompt in your loader file. In your loader you check to see if the website is NOT live. If it is not live then it will lock you out of the page with a javascript prompt before the site loads. It will ask for a password. An incorrect password will redirect you away (line 18), a correct password will store a cookie which will bypass requesting a password as you browse the stage preview site for 30 days.\n\n{% code title=\"loader\" %}\n```markup\n{{ if {site.env} != 'live' }}\n\n<script>    \n    function getCookie(name) {\n        var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n        return v ? v[2] : null;\n    }\n    \n    function setCookie(name, value, days) {\n        var d = new Date;\n        d.setTime(d.getTime() + 24*60*60*1000*days);\n        document.cookie = name + \"=\" + value + \";path=/;expires=\" + d.toGMTString();\n    }\n    \n    function blockMe() { \n        var pw = prompt(\"Password\"); \n        if (pw != 'test') {\n            window.location = 'https://www.zesty.io';\n        } else {\n            setCookie('bypass', true, 30)\n        }\n    } \n    \n    if (getCookie('bypass') == null) {\n        blockMe();\n    }\n</script>\n\n{{ end-if }}\n\n{{ current_view }}\n```\n{% endcode %}\n","category":"guides","service":"instances"},{"name":"Setting up the x-default hreflang header","url":"/instances/guides/how-tos/setting-up-the-x-default-hreflang-header","objectId":"-MQoK1wzryLVSZXepKS0","item":[],"content":"---\ndescription: >-\n  Multinational and multilingual websites can be configured to point all\n  visitors to a default page through this Setting.\n---\n\n# Setting up the x-default hreflang header\n\n### Overview\n\nThe Settings section's i18n setting will help users manage internationalization and allow users to switch between different languages with the click of of the mouse. The purpose of this setting is to designate a specific path for the site to start on such as a page with a map that will allow users to choose their localized language.\n\nThe purpose of this head tag is to designate the path that you want _all_ users to be directed to no matter what their language is. For example, this is the page that your French-speaking users and American-English speaking users will see. Learn more about this with this [article from Google](https://developers.google.com/search/blog/2013/04/x-default-hreflang-for-international-pages). The page that is commonly designated has a map or links that allows users to select their locale. here. Hence, it's important to have languages setup and activated _before_ designating your the `x-default hreflang` path.\n\n### Before you begin&#x20;\n\nBefore you setup this path you should have a language added to your instance and have it activated. Languages can be added and activated via [API](https://zesty.org/getting-started/i18n-multi-language).\n\n### Setting the x-default hreflang header\n\n1\\. Identify which path you'd like to use as you default page\n\n2\\. Navigate to the Settings section, and under Instance settings select i18n\n\n![Navigate to Instance Settings to modify the I18n setting.](../../../.gitbook/assets/set-multilang-header.png)\n\n3\\. Add the path you chose in step 1 and click save.\n\n![Add the path that you want to designate and click Save.](../../../.gitbook/assets/multilang-header-path.png)\n","category":"guides","service":"instances"}],"content":"---\ndescription: >-\n  Favicons serve a branding and help users identify your site when you have\n  multiple browser tabs open.\n---\n\n# Adding a Favicon\n\n### Overview\n\nFavicons are typically 16x16 pixel icon that's shown in a browser's tabs and bookmark lists. They not only serve as branding, but they help users easily identify your site in bookmark lists and among multiple browser tabs.&#x20;\n\n![Favicon in browser tab.](../../../.gitbook/assets/favicon-example.png)\n\n### Steps to add a favicon\n\n1\\. From the Content Manger click on the globe icon in the upper left-hand corner to launch the favicon modal\n\n![Locate the favicon in the upper left-hand corner.](../../../.gitbook/assets/01-click-on-favicon.png)\n\n2\\. Click the +  in the favicon modal to launch the media modal.&#x20;\n\n![Click the plus icon to launch the media modal.](../../../.gitbook/assets/02-favicon-modal.png)\n\n3\\. From the media modal select an existing image or upload a new image by dragging new images into the modal. Then select the image you want by clicking on it and click the green **Load Selected** button.\n\n![A selected image in the media modal.](../../../.gitbook/assets/03-media-modal-load-selected-icon.png)\n\n4\\. With your favicon selected, Zesty will show you the favicon at different sizes. If you're satisfied then click the green **Save Favicon** button. _Note: you may need to scroll to see all sizes and **Save Favicon** button._\n\n![Favicon modal with different favicon sizes.](../../../.gitbook/assets/04-save-favicon.png)\n\nCongratulations! You've added a favicon. \\\nYour selected favicon will appear in the upper left-hand corner of the content manager where the globe icon was.&#x20;\n\n![Content manager dashboard with custom favicon.](../../../.gitbook/assets/05-favicon-added.png)\n\n### Updating an existing favicon\n\n1\\. Click on the favicon which is in the upper left-hand corner to launch the favicon modal (shown in step 1 above).&#x20;\n\n2\\. Click on the X in the corner of the existing favicon to remove it.&#x20;\n\n![](../../../.gitbook/assets/05-update-existing-icon.png)\n\n3\\. Then click on the plus to add a new image (show in step 2 above) to select a new favicon.\n","category":"guides","service":"instances"}],"content":"---\ndescription: A REST API for interacting with your instance resources.\n---\n\n# Instances API\n\nEvery instance created in Zesty.io can be interacted with over https using the instance [API](https://en.wikipedia.org/wiki/Application\\_programming\\_interface) (Application Programming Interface). When an instance is created it is assigned a [ZUID](https://github.com/zesty-io/zuid-specification) (Zesty Universal IDentifier). Using this ZUID the instances API can be requested with the following URL pattern.\n\n{% hint style=\"info\" %}\nComplete API Reference: [https://instances-api.zesty.org](https://instances-api.zesty.org)\n{% endhint %}\n\n```\nhttps://ZUID.api.zesty.io/v1/\n```\n\nThe instance API is implemented as a [REST](https://restfulapi.net/) (Representational State Transfer) architecture. It allows for [CRUD](https://en.wikipedia.org/wiki/Create,\\_read,\\_update\\_and\\_delete) (Create, Read, Update, Delete) operations on the requested instance.\n\nThere can be many consumers of the Instances API. For example; the [manager-ui](https://zesty.org/services/manager-ui) consumes your instances API to provide it's functionality. Another common example is making instances API requests as part of a [CI/CD](https://en.wikipedia.org/wiki/Continuous\\_integration) (Continuous Integration/Continuous Development) flow.\n\n### Access Permissions\n\nInstance access is restricted by a [roles & permissions](https://zesty.org/getting-started/roles-and-permissions) system. Accessing an instance with the API requires making an authenticated request. Which is a request that includes an `Authentication` header which contains either a [user session or an access token](https://zesty.org/apis/auth-api). Which one you use will depend upon your use case and needs.\n\n{% hint style=\"warning\" %}\nPublishing actions are _**not**_ supported with access tokens.\n{% endhint %}\n\n### Responses\n\nAll API responses are [JSON](https://www.json.org/json-en.html) (JavaScript Object Notation) format. Although JSON includes the JavaScript language name it is a common format consumable across many programming langauges. It acts as a standardized way to pass various data structures over http.\n\n## Tooling\n\n### Node SDK\n\nThe [node-sdk](https://www.npmjs.com/package/@zesty-io/sdk) is the primary tool for interacting with Zesty.io platform resources. It can be used to programmatically manage an instance.\n","category":"guides","service":"instances"},{"name":"Manager UI","url":"/instances/ui","objectId":"-Lb40gbXODZFRDWuK44Q","item":[],"content":"---\ndescription: >-\n  This brief overview will go cover the Zesty.io content management interface\n  such as the navigation items, Content Management home screen, the 'pages'\n  sidebar navigation, and much more.\n---\n\n# Manager UI\n\nPlease note that not all sections are available to each property. Depending on your options, configuration, or role you may see fewer sections. Sections that may not be available because of property specific options or configuration are noted with an asterisk(\\*).\n\n### Content\n\nThe Content section is also the dashboard for the Zesty.io Content Management interface. From this screen a user can view their analytics (if analytics have been configured), review a list of recently edited items, review recent platform updates, and access all of their pages and content sets, as well as export options for their blueprint.\n\n### Media\n\nThe Media section is where all of an instance's media is housed. Users can upload a variety of media file types including JPG, PNG, SVG, as well as Mp4, MOV, and PDF and much more. Media can be easily organized by creating groups. Once images are grouped, groups can be nested and files can be moved between groups. Files and groups can be moved by dragging and dropping them.\n\n### Editor\\*\n\nThe Editor section is where all the coding happens. HTML views, Less, SCSS, and/or CSS stylesheets, and JavaScript files are all located and editable here. Additionally users have access to a Parsley Code Bank, publish history, Media, Fonts, and access to the `<head>` for Meta tags, Favicon, and Doctype.\n\n### Leads\\*\n\nThe Leads section will be visible if the instance has a form that uses Zesty.io's `zcf` (Zesty.io Contact Form) and `zlf`(Zesty.io Leads Form) inputs. As forms are submitted the leads are viewable under the Leads section. Users are also able to export a CSV of leads by either a specific or custom date range.\n\n### Analytics\\*\n\nThe Analytics section shows an instance's visitor overview, top referrers, social referrers, and more from Google Analytics. In order to view analytics it must first be configured under the Schema section.\n\n### Health\n\nThe Health section allows users to manage redirects, create a Robots.txt, and run Zesty.io's site crawler tool to review (and fix if necessary) Broken links, Irregular links, and Confirmed links.\n\n### Schema\n\nThe Schema section will allow users to add content sets and pages, and to add fields to those items. Options for pages and content sets can be configured here.\n\n### Audit Trail™\\*\n\nThe Audit Trail™ section shows a list of all the changes that have been made to the property by user, and includes a time stamp. Events are also color coded depending on what action a user took.These articles will help you navigate the Zesty.io Content Manager interface with guides for content entry to accessing meta tags in the editor dive in and start building your instance with us.\n","category":"ui","service":"instances"},{"name":"ui","url":"/instances/ui","item":[{"name":"Home Dashboard","url":"/instances/ui/home-dashboard","objectId":"kl4vuovuyZNqSyB3lW2f","item":[],"content":"---\ndescription: Get a high level view of everything happening in your instance\n---\n\n# Home Dashboard\n\n<figure><img src=\"../../.gitbook/assets/Mature Dashboard (1).jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n## What is Home?&#x20;\n\nHome in Zesty is the best way to get a high level view of everything happening in your instance. &#x20;\n\n**From here you can:**&#x20;\n\n* View key performance metrics which enable you to monitor the health of your instance\n* Open recently worked on content items, code files, and models\n* Create new content items, code files, and models and upload new media files\n* Jump to resources such as our product docs, release notes, and community channels\n\n## How to get started with Home?&#x20;\n\nWe recommend you get started by learning more about the home interface.&#x20;\n\n### View the High Level Metrics for your instance\n\nHere you can view key performance metrics such as the total web requests, media requests, items scheduled, and items published and see how they have changed for the last 30 days. These will help you make more informed business decisions and also help ensure you keep your team aligned with your business goals.&#x20;\n\n<figure><img src=\"../../.gitbook/assets/2.jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n### Quickly Create New Content Items, Code Files, Models, and Upload Files\n\nWant to start working on something new in your Zesty instance? Simply click on the plus button in the top right hand corner and choose from the 4 options available.\n\n<figure><img src=\"../../.gitbook/assets/Mature Dashboard-1 (1).jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n### Open Recently Worked on Content Items, Code Files, and Models\n\nBelow the cards are a list of your instance's most recently worked on content items, code files, or models. To open them, simply hover and click on the item you want to view.\n\n<figure><img src=\"../../.gitbook/assets/4.jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n### Learn Zesty using our Resources\n\nIf you're actively working on building or growing your instance the resources card in the right can be extremely useful for you. From the Resources Card you can access our&#x20;\n\n* Documentation where you can learn about getting started, our platform, and APIs\n* Release Notes to learn about most recent releases\n* Community Channels on Slack, Youtube, and Discord where you can ask questions and get support from other people building with Zesty\n\n<figure><img src=\"../../.gitbook/assets/5.jpg\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Content","url":"/instances/ui/content","objectId":"-Lb42yqSIC0ACmDuY-Si","item":[],"content":"---\ndescription: >-\n  The content section is often the most used interface in Zesty.io. As the name\n  suggests this section is where an instance's content is viewed, created,\n  edited, and deleted.\n---\n\n# Content\n\n### Overview\n\nThe Content section is generally split into two sections. The left-hand column is the content structure list and it allows users to navigate through their content; it is always available throughout this section. The right-hand section is the main part of the page and its display changes depending on what has been selected. The four types of views are\n\n* Dashboard&#x20;\n* Table View\n* Create New Item/Table Entry View\n* Item and Table Entry Editing View\n\n### Dashboard\n\nThis is the initial view when you first load the Content section and launch the content manager. The default dashboard gives you jumplinks to popular sections and their docs, as well as customized statistics and to links to files you're working on.&#x20;\n\n![Content section dashboard.](../../../.gitbook/assets/content-homescreen.png)\n\n### Table-listing View\n\nThis is for multi-page and headless models to show a list of all the entries in the content set. Clicking into an item brings up the Entry Editing view and clicking the blue \"+ \\[Add New Item]\" button brings up the Create New Item/Table Entry view. You can search, filter,  and update sort order through the table.\n\n![Table View for multi-page and headless models.](<../../../.gitbook/assets/02-content-table-listing-view (1).png>)\n\n### Create New Item/Table Entry View\n\nThis view is accessed by clicking the blue \"+ \\[Add New Item]\" button at the top of the table and through the white \"Create New Item\" dropdown near the top of the left-hand content structure column.&#x20;\n\nThis view is similar to the Item/Entry Editing view except all fields are all blank or default (depending on field type) and the right-hand publishing status bar is absent.&#x20;\n\nOnce a user begins to enter content, the grayed out \"Create New Item\" button in the upper right-hand corner will turn green and allow the user to save and create their new item/entry.\n\n![New table entry view.](<../../../.gitbook/assets/03-content-new-item-table-view (1).png>)\n\n### Item and Entry Editing View\n\nThese views show field(s) with the current content value(s) in the main section and the publishing status bar, which includes publishing history and status, listed status, drafting history, and more, to the right.\n\n![Item and entry editing view.](../../../.gitbook/assets/04-content-item-edit-view.png)\n","category":"ui","service":"instances"},{"name":"content","url":"/instances/ui/content","item":[{"name":"Adding and Managing Content","url":"/instances/ui/content/adding-and-managing-content","objectId":"-Lb43HYLUZ6Yc35jocpC","item":[],"content":"---\ndescription: >-\n  Once the setup for content models and fields is complete, you can add content\n  entries and fill those fields with text, images, selections, files, etc.\n---\n\n# Adding and Managing Content\n\n### Accessing Content\n\nTo edit content in Zesty.io use the Content section in the Instance Interface for the instance that you are editing. The left hand column contains all of the pages, page groups, and data sets from the content structure that have been set up. You can also click the magnifying glass in the upper right hand corner of the left column, or type ctrl/cmd + shift + k to pull up a global search modal. As you start typing, results matching your input will begin to appear as selections to click into.\n\n![The left-hand navigation bar with all of your content is outlined here.](../../../.gitbook/assets/accessing-content.png)\n\n### Updating Content\n\nOnce you have opened up the entry you are looking for, you will see the fields available for editing the content for that entry. Make the changes to the corresponding field that need editing, then save as a draft. If you are editing a page or item in a page group, you can use the preview link to jump to the site and preview your changes. If you are editing a data set entry, navigate in the stage site or to the endpoint where the content is used and preview your changes. Once the changes are approved to go to the live site, use the publish or schedule options to control when your content is deployed.\n\n### Adding New Entries From a Template\n\nTo add new pages click the \"+ Add New Item\" in the left column. A list of available pages and page groups will display. Click the type of page you are tying to add.\n\nTo add new entries to a page group or data set click on the set you are looking for and a table of all the entries will display. On top of the table on the left will be a green \"+ Add New\" button. Click that to create a new entry.\n\nIn either case a new page with blank fields for that type of page will open. Fill out the fields, or at least the required fields and create the page as a draft or published immediately.\n","category":"ui","service":"instances"},{"name":"Assigning Publish and List Status","url":"/instances/ui/content/assigning-publish-and-list-status","objectId":"-Lb43t3FyC0CQf6MYI70","item":[],"content":"---\ndescription: >-\n  The Publish and List Statuses affect the visibility and accessibility of a\n  content entries on the preview and live environments.\n---\n\n# Assigning Publish and List Status\n\n### Summary\n\nA practical way to think about publish and list statuses and the difference between them is that publish status only affects the live domain and list status is global (live and preview). An unlisted entry will disappear from the live and preview environments. However, an unpublished entry will disappear from the live environment only.\n\nKeep reading to learn more about how this works .\n\n### Overview\n\nThere are two primary statuses, the publish status and the list status. The list status controls whether or not a content entry is accessible in Parsley calls in both the preview and live environments. The publish status controls whether a page is accessible in any way on the live environment, and which version of the content is live. Unpublished pages will be a 404 page at the URL path on the live site and will functionally be unlisted for the live site.\n\n### List Status\n\nWhen an entry is set to Listed it is accessible via parsley calls. This includes each loops iterating through the Content Model the entry belongs to, direct set references with `filter/first/last/random`, and auto navigation calls, like `navigation`, `sectionlinks`, and `breadcrumbs`.\n\nAn unlisted entry would not be accessible to any of those calls. An unlisted page would still be accessible via it's direct link, except on the live site, if it is also set to unpublished.\n\n### Publish Status\n\nWhen an entry is published, the most recently published draft for that entry is accessible to the live site. If the entry is a page, it will be accessibly through it's direct link. If the entry is both published and listed it will be accessible on the live site through parsley calls. When an entry is unpublished, it is not accessible on the live site.\n\nAn unpublished page will 404 in the live environment and all unpublished entries are not accessible through parsley in the live environment. Publish status has no affect on the content in the preview environment.\n\nWhen a draft of an entry is scheduled, the current publish status will remain until it's scheduled time to be published in the interface. Once the scheduled time occurs, the entry will be set to published if it's not already and the content assigned to the draft that's scheduled will be used in the live environment.\n\n#### Possible Publish and List Statuses\n\n* **Published and Listed:** The content entry will be accessible via parsley calls and via direct url in both preview and live environments\n* **Published and Unlisted:** The content entry will NOT be accessible via parsley calls in both preview and live environments but will be accessible via direct url in both preview and live environments.\n* **Unpublished and Listed:** The content entry will be accessible via parsley calls and via direct url in the preview environment only but will NOT be accessible via parsley calls nor via direct url in the live environment.\n* **Unpublished and Unlisted:** The content entry will not be accessible via parsley calls in the preview or live environments but will be accessible via direct url in the preview environment only.\n","category":"ui","service":"instances"},{"name":"Canonical Tags","url":"/instances/ui/content/canonical-tags","objectId":"-Lb4AgHHPzmeoTbIVhGb","item":[],"content":"---\ndescription: Learn about our different canonical tag settings and how to enable them.\n---\n\n# Canonical Tags\n\nCanonical tags help search engines understand authoritative links and can help prevent duplicate content issues.\n\nYour site can automatically generate canonical tags.\n\n## Enabling Canonical Tags\n\n1. Go to the \"Schema\" section in the content management interface.\n2. Go to the \"Site Settings\" sub-tab\n3. Select \"SEO\" from the left sidebar\n4. Click \"Enable Canonical Tags\"\n\n## Canonical Tag Modes\n\nEach page has its own canonical tag settings (though the default setting is typically appropriate).\n\n* **Off** — No canonical tag will be rendered\n* **On** (Default) — This automatically generates a self-referential canonical tag and removes query parameters\n* **On – Allow certain parameters** — This also automatically generates a self-referential canonical tag, but allows the query parameters you list to be included\n* **On – Custom Path** — This generates the first part of the URL (including the correct http/https and www/non-www setting), but uses the custom path you specify\n\n## URL Case Sensitivity\n\nCanonical tag outputs will follow case sensitivity of URL paths. Uniformity in case output is standard practice as these URLs may get indexed separately and affect SEO. For further information please refer to: [https://tools.ietf.org/html/rfc4343](https://tools.ietf.org/html/rfc4343)\n","category":"ui","service":"instances"},{"name":"Content Version Control","url":"/instances/ui/content/content-version-control","objectId":"9gY3BR1fKXKrlQpBw9ib","item":[],"content":"---\ndescription: >-\n  Content added to Content Item's is version controlled, allowing the user\n  create, update and access previous versions of stored content.\n---\n\n# Content Version Control\n\n### Content Version Control\n\nAll content added within Content Items is version controlled. This enable the user to compare, track, access and revert changes made within the item. The versions also provide the ability to have one version published while other drafts are created and updated.&#x20;\n\nWith each save in a Content Item, a new version is created. These versions become available to the user in the versions dropdown. The dropdown is located in the Content Item Controls.&#x20;\n\nSelecting a version will display that version's draft. After the selected version is displayed, the user will have the ability to:\n\n#### Revert to the Selected Draft:\n\nOnce a previous version is selected, the save option will become available to the user. Saving the selected draft will create a current version with content that has been reverted to the previous versions content state.&#x20;\n\nThis action does not remove the previous version that was selected, it remains intact  and available to be selected again. Zesty not only keeps the previous version intact as well as any versions that may have been between the previous version and the current version. This effectively ensures that no prior versions of content are inaccessible.\n\n![Selection of a previous version followed by a save will successfully revert the changes to the prior version.](../../../.gitbook/assets/revert\\_vers.png)\n\n![The save option will become available immediately after selection of the previous version desired.](../../../.gitbook/assets/prev\\_vers\\_save.png)\n\n#### Edit Draft:\n\nEditing the content of the selected prior draft and saving the updates will create a new current version. The previous version that was originally selected remains intact and labeled under its original version number. This enables both the new and previous version to be available for publishing at the user discretion.\n\n![With the previous version selected edits to the draft can be made. After the desired changes have been made, saving the draft effectively creates anew version while leaving the prior version intact.](../../../.gitbook/assets/prev\\_vers\\_save.png)\n\n![All versions will become available in the version selection dropdown. The prior version remain in its original state. The newest version will contain the prior version content and any new edits or content added.](../../../.gitbook/assets/new\\_and\\_old.png)\n\n","category":"ui","service":"instances"},{"name":"CSV Import","url":"/instances/ui/content/csv-import","objectId":"-Lb44vg1eWDA0WfmRRY6","item":[],"content":"---\ndescription: Save time entering your content and learn how to upload a CSV.\n---\n\n# CSV Import\n\nTo use the CSV import tool, go to the top level table view of any content set. Click the gray \"Import CSV\" button located on the right side of the table's toolbar and the next screen will prompt you to choose a CSV file to import. Click the gray Choose File button and select the CSV that you would like to import. Once that is uploaded you will need to align your data's column headers with the reference names of your content set. Once they are aligned, click import and Zesty.io will reload the table view with all your new data.\n\nPlease note that if your data includes images it's quickest to upload all the images to the Media section first. Once your images are imported you can create a column that lines up with your media's IDs which are located on a per-file basis in the Media section.\n\nIf there is any import errors Zesty.io will show notify users which row(s) were skipped. The data in the skipped rows can be corrected and re-imported.\n","category":"ui","service":"instances"},{"name":"Editing Entry Details","url":"/instances/ui/content/editing-entry-details","objectId":"-Lb43a7g_s3Uu2qPnTLn","item":[],"content":"---\ndescription: >-\n  The Entry Editing view in the Content Tab has all of the settings and fields\n  that control meta information, parenting, the visibility and publish status,\n  and more.\n---\n\n# Editing Entry Details\n\n### Overview\n\nWhen viewing any specific entry in the Content Section, there is a consistent structure. The view is split into three columns. The left column is the same as all views in the Content Section, the Content Structure List. The center column is the Content Entry area and the right column is the Publishing Control area.\n\n### Content Entry (Center Column)\n\nAcross the top of the center column is a link to go back to the previous page, a button to save a draft and if the entry is a page, a button to reveal the page settings. Below are the fields specific to the Content Model you are editing. If the entry is a Single, there are consistent fields and options in the Settings area in the center column. To reveal these settings click the \"Open Settings\" button in the header of the center column. Once revealed, you will see options for controlling the url path, the parenting, the meta information, and other SEO related settings. By default these will be set at the time of the Single creation based on the entered content.\n\n### Publishing Control (Right Column)\n\n_This section may look different depending on your role, and the account workflow settings._\n\nTo better understand the functions of the different buttons and options in this section be sure to view the article on [Publish and List Status](https://app.gitbook.com/editing-publish-and-list-status/).\n\nAt the top of the right column is current publish status for the Single, if published, the current published version number will display, otherwise it will say \"Unpublished.\" In that same section are options to publish the current draft to live, to schedule the current draft, or to unpublish the page. Below that, you can see the current draft version being worked on, and quick links to view the page, if the entry is a page, in both the preview and live environments, and Open Content Model or Open Code Editor to edit either one of these options pertaining to this Content Model. The last button in this section opens up a modal to submit a workflow request, which will send an email to any selected emails which have access to the instance with a link to the content entry being viewed.\n\nThe next section on the right column handles the list status of the entry, to determine wether or not this entry is available in Parsley each loops and navigation calls. This setting affects both the current draft in the preview environment and the published version in the live environment.\n\nThe next two sections are a brief audit trail of the publishing and drafting histories. The section after that, if this entry is a page, allows you to share the link on social platforms. And lastly, is an option to delete this content entry. There is no way in the interface to recover a deleted entry, and a deleted entry can affect other content entries that are related to it or parented to it. Before deleting, try unpublishing and unlisting the entry first to make sure you are aware of all the changes that will occur.\n","category":"ui","service":"instances"},{"name":"Globals","url":"/instances/ui/content/globals","objectId":"-Lb44c1EF026Q2mHwSQs","item":[],"content":"---\ndescription: Globals are a unique Content Model included with every Zesty.io instance.\n---\n\n# Globals\n\n### Overview\n\nGlobals (formerly Content Clippings) is a Content Model designed to store content not assigned to any one page or other content entry. Often these content pieces are used site wide or control settings and default behavior.\n\n### Default fields\n\nGlobals comes default with three fields: Site Name, Site Logo, and Footer Text. Site Name has a reference name of `site_name` and it is a text field. Site Logo is an image field with a reference name of `logo`. And Footer Text is another text field with a reference name of `footer_text`. These fields can be deactivated, renamed, reordered, or otherwise edited. They are not required.\n\n### Assigning fields and entering content\n\nYou can assign fields and enter content similar to how you would any custom content set. To add fields, find `Globals` under Headless in the Schema section. To edit content, find `Globals` near the bottom of the Content Structure List under Headless in the Content section.\n\n### Referencing in Parsley\n\nTo reference a field in Globals use `{{ globals.field_name }}` where `field_name` is replaced with the reference name to the field you want to access.\n","category":"ui","service":"instances"},{"name":"Publishing and Scheduling","url":"/instances/ui/content/publishing-and-scheduling","objectId":"-Lb4zPMf5179rUDs721_","item":[],"content":"# Publishing and Scheduling\n\n## Publishing Specification & Documentation for Zesty.io Content Items\n\nPublishing tables tell Zesty.io content items when to display specific versions, or when to stop resolving.\n\nAll dates are posted with time in UTC. Relative locality must be calculated by the interface that displays the data.\n\n### There are two type of schedule publish entries\n\n**An Indefinite publish**\n\nGoes online past the takeOnline date, and never expires. It always available through the Instant Content JSON API or Zesty.io Web Engine once the takeOnline date becomes the past.\n\n| VersionZUID |   takeOnline   | takeOffline |\n| ----------- | :------------: | :---------: |\n| 9-5xx-xxx   | 11/09/18 05:00 |     NULL    |\n\n**Example Payload to be online forever**\n\n```\n{\n    itemZuid: '7-XXX-XXXX',\n    versionZuid: '9-XXX-XXXX',\n    takeOnline: 11/05/18 05:00\n}\n```\n\n_takeOffline is omitted_\n\n**A Limited Publish Entry**\n\nGoes online past the takeOnline date, and expires past the take offline. It is not available through the Instant Content JSON API or Zesty.io Web Engine out side of the dates.\n\n| VersionZUID |   takeOnline   |   takeOffline  |\n| ----------- | :------------: | :------------: |\n| 9-4xx-xxx   | 11/05/18 05:00 | 11/08/18 05:00 |\n\n**Example Payload to be online for 72 hours**\n\n```\n{\n    itemZuid: 7-XXX-XXXX,\n    versionZuid: 9-XXX-XXXX,\n    takeOnline: 11/05/18 05:00,\n    takeOffline: 11/08/18 05:00\n}\n```\n\n**A Take Offline Publish Entry**\n\nGoes online past the takeOnline date, and expires past the take offline. It is not available through the Instant Content JSON API or Zesty.io Web Engine out side of the dates.\n\n| VersionZUID |   takeOnline   |   takeOffline  |\n| ----------- | :------------: | :------------: |\n| 9-4xx-xxx   | 11/05/18 05:00 | 11/08/18 05:00 |\n\n**Example Payload to be online for 72 hours**\n\n```\n{\n    itemZuid: 7-XXX-XXXX,\n    versionZuid: 9-XXX-XXXX,\n    takeOnline: 11/05/18 05:00,\n    takeOffline: 11/08/18 05:00\n}\n```\n\n### A Publishing Table is created for each content item\n\nTables can be set to teeter content, this can be used for promotions, holiday messaging, announcements, or A/B testing.\n\n**Sample table for teetered content:**\n\n| VersionZUID |   takeOnline   |   takeOffline  |\n| ----------- | :------------: | :------------: |\n| 9-5xx-xxx   | 11/09/18 05:00 |      NULL      |\n| 9-4xx-xxx   | 11/05/18 05:00 | 11/09/18 05:00 |\n| 9-3xx-xxx   | 10/10/18 05:00 | 11/05/18 05:00 |\n| 9-1xx-xxx   | 10/02/18 05:00 | 10/10/18 05:00 |\n| 9-2xx-xxx   | 09/10/18 05:00 | 10/02/18 05:00 |\n| 9-1xx-xxx   | 09/01/18 05:00 | 09/10/18 05:00 |\n\nPublishing tables are complicated because existing data on the table may reject specific submissions. We will go through this scenarios.\n\n### Normal Accepted Scenarios\n\n**Scenario 1: \\[First Publish Now]** Payload has a present timestamp, with no intersecting. An entry is made with the current timestamp for takeOnline and takeOffline is null.\n\n| VersionZUID | takeOnline | takeOffline |\n| ----------- | :--------: | :---------: |\n| 9-5xx-xxx   |  11/09/18  |     NULL    |\n\n**Scenario 2: \\[Future Publish]** Payload has a future date; there is a previous publish indefinite publish entry\n\n| VersionZUID | takeOnline | takeOffline |\n| ----------- | :--------: | :---------: |\n| 9-6xx-xxx   |  11/09/18  |     NULL    |\n| 9-5xx-xxx   |  11/09/18  |     NULL    |\n\n### Abnormal Mixed Acceptance Scenarios\n\nScenario 1: Date Intersects/Overlaps existing dates \\[REJECT]\n\nScenario 2: Dates to take online and offline match \\[REJECT]\n\nScenario 3: Date is in the past for either take online or offline \\[REJECT]\n\nScenario 4: Take online date is after Take off offline date \\[REJECT]\n\nScenario 5: Take offline future date is set, but not take online \\[VARIES] Case 1 \\[ACCEPT]: If the a NULL entry exists for takeOffline, update that null entry Case 2 \\[REJECT]: If entries all have takeOffline set, reject Case 3 \\[REJECT]: If the NULL takeOffline exists, but the date submitted is before the takeOnline of that entry, reject.\n\nScenario 6: \\[Wedge] Only takeOnline date submitted, no takeOffline, with other records set to go online a head of it \\[ACCEPT] Case 1: TakeOnline is set to 10/02/18, and there is a record to go online for 10/10/18, new record entered with takeOnline as 10/02/18 and a takeOffline that matches the existing records takeOnline\n","category":"ui","service":"instances"},{"name":"Sitemap Priority","url":"/instances/ui/content/sitemap-priority","objectId":"-Lb48tiDrM9odeD96l1t","item":[],"content":"---\ndescription: Learn how to manage sitemap priority for your content entries.\n---\n\n# Sitemap Priority\n\nA sitemap is a file which lists all of your sites urls and their priorities. These are used to inform search engines what URLs on your site are available for crawling. This will not guarantee that a page is indexed by a crawler but provides hints to the crawler on how best to crawl your site.\n\nZesty.io automatically generates a `sitemap.xml` for every site and automatically sets url crawl priority. All sitemaps are located at `https://www.your-domain/sitemap.xml`.\n\nEach single-page and multi-page item has its own sitemap priority which is located in the item's Meta tab. From the Content section, select your item, and then from the content editing view select Meta and the sitemap priority is the second to the last field on the page.\n\n![Content editing view Meta tab.](../../../.gitbook/assets/02-site-map-priority.png)\n\nThis dropdown will allow you to set the page's numerical priority, including an option to remove your page from the sitemap.\n\n![Sitemap priority dropdown.](<../../../.gitbook/assets/Screen Shot 2021-01-15 at 4.52.39 PM.png>)\n\nGoogle also provides great resources for those looking to [understand more about sitemaps](https://support.google.com/webmasters/answer/156184?hl=en\\&ref\\_topic=4581190).\n","category":"ui","service":"instances"},{"name":"Meta Fields","url":"/instances/ui/content/meta-fields","objectId":"-Lb48d5x8uAihY2ut9es","item":[],"content":"---\ndescription: >-\n  Learn how to add meta information including keywords, titles, and descriptions\n  to your content entries.\n---\n\n# Meta Fields\n\n### Overview\n\nThere a couple places to add meta information in Zesty.io. Pages (single pages and page groups) have meta fields in their settings for link, title, description, and keywords. If you need to add custom meta tags those can be added in the editor utilities under the Editor section.\n\n![An item's meta information shown in the Content section.](../../../.gitbook/assets/content-meta-data.png)\n\n### Meta Information for Single Page and Page Group\n\nTake the following steps to access and edit your page's meta settings: 1. From the Content section select the page or page group that you'd like to edit.\n\n* if your page is in a page group then select the page group and then open the page you'd like to edit from the table view.&#x20;\n* Click the gray Open Settings button. &#x20;\n* Inside the settings drawer you'll find meta fields for Navigation Link Text, Meta Title, Meta Description, and Meta Keywords. Update whichever setting(s) you want to change.\n* Save or publish your draft. &#x20;\n\nThe meta title and meta description are values that search engines use when displaying the page in search results. Therefore it's very important to provide concise and meaningful titles and descriptions for your content. These titles and descriptions will give your site's visitors an indication of what to expect when they view your page.\n\nPlease note that keywords are not typically highly valued by search engines and that could be used against your site's ranking. Please use them with caution. Read more about them [here](https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html).\n","category":"ui","service":"instances"},{"name":"Workflow Request","url":"/instances/ui/content/workflow-request","objectId":"4ACgPF7qKJrAVcPgwszy","item":[],"content":"---\ndescription: >-\n  Workflow Requests are a feature built into every Content Item, allowing the\n  direct request of content review.\n---\n\n# Workflow Request\n\n### Workflow Request in Content Items\n\nThe Workflow Request feature provides user with the ability to a request review and approval of content. This streamlines the approval and publishing of content by allowing content editors to file a request, via email to a desired Instance User, with the link and direct access to the content that was updated.&#x20;\n\nThe Workflow Request is located in the Content Item's Details Panel. Once selected, a form is displayed that has a selection of all users assigned to the Instance, all fields included in the Content Item and a message form to provide any additional instructions.&#x20;\n\nSubmitting the form sends an email to the selected recipient's associated user email address. The email provides the requester's name, the list of fields to be reviewed, the requesters message from the form and direct link to the Content Item to be reviewed. &#x20;\n\n![The Workflow Request is a dropdown form located in the Details Panel on the right side of every Content Item](<../../../.gitbook/assets/work\\_drop (2).png>)\n\n![The form includes all Instance associated users, field selections and a message form for additional instructions.](<../../../.gitbook/assets/new\\_work\\_form (4).png>) ![The email contains the requesting Users name, the fields selected for review, additonal message and the direct link to the Content Item itself.](../../../.gitbook/assets/new\\_work\\_email.png)\n\n### Leveraging the Workflow Request\n\nThis feature empowers users to continue work progression, including users with a restricted role or permission. For these users the ability to request approval or publishing directly from the Content Item needing to be reviewed, while providing the reviewee with all the necessary details and links, eliminates the need for additional steps.&#x20;\n\nUtilizing this feature enables the Instance's owner to limit roles and permissions without losing efficiency. Users can be added as content editors only, giving the owner complete control over content approval and publishing capabilities.&#x20;\n","category":"ui","service":"instances"}],"content":"---\ndescription: >-\n  Once the setup for content models and fields is complete, you can add content\n  entries and fill those fields with text, images, selections, files, etc.\n---\n\n# Adding and Managing Content\n\n### Accessing Content\n\nTo edit content in Zesty.io use the Content section in the Instance Interface for the instance that you are editing. The left hand column contains all of the pages, page groups, and data sets from the content structure that have been set up. You can also click the magnifying glass in the upper right hand corner of the left column, or type ctrl/cmd + shift + k to pull up a global search modal. As you start typing, results matching your input will begin to appear as selections to click into.\n\n![The left-hand navigation bar with all of your content is outlined here.](../../../.gitbook/assets/accessing-content.png)\n\n### Updating Content\n\nOnce you have opened up the entry you are looking for, you will see the fields available for editing the content for that entry. Make the changes to the corresponding field that need editing, then save as a draft. If you are editing a page or item in a page group, you can use the preview link to jump to the site and preview your changes. If you are editing a data set entry, navigate in the stage site or to the endpoint where the content is used and preview your changes. Once the changes are approved to go to the live site, use the publish or schedule options to control when your content is deployed.\n\n### Adding New Entries From a Template\n\nTo add new pages click the \"+ Add New Item\" in the left column. A list of available pages and page groups will display. Click the type of page you are tying to add.\n\nTo add new entries to a page group or data set click on the set you are looking for and a table of all the entries will display. On top of the table on the left will be a green \"+ Add New\" button. Click that to create a new entry.\n\nIn either case a new page with blank fields for that type of page will open. Fill out the fields, or at least the required fields and create the page as a draft or published immediately.\n","category":"ui","service":"instances"},{"name":"Media","url":"/instances/ui/media","objectId":"-Lb4DVVNnhSYQJjrNIh0","item":[],"content":"---\ndescription: Upload, store, and organize files such as images, videos, and more\n---\n\n# Media\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-26 at 3.22.55 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## What is Media?\n\nMedia (also known as a Digital Asset Manager), is a feature through which you can upload, store, share, and organize files such as images, videos, PDFs, etc. You can then access and use these files in content on your website or app to create richer content experiences.**The key benefits of using the Media app are:**\n\n1. **Single Source of Truth for Files:** All your files can be uploaded, searched, managed, and viewed from one place.\n2. **Multiple Image Output Formats:** While we always store image assets in their original state, we have an \"On-the-fly\" image editor to access a myriad of output formats and optimizations, and alterations you can choose to best fit your use case.\n\n## How to Get Started with Media?\n\nWe recommend you get started by watching the video below or following along with the steps shared below.&#x20;\n\n{% embed url=\"https://www.youtube.com/watch?v=SJJna8s4CZ0&t=23s&ab_channel=ZestyioContentPlatform\" %}\nw\n{% endembed %}\n\n### Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-26 at 3.24.45 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: See All Your Uploaded Files in the \"All Media\" tab\n\nYou can now see all the files stored in your instance from the \"All Media\" tab.&#x20;\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-26 at 3.45.33 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Organize your work & files with Folders\n\nTo better organize your files, you can create folders and sub-folders from the media sidebar. To get started with folders, you can learn more about how to:\n\n1. [Create Folders](folders/create-folders.md)\n2. [Create Sub Folders](folders/create-sub-folders.md)\n3. [Find and View Folders](folders/find-and-view-folders.md)\n4. Do miscellaneous tasks such as: [Rename Folders](folders/rename-folders.md), [Hide Folders](folders/hide-folders.md)\n\n<figure><img src=\"../../../.gitbook/assets/2022-10-26 15.53.06 (1).gif\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Upload Files\n\nYou can upload files directly from your computer simply by clicking on the upload button in the top right hand corner or by dragging and dropping them into Media. To learn more about how to upload files [go here](files/upload-files.md).\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.02.26 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 5: Preview Files\n\nYou can see all your files in the form of cards in All Media or in a folder. To see the full preview of a file, simply click on the cards. From here you can:\n\n1. [Get File ZUID](files/get-file-zuid.md)\n2. [Rename a File](files/rename-file.md)\n3. [Move a File](files/move-file.md)\n4. [Use \"On-the-Fly Editor\"](files/on-the-fly-editor.md)\n5. [Delete File](files/delete-file.md)\n\n<figure><img src=\"../../../.gitbook/assets/2022-10-26 16.12.38.gif\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 6: Search Files & Folders\n\nTo quickly find a file or folder, simply click on the search bar in the left Media sidebar, type in your query, and hit enter. To learn more about how to search for files and folders [go here.](search-files-and-folders.md)\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.13.36 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## FAQ\n\n### How do I create EcoBins?\n\nInstances can have EcoBins which allow media to be shared across instances. Contact [support@zesty.io](mailto:support@zesty.io) if you're interested in an EcoBin to share media across your instances.\n\n### Have a feature request or feedback for the Media App?\n\nYou can share it [here](https://docs.google.com/forms/d/e/1FAIpQLSd4D42GO8DXB5\\_o3u2bq3A8GwpTFPd80Un1kDpxL5xSgqECVQ/viewform).\n","category":"ui","service":"instances"},{"name":"media","url":"/instances/ui/media","item":[{"name":"Files","url":"/instances/ui/media/files","objectId":"pdRNAt26oi6k0VPAf1NV","item":[],"content":"# Files\n\nIn Zesty, you can upload a variety of files such as PNGs, JPEGs, SVG, PDF, MOV, Mp4, GIF, PDFs, and more. Once you upload a file to Media anyone in the instance can preview it, get important information (such as the name, ZUID, URL), make quick edits using our \"On-The-Fly\" editor, and use it in content. The below pages in this section document how you can do the same.&#x20;\n\n**Learn how to:**&#x20;\n\n1. [Upload Files](upload-files.md)\n2. [Preview Files](preview-file.md)\n3. [Use \"On-the-Fly Editor\"](on-the-fly-editor.md)\n4. [Get File URL](get-file-url.md)\n5. [Get File ZUID](get-file-zuid.md)\n6. [Rename a File](rename-file.md)\n7. [Move a File](move-file.md)\n8. [Delete File](delete-file.md)\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.30.48 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"files","url":"/instances/ui/media/files","item":[{"name":"Upload Files","url":"/instances/ui/media/files/upload-files","objectId":"fijnxfbWIz8JfjifZQcw","item":[],"content":"# Upload Files\n\n**Files can be uploaded into Zesty in two ways:**\n\n1. Using the Upload Button (in the top right hand corner)\n2. By dragging and dropping images into Media\n\nSee the instructions below for more details._If you're looking for information on how to loop through multiple images in a single field refer to the_ [_Image Modifiers article_](https://zesty.org/services/web-engine/introduction-to-parsley/image-modifiers#looping-through-multiple-images-in-a-media-field)_._\n\n## Method 1: Using the Upload Button\n\n### Step 1: Go to the Media App\n\nIn the left side navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to upload images to a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Go to the Top Right Hand Corner & Click on Upload\n\nThis will trigger a file explorer pop-up.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.43.47 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Select the File/s from your File Explorer that you wish to upload\n\nLocate the media that you wish to upload on your local machine and select every file that you wish to upload. You can upload all types of files such as SVG, PDF, MOV, Mp4, GIF, JPEG, PDF, and more.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.44.27 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Preview your upload, write appropriate \"alt text\" (if necessary), and click \"Done\" once finished\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.45.10 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 5: Your files are now uploaded\n\nNow you can simply click on the file to [preview](preview-file.md) it and get more information about it such as it's [ZUID](get-file-zuid.md), URL, Name, etc.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.45.54 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Method 2: Drag & Drop Images into Media\n\n### Step 1: Go to the Media App\n\nIn the left side navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to upload images to a specific folder, then please also select the folder you wish to upload.\n\n\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Select the File/s on your computer you wish to upload to Media\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.47.13 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Drag & drop these files into Media\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.48.03 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Preview your upload, write Appropriate Alt Text (if necessary), and click \"Done\" once finished\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.48.54 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 5: Your files are now uploaded\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.50.30 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Preview File","url":"/instances/ui/media/files/preview-file","objectId":"niR1lzP8cqRJPTuax9Mo","item":[],"content":"# Preview File\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the card of file you wish to preview\n\nIn this case I am clicking on the card of Pappardelle.jpg.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.49.58 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Preview Your File\n\nNow you can preview your file! From this view you can also:\n\n* Edit the Title of your file\n* Get the File URL\n* Get the File ZUID\n* Launch the On the Fly Editor\n* Delete the file\n* And click on the more menu icon (the 3 dots in the top right hand corner) and:\n  * Rename your file\n  * Copy the file ZUID\n  * Move the file to a different folder\n  * Delete the file\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.51.32 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n\n\n## FAQ\n\n## What type of file previews are supported?\n\nAt the moment we support image and video previews. We will be adding support for more file types in the near future.&#x20;\n","category":"ui","service":"instances"},{"name":"\"On-the-Fly\" Editor","url":"/instances/ui/media/files/on-the-fly-editor","objectId":"1T5ZZHEgRVy233Kzpnmi","item":[],"content":"# \"On-the-Fly\" Editor\n\nAll images uploaded and stored in Media, can be manipulated on-the-fly by passing query parameter to the end of the image URL. We have built an \"On-the-fly\" image editor within our media so that you can easily add these parameters to URL without spending too much time.&#x20;\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the file which you wish to manipulate\n\nYou can find the image by selecting the file in all media, or a file in a folder, or by using search.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.41.50 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the \"Launch On-the-Fly Image Editor\" Button\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.42.56 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Make the modifications you wish to make using the sliders and buttons\n\nYou can change the image's:&#x20;\n\n* Fit\n* Height & Width\n* Orientation (with rotates and flips)\n* Optimization\n* Saturation\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.46.06 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5: Copy the URL with your newly added parameters\n\nIn this case, I rotated the image, and reduced it's saturation to -100% and then copied the URL.\n\nNote: all the modifications you make will not get added to your original file URL, they will only be on this newly generated URL\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.45.02 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n###\n","category":"ui","service":"instances"},{"name":"Get File URL","url":"/instances/ui/media/files/get-file-url","objectId":"QdrspTNjUoy9pFE7bazv","item":[],"content":"# Get File URL\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the card of file whose URL you desire\n\nIn this case I am clicking on the card of Pappardelle.jpg.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.49.58 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the copy icon in the File URL field\n\nNow you have copied/gotten the File URL!\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.10.27 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n","category":"ui","service":"instances"},{"name":"Get File ZUID","url":"/instances/ui/media/files/get-file-zuid","objectId":"xrELxvyjo678afBUOrqz","item":[],"content":"# Get File ZUID\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the card of file whose ZUID you desire\n\nIn this case I am clicking on the card of Pappardelle.jpg.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.49.58 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the copy icon in the ZUID form field\n\nNow you have copied/gotten the file ZUID!\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.58.12 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Rename File","url":"/instances/ui/media/files/rename-file","objectId":"pwxe8PPMOZ4yuKFUoK8Q","item":[],"content":"# Rename File\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the card of file you wish to rename\n\nIn this case I am clicking on the card of Pappardelle.jpg.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.49.58 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Preview Your File & Click on the More Icon (in the top right)\n\nThis should trigger a drop down menu.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 6.55.42 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Select the Rename Option from the drop down menu\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.13.59 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5: Type in your new file name and click done\n\n**Note:**&#x20;\n\n* This will change the URL path and could break existing links referenced in production after a period of time\n* In Zesty, we only allow you to change the file name and not the file extension so as to prevent unintentional errors or mistakes.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.15.12 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 6:  Your file is now renamed\n\nYou will see your new file name reflected in the top bar of the file preview modal.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.15.48 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Move File","url":"/instances/ui/media/files/move-file","objectId":"Tza22LdB5ALVr2ekgJr0","item":[],"content":"# Move File\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the file you wish to move\n\nIn this case, I want to move \"Nachos.jpg\" to the \"Author Headshots\" folder.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.25.05 PM (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the more button(3 dots) in the top right corner of the file preview pop up\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.26.26 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n\n\n## Step 4: Select the Move Option from the drop down menu\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.28.32 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5: Select the new destination folder for your file\n\nIn this case, I am selecting the destination folder as \"Author Headshots\".\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.29.49 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 6:  Your file has now been moved\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.40.38 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Delete File","url":"/instances/ui/media/files/delete-file","objectId":"K1r6almgLiwRhF3xOftj","item":[],"content":"# Delete File\n\n\n\n## Step 1: Go to the Media App\n\nIn the left navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to preview files in a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Locate & click on the file which you want to delete\n\nYou can find the image by selecting the file in all media, or a file in a folder, or by using search.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.41.50 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the more button(3 dots) in the top right corner of the image preview pop-up\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.47.55 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Select the Delete Option from the drop down menu\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.48.44 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5: Click on the Delete Button in the pop-up\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.49.40 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 6:  Your file has now been deleted\n\n* You will now not be able to see the file in the Media app.&#x20;\n* You should see a small alert showing that the file has been deleted appear in the bottom right corner.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.50.22 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"}],"content":"# Upload Files\n\n**Files can be uploaded into Zesty in two ways:**\n\n1. Using the Upload Button (in the top right hand corner)\n2. By dragging and dropping images into Media\n\nSee the instructions below for more details._If you're looking for information on how to loop through multiple images in a single field refer to the_ [_Image Modifiers article_](https://zesty.org/services/web-engine/introduction-to-parsley/image-modifiers#looping-through-multiple-images-in-a-media-field)_._\n\n## Method 1: Using the Upload Button\n\n### Step 1: Go to the Media App\n\nIn the left side navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to upload images to a specific folder, then please also select the folder you wish to upload.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Go to the Top Right Hand Corner & Click on Upload\n\nThis will trigger a file explorer pop-up.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.43.47 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Select the File/s from your File Explorer that you wish to upload\n\nLocate the media that you wish to upload on your local machine and select every file that you wish to upload. You can upload all types of files such as SVG, PDF, MOV, Mp4, GIF, JPEG, PDF, and more.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.44.27 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Preview your upload, write appropriate \"alt text\" (if necessary), and click \"Done\" once finished\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.45.10 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 5: Your files are now uploaded\n\nNow you can simply click on the file to [preview](preview-file.md) it and get more information about it such as it's [ZUID](get-file-zuid.md), URL, Name, etc.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.45.54 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Method 2: Drag & Drop Images into Media\n\n### Step 1: Go to the Media App\n\nIn the left side navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance. If you wish to upload images to a specific folder, then please also select the folder you wish to upload.\n\n\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Select the File/s on your computer you wish to upload to Media\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.47.13 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Drag & drop these files into Media\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.48.03 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Preview your upload, write Appropriate Alt Text (if necessary), and click \"Done\" once finished\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.48.54 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 5: Your files are now uploaded\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.50.30 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Folders","url":"/instances/ui/media/folders","objectId":"gAl4dzLUDyHPmBvkfBQs","item":[],"content":"# Folders\n\n## What are Folders?\n\nTo organize your files in Media, you can create folders to make files easier to find. These folders can also have sub-folders for more organization. In this section, we will go over how to:\n\n* [Create Folders](create-folders.md)\n* [Create Sub Folders](create-sub-folders.md)\n* [Find and View Folders](find-and-view-folders.md)\n* [Rename Folders](rename-folders.md)\n* [Hide Folders](hide-folders.md)\n\n_Note: These folders are only visual representations used in the interface and do not affect the path of the media._\n\n<figure><img src=\"../../../../.gitbook/assets/2022-10-26 15.53.06.gif\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"folders","url":"/instances/ui/media/folders","item":[{"name":"Create Folders","url":"/instances/ui/media/folders/create-folders","objectId":"8OgtT2BhW1pAmDPXr3pC","item":[],"content":"# Create Folders\n\n## Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Click on the Plus Button in the Folders section of the left Media sidebar\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.53.20 PM (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: In the pop-up, select your destination folder, type your new folder name, and click done\n\n**If you want this folder to be:**\n\n* At the root level of your instance bin, then select the destination folder as \"None\".\n* Inside of an existing folder, then select the destination folder as whichever folder you want it to be inside of\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.54.08 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Your New Folder is Now Made!\n\n**From here, you can:**\n\n* View uploaded files and created folders\n* [Upload files directly into a folder](../files/upload-files.md)\n* [Create sub-folders](create-sub-folders.md)\n* [Rename your folder](rename-folders.md)\n* [Hide Folders](hide-folders.md)\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.54.39 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Create Sub-Folders","url":"/instances/ui/media/folders/create-sub-folders","objectId":"76SmlaZ2PfuRrW2oIB41","item":[],"content":"# Create Sub-Folders\n\n## Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Click on a Folder of your choice from the Sidebar\n\nThis should open the view showing the contents of folder.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.57.35 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the \"Create Sub-Folder\" button in the Folder Header\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.58.17 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Type your New Folder Name, and click on Done.\n\nNote: The existing folder you are in will already be set as the destination folder. If you change it to another folder, then the sub-folder will be made inside of that folder instead. ****&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.59.26 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5 (Optional): Your New Sub Folder is Made! Click on the New Sub Folder you made from the grid\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.01.05 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## **Step 6: See your New Subfolder!**\n\n**From this subfolder you can:**\n\n* View uploaded files and created folders\n* [Upload files directly into a folder](../files/upload-files.md)\n* [Create sub-folders](create-sub-folders.md)\n* [Rename your folder](rename-folders.md)\n* [Hide Folders](hide-folders.md)\n\n","category":"ui","service":"instances"},{"name":"Find and View Folders","url":"/instances/ui/media/folders/find-and-view-folders","objectId":"QUULAdiaTioE1nQ0r0zY","item":[],"content":"# Find and View Folders\n\n**You can find folders in the Media app in 2 ways:**&#x20;\n\n* Using the Left Media Side Bar\n* Using the Search Bar\n\n## Method 1: Using the Left Media Side Bar\n\n### Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.&#x20;\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Scan the Left Sidebar and click on the folder you wish to open\n\nIn this case I want to open the \"Brand\" folder.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.06.29 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: You can now view your folder!\n\n**From here you can:**\n\n* View uploaded files and created folders\n* [Upload files directly into a folder](../files/upload-files.md)\n* [Create sub-folders](create-sub-folders.md)\n* [Rename your folder](rename-folders.md)\n* [Hide Folders](hide-folders.md)\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.07.08 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Method 2: Using the Search Bar\n\n### Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.&#x20;\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Click on the Search Bar in the Media Side Navigation Bar\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.08.29 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Type in the name of the folder you are searching for & hit enter\n\nYou can now see your search results!\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.09.41 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n","category":"ui","service":"instances"},{"name":"Rename Folders","url":"/instances/ui/media/folders/rename-folders","objectId":"GcRMBkvamNaGvPkygVOn","item":[],"content":"# Rename Folders\n\n## Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Click on the Folder you wish to rename from the Sidebar\n\nThis will open your folder for you. In this case I wish to rename the \"Brand\" folder.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FCKDBXN3BW53N6kHVNm3R%2FScreen%20Shot%202022-10-31%20at%208.06.29%20PM.png?alt=media&#x26;token=7f76f410-d072-4e84-a007-8b244f64c906\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the arrow next to the folder name\n\nThis will trigger a drop down with multiple folder options.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.12.05 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Click on the Rename option\n\nThis will trigger a rename modal.\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.12.52 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5: Type in your New Folder Name & Click Done\n\nIn this case, I am renaming the folder \"Brand\" to \"Brand Assets\".\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.13.34 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 6: Your Folder is Now Renamed&#x20;\n\nYou can see the new folder name in the header!\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.14.10 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Hide Folders","url":"/instances/ui/media/folders/hide-folders","objectId":"lDqfRCv2whn85pNvPoBK","item":[],"content":"# Hide Folders\n\nHiding folders can further help a user navigate groups, especially with a large number of assets. Below are the steps to hide a folder.&#x20;\n\n## Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Click on the Folder you wish to hide from the sidebar\n\nThis will open your folder for you. In this case I wish to rename the \"Brand\" folder.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FCKDBXN3BW53N6kHVNm3R%2FScreen%20Shot%202022-10-31%20at%208.06.29%20PM.png?alt=media&#x26;token=7f76f410-d072-4e84-a007-8b244f64c906\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: Click on the arrow next to the folder name\n\nThis will trigger a drop down with multiple folder options.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.12.05 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Click on the Hide Folder Option in the Drop Down Menu\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.15.56 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 5: Now your folder is hidden.&#x20;\n\nYou will see it has now moved from the folders section in the sidebar to the hidden folders section at the bottom of the sidebar. You can view this section by expanding it.&#x20;\n\n<figure><img src=\"../../../../.gitbook/assets/2022-10-31 20.16.50.gif\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"}],"content":"# Create Folders\n\n## Step 1: Click on Media in the Left Navigation Bar\n\nBy default it should open to \"All Media\". From here you can view all the files you have uploaded in your instance such as images, documents, and videos.\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: Click on the Plus Button in the Folders section of the left Media sidebar\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.53.20 PM (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: In the pop-up, select your destination folder, type your new folder name, and click done\n\n**If you want this folder to be:**\n\n* At the root level of your instance bin, then select the destination folder as \"None\".\n* Inside of an existing folder, then select the destination folder as whichever folder you want it to be inside of\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.54.08 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 4: Your New Folder is Now Made!\n\n**From here, you can:**\n\n* View uploaded files and created folders\n* [Upload files directly into a folder](../files/upload-files.md)\n* [Create sub-folders](create-sub-folders.md)\n* [Rename your folder](rename-folders.md)\n* [Hide Folders](hide-folders.md)\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-31 at 7.54.39 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Search Files & Folders","url":"/instances/ui/media/search-files-and-folders","objectId":"ai306sBEBwWTbJH58kcN","item":[],"content":"# Search Files & Folders\n\n## Step 1: Go to the Media App\n\nIn the left side navigation bar, click on the media tab. By default it should open to the all Media Tab of your instance.&#x20;\n\n<figure><img src=\"https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LKUXrO8I7u5ufn3Lefn%2Fuploads%2FxK7hAme2xyOJQzuvWZqq%2FScreen%20Shot%202022-10-26%20at%203.24.45%20PM.png?alt=media&#x26;token=73e3c2bc-474e-4f18-ae9f-a2fb3effffbd\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 2: In the Media App, click on the search bar, type your query, and hit enter\n\nYou can search by File Name, Folder Name, URL, ZUIDs, or key words.\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.20.10 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Step 3: See Your Search Results\n\nThese results are sorted in Alphabetical order by default.\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-10-31 at 8.18.30 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"}],"content":"# Files\n\nIn Zesty, you can upload a variety of files such as PNGs, JPEGs, SVG, PDF, MOV, Mp4, GIF, PDFs, and more. Once you upload a file to Media anyone in the instance can preview it, get important information (such as the name, ZUID, URL), make quick edits using our \"On-The-Fly\" editor, and use it in content. The below pages in this section document how you can do the same.&#x20;\n\n**Learn how to:**&#x20;\n\n1. [Upload Files](upload-files.md)\n2. [Preview Files](preview-file.md)\n3. [Use \"On-the-Fly Editor\"](on-the-fly-editor.md)\n4. [Get File URL](get-file-url.md)\n5. [Get File ZUID](get-file-zuid.md)\n6. [Rename a File](rename-file.md)\n7. [Move a File](move-file.md)\n8. [Delete File](delete-file.md)\n\n<figure><img src=\"../../../../.gitbook/assets/Screen Shot 2022-10-26 at 4.30.48 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Web IDE (Code Editor)","url":"/instances/ui/editor","objectId":"-M6b3WVgBTBrrfw0Fjiu","item":[],"content":"---\ndescription: The Web IDE is where HTML, CSS, Javascript and Parsley templates are authored.\n---\n\n# Web IDE (Code Editor)\n\n## Overview\n\nThe Web IDE serves as the in-app editor of your instances code. Powered by the [Microsoft Monaco Editor](https://microsoft.github.io/monaco-editor/) it provides an experience similiar to [VS Code](https://github.com/Microsoft/vscode). It allows for instant development of instance code. The code which can be managed is comprised of the following types.\n\n* [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley) & HTML Views\n* [Style Sheets](https://zesty.org/services/manager-ui/editor/stylesheets)&#x20;\n* [JavaScript](https://zesty.org/services/manager-ui/editor/javascript)&#x20;\n* Snippets\n  * _Chunks of code which can be reused and included into other files_\n* Custom Endpoints\n  * _Allow for generating a variety of file types accessible via an instance URL_&#x20;\n\nAccess the Web IDE by selecting Web IDE from the main navigation.\n\n![Select Web IDE from the main nav to access it.](../../../.gitbook/assets/01-ide-navigate-to-ide.png)\n\n{% hint style=\"success\" %}\nIn addition to the Web IDE code can be authored locally using the [Atom IDE package](https://zesty.org/tools/atom-package).\n{% endhint %}\n\n## Keyboard Shortcuts\n\n### Standard\n\n**Saving:** CTRL/CMD+s\\\n**Copy:** CTRL/CMD+c\\\n**Paste:** CTRL/CMD+v\\\n**Search:** CTRL/CMD+f\n\n### Movement\n\n**Skip word right:** CTRL/CMD+right arrow\\\n**Skip word left:** CTRL/CMD+left arrow\\\n**Highlight word right:** CTRL/CMD+shift+right arrow\\\n**Highlight word left:** CTRL/CMD+shift+left arrow\\\n**Highlight lines up:** CTRL/CMD+shift+up arrow\\\n**Highlight lines below:** CTRL/CMD+shift+down arrow\\\n**Hightlight multiple selections:** CTRL/CMD+d\n\n## HTML Views\n\nFor every [Schema](https://zesty.org/services/manager-ui/schema) model created there is an associated model view created with the same model reference name. These model views allow for author HTML documents. e.g. Markup, Inline style sheets and JavaScript. HTML Views are located at the top of the left-hand sidebar which is shown outlined in purple below.\n\n![HTML Views are are located in the left-hand sidebar of the Web IDE.](../../../.gitbook/assets/02-ide-views.png)\n\n### Templating With Parsley\n\nAlong with HTML you can use the [Parsley templating language](https://zesty.org/services/web-engine/introduction-to-parsley) to dynamically reference your models and their fields. By using Parsley to reference model fields you are making the content rendered dynamic. In addition the Web IDE has the ability to auto-suggest the properties of your schema. For example, if you wanted to loop through a set of items, after typing `each` a list of content model names is shown for you to choose from and the completed statement would be similar to the each loop declaration below.\n\n`{{each products as product sort by product.id asc}}`\n\nTherefore you can build your schema and develop against it instantly which allows your content editors and developers to work concurrently.\n\n[Give Parsley a try,](https://parsley.zesty.io/) we are confident you will enjoy it.\n\n## Style Sheets\n\nZesty.io is equipped to compile LESS, SCSS, and CSS files for styling. There is no need to download any preprocessors. Simply add your code and the style sheets will integrate seamlessly. Learn more about style sheets [here](https://zesty.org/services/manager-ui/editor/stylesheets). Style sheets are located in the left-hand sidebar in a section called Site.CSS which is outlined in purple below.\n\n![Style sheets are located in the left-hand sidebar of the Web IDE.](../../../.gitbook/assets/03-ide-styles.png)\n\n## JavaScript\n\nSimilarly JavaScript files are ready to to be added and edited. These are rendered and linked in the head of the instance following the style sheets. Learn more about JavaScript [here](https://zesty.org/services/manager-ui/editor/javascript). JavaScript files are located in the left-hand sidebar in a section called Site.JS which is outlined in purple below.\n\n![JavaScript files are located in the left-hand sidebar of the Web IDE.](../../../.gitbook/assets/04-ide-javascript.png)\n\n## Snippets\n\nSnippets allow for resuable pieces of code which can be included into other views. They work well for dynmaic sections of content which do not require URLs. e.g. A contact form. Building this as a snippet allows for it's reuse across a website. Learn more about creating and using snippets [here](https://zesty.org/guides/using-snippets).\n\n## Custom Endpoints\n\nEvery instance is able to serve custom endpoints, all of which have access to your instances models. These are files created in the Web IDE which get their URL and file extension determined by the provided file name. Their URLs follow the pattern of `example.org/-/custom/MY-ENDPOINT-FILE-NAME.EXT`. Zesty.io hosted domains must allow for the root level directory of `/-/` being reserved for routing by Zesty.io. This the platforms signal for routing to specific internal services.\n\n**Supported Custom Endpoint Extensions:**\n\n* `.csv`\n* `.tsv`\n* `.js`\n* `.rss`\n* `.xml`\n* `.otf`\n* `.png`\n* `.svg`\n* `.ics`\n* `.json`\n* `.css`\n* `.html`\n* `.markdown`\n* `.md`\n* `.vcf`\n* `.txt`\n\n{% hint style=\"success\" %}\nDo not see a file extension you need? The platform is designed to allow for additional file formats. [Get in touch with us](https://www.zesty.io/).\n{% endhint %}\n\n## Multitenancy\n\nZesty.io is a multi-tenant platform. This means there are multiple independent users operating against a shared environment. In other words, team members and yourself can work on the same files. While this provides powerful collaborative workflows it introduces some complex questions for the application to answer. One of those being, when two or more users are working on the same file and introduce different changes which is the correct one?\n\nThe Web IDE is powered by the [instances API](https://zesty.org/apis/instances-api) which takes a simple approach of the last request made is the current state of the data. Meaning if you are working on `file A` and save the following code `var foo = \"bar\"` but then afterwards a team member is working on the same `file A` and saves the code `var foo = \"baz\"` then that will be the current state of the code when it is next requested.\n\nWhat to do then when you have multiple changes being built at the same time? E.G. A developer is working on the new homepage redesign while another developer is updating the current homepage title. This is where the external concept of version control comes in handy. Version control provides workflows which allow you to \"branch\" and \"merge\" code in these complex situtations. It is a very well solved problem and as such isn't something we look to reimplement. How can you combine version control on your computer with the remotely hosted code on Zesty.io? By using our [Atom IDE package](https://zesty.org/tools/atom-package) you can integrate development workflows on your computer with your remote Zesty.io instance.\n\n### Local Storage\n\nIn a multitenant application you can have changes locally which differ from the remote state as well as your fellow team members local state. When developing locally using the Atom IDE package you get the benefit of your operating systems file storage which can contain changes even if they have not been synced to the remote instance. Providing you with confidence your in development work will not be lost if a remote file changes. In the Web IDE we use the [localStorage browser API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) to achieve the same affect. This means if working on a file and you change views or close your browser your work will not be lost. _One caveat to this is when a view is deleted. When this happens the next time you load the Web IDE or that file it will be removed from your browsers localStorage_.\n\n### Syncing\n\nIf your, in development, work is stored in your browsers localStorage what to do then when the remote file has changed? This is handled by syncing. Whenever you edit a file the Web IDE marks it as `dirty`. This means it has changes which need to be saved in order to presist them on the instance making the changes available to other team members. Sometimes the file is changed by another team member before you are able to save your Web IDE changes. Whenever a file change is saved we make a new version and when you load a file we fetch the latest from your instance. If your Web IDE file is behind the latest remote file version and has unsaved changes (a.k.a is `dirty`) we mark it as being out-of-sync.\n\nWhen a file is marked as out-of-sync the Web IDE will load the [file diffing view](https://zesty.org/services/manager-ui/editor/versions#diffing-versions) and you will need to make a choice. You will have to choose between saving your changes and overwriting the current remote file or choosing the remote file and losing your local changes. This choice allows you to think critically about which code should be the current state shared across your team.\n\n### Renaming Files\n\nWhen renaming an HTML View, navigate to the [Schema section](https://zesty.org/services/manager-ui/schema) and change the HTML View's [reference name](https://zesty.org/guides/the-connection-between-schema-content-and-code#schema).&#x20;\n\nFor Snippets, endpoints, style sheet, and JavaScript files, you'll need to create a new file with the new name, transfer your new code, and delete your old file.&#x20;\n","category":"ui","service":"instances"},{"name":"editor","url":"/instances/ui/editor","item":[{"name":"Versions","url":"/instances/ui/editor/versions","objectId":"-M6qOFp0UIFo-1cgrkXw","item":[],"content":"---\ndescription: Learn about Zesty.io's Web IDE file versioning.\n---\n\n# Versions\n\nCode views (_single-page, multi-page and headless_), resources (_JavaScript and Stylesheets_) and custom endpoints are versioned whenever a save action occurs. As there can be multiple API consumers these save actions can result from different clients, such as; the Manager [Web IDE](https://zesty.org/services/manager-ui/editor), [Atom IDE](https://zesty.org/tools/atom-package), [node-sdk](https://zesty.org/tools/node-sdk) and your teams internal scripts.\n\n## Diffing Versions\n\nYou may need to understand the difference between two versions of a code file. This can be done by using the diff button located on the file action bar.\n\n![Web IDE file action bar](https://kfg6bckb.media.zestyio.com/09-action-bar.png)\n\n![Web IDE file diff view](https://kfg6bckb.media.zestyio.com/08-diff-view.png)\n\nThe diff view will allow you to select two versions of the same file and see the changes that have occurred between them. This can be helpful to debug a code issue or to revert to a prior version of a file. Using the \"Load Version X\" button will update the code editor to the selected versions code. Once loaded you can either make additional changes to the code or save it as is.\n\n#### Diff Colors\n\n**Yellow** - Syntax warnings. These are not items that necessarily need to be corrected, however, they indicate items that should probably be cleaned up like unused variables, unused CSS variables, etc.&#x20;\n\n**Red** - Code that's been removed.\n\n**Green** - Code that's been added.\n\n### Version Rollbacks\n\nWhen accessing and restoring (saving/publishing) older versions of your code you’re creating new versions. In order to revert code you will need to follow these 3 steps.\n\n1. Use the diff view to load a prior version of the code.\n2. Save the now loaded prior version of code.&#x20;\n   1. _Saving creates a new version. At this point you have reverted the files code._\n3. Publish the new version.&#x20;\n   1. **By publishing you will make the reverted code live.**\n\n**For example**, _if working on version 4 but want to revert to version 2, select and load version 2. And on save version 5 is created. To send that code live, you would then publish it._\n\n## Developing With Version Control. E.G. Git\n\nVersion control software provides very standardized and complete solutions for managing code. As such we do not want to duplciate that work. For example; we do not provide a way to [**merge**](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts) code. This should be handled on a local machine using your version control system of choice.\n\nWe highly recommend combining version control best practices along with our [Atom IDE package](https://zesty.org/tools/atom-package). Using version control locally will provide you with workflows such as; [branching, merging and making pull requests](https://guides.github.com/introduction/flow/). If code is merged to a master branch that work needs to be synced with your Zesty.io instance. When synced those changes will be on the Zesty.io dev envrionment, allowing for previewing the code effects on content before publishing. When code on your instance is ready to go live you will need to publish it from the Web IDE.\n","category":"ui","service":"instances"},{"name":"Environments","url":"/instances/ui/editor/environments","objectId":"-M6qOFp19qTCbPlCz8qV","item":[],"content":"---\ndescription: Learn about Zesty.io's instance preview and live production environments.\n---\n\n# Environments\n\nCurrently Zesty.io maintains 2 envrionments for you; dev and live. Each has its own set of HTML, stylesheets, and Javascript files.\n\n## Dev (Previewing Changes)\n\nThe in development changes can be previewed with the instance preview URL. This preview URL can be used with clients when sharing in development work for approval.\n\n### Preview Access\n\nAccess to the preview URL can, optionally, be limited to specific IP addresses or a range of IP addresses. Preview URLs can also be locked to only load for logged in users with access to the instance.\n\n## Live (Publishing Changes)\n\nIn the development environment, template files can be individually edited and published to production. There is also a \"Publish All\" button to send all development file changes live at the same time.\n","category":"ui","service":"instances"},{"name":"Saving","url":"/instances/ui/editor/saving","objectId":"-M6qZdH4zedboY48JYZc","item":[],"content":"---\ndescription: >-\n  In the Editor section, you are able to use hidden saving and publishing\n  functionalities.\n---\n\n# Saving\n\nWhen initially writing or modifying code it only exists in your browser. The new experience uses your browser's localStorage to hold onto changes, thus reducing the risk of losing in-development work, but it is still important to save your work. When saving a file it will create a new immutable version. Once saved, your code is stored on the cloud instance and available to other team members.\n\nSaving can be accomplished with either a manual press of the green Save button or using the CMD/CTRL + S key command. 03-save-button-with-context.png Mac systems use the CMD (Command) key while Windows and Unix systems use the CTRL (Control) key.\n\n![Save Button](https://kfg6bckb.media.zestyio.com/03-save-button-with-context.png)\n\n{% hint style=\"info\" %}\nNote: Learn more about the [Web IDE key command workflows](https://zesty.org/services/web-engine/interface/editor#shortcuts).\n{% endhint %}\n\nIf you are working on a file and have not saved it you will see a white dot on the file tab to indicate it has changes which are not persisted.\n\n![Example of an unsaved file display the white dot indicator](https://kfg6bckb.media.zestyio.com/04-white-dot-tab-unsaved-file.png)\n\nOnce you've made an unsaved change or if a team member has changed the code the file will then be out of sync. This is indicated by an orange dot on the file tab.\n\nOut-of-sync files need to be \"[diffed](https://zesty.org/services/manager-ui/editor/versions#diffing-versions)\" in order to determine which version of the code should be chosen and saved.\n","category":"ui","service":"instances"},{"name":"Publishing","url":"/instances/ui/editor/publishing","objectId":"-M6qZdH5Wi8WkF8Db-5l","item":[],"content":"---\ndescription: Learn about Zesty.io's Web IDE publishing flows.\n---\n\n# Publishing\n\nOnce you have code which is ready to be made public it will need to be published. There are a few ways this can be done. If you want to publish an individual file that can be accomplished with either the file’s \"Publish Version X\" button or on the file list by clicking the orange up arrow next to the file name.\n\n![Publish buttons with call outs](https://kfg6bckb.media.zestyio.com/05-publish-buttons-with-callouts.png)\n\nSometimes you'll have multiple files which need to be published at the same time. This can be done by using the \"Publish All\" button. Clicking this will open a modal showing you a list of file names and their current version. Confirming the \"Publish All\" action will then publish all the files shown in the list.\n\n![Publish All Button](https://kfg6bckb.media.zestyio.com/06-publish-all-button.png)\n\n![Publish All Confirmation Modal](https://kfg6bckb.media.zestyio.com/07-publish-all-modal.png)\n\nWhen a publish event occurs it will cause a cache purge. This is the process of telling the CDN that the file is now out of date and it should return to the origin ([WebEngine](https://zesty.org/services/web-engine)) and fetch the latest version.\n","category":"ui","service":"instances"},{"name":"Javascript","url":"/instances/ui/editor/javascript","objectId":"-Lb4PGZ7_EbsW_iOd0Jb","item":[],"content":"---\ndescription: >-\n  JavaScript files are managed from the Editor underneath the JavaScript file\n  list. You can either choose to create an internal file or link to an external\n  file.\n---\n\n# Javascript\n\n## Overview\n\nZesty.io provides a few ways to add JavaScript to your sites. Most are managed from the Editor underneath the JavaScript file list, otherwise JavaScript can be added to HTML views with script tags. When adding JavaScript to the JavaScript file section you can either choose to create an internal file or link to an external JavaScript file. Scripts are concatenated and uglified without [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley). Parsley is not accessible files in the Script section.\n\n## Internal JavaScript Files\n\nAny JavaScript files created in the code editor will be concatenated and delivered synchronously as a single file in the document head.\n\nIt's important to note that because all the JavaScript is served before the document is loaded if your doing anything with the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document\\_Object\\_Model) you need to check that the [DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event has fired. This is commonly accomplished with the jQuery document `ready()` function.\n\n_jQuery DOM ready example:_\n\n```javascript\n$(document).ready(function() { console.log( \"ready!\" ); // execute your code here });\n```\n\n## External JavaScript Files\n\nBy creating a JavaScript Link you can add externally hosted files to your site. This is a great option for JavaScript libraries that are hosted on well known CDNs. Which can potentially be cached in your visitors browser allowing them to avoid a resource download.\n\n## Inline JavaScript\n\nIf needed you can also add JavaScript inline on a Zesty template page. A common use case would be adding an analytics vendors tracking code on the `loader`, this would make the tracking code available on every page across your site.\n","category":"ui","service":"instances"},{"name":"Style Sheets","url":"/instances/ui/editor/stylesheets","objectId":"-Lb4OqKMXs7yTMcNgyhf","item":[],"content":"---\ndescription: >-\n  Zesty.io supports writing CSS, Less, and SCSS for styling your instances. Upon\n  publishing we process all SCSS, Less, and CSS files and build a concatenated\n  and minified CSS file to serve for your inst\n---\n\n# Style Sheets\n\n### Overview\n\nZesty.io’s Code Editor supports CSS, LESS, and SCSS/SASS. Every save of a stylesheet will combine, compile, and minify all stylesheet files into a single CSS file called `site.css`. If more than one style of stylesheet is used, they will compile and concat into a single file in the following order of concatenation:\\\nCSS\\\nLESS\\\nSCSS\n\n{% hint style=\"info\" %}\nTo create style files that are not compiled through this flow and used site-wide you can create style sheets in a [custom endpoint](https://zesty.org/services/manager-ui/editor/custom-file-types-endpoints) and add them to the item's head that requires it.\n{% endhint %}\n\n### Compilers and Minifiers\n\nAll files are concatenated based on their type then by their order set in the editor interface of the Zesty.io manager. Each stylesheet type has its own compiler or minifier explained below. Files will transpile with their given type; Less and Sass files will compile with style variables. [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley) is not accessible from to files in the Style Sheet section. &#x20;\n\n{% hint style=\"warning\" %}\nComments in Style files can err on compilation especially if they are single-line comments noted by `//` and at the top or bottom of a file. To mitigate this ensure that comments are noted using the multi-line `/* */` syntax.&#x20;\n{% endhint %}\n\n### CSS\n\nAll CSS with the exception of any file named ‘ie8.css’ is concatenated and run through a minification process. The repository used for CSS minification: [https://github.com/matthiasmullie/minify](https://github.com/matthiasmullie/minify)\n\n### LESS\n\nAll LESS files are concatenated based on their order in the editor interface and then run through the LESSC compiler with the compressed flag. The repository we use to compile: [https://github.com/leafo/lessphp](https://github.com/leafo/lessphp)\n\n_Errors are returned for broken LESS at compile time._\n\n### SCSS/SASS\n\nAll SCSS files are concatenated based on their order in the Editor and run through the SASSC compiler with the flags ‘ --style compressed --stdin’, that behavior is hard coded and cannot be changed. The repository used for compiling SASS: [https://github.com/sass/sassc](https://github.com/sass/sassc)\n\n_Errors are returned for broken SASS at compile time._\n\n{% hint style=\"warning\" %}\nSCSS cannot be used in base blueprints files. This refers the the files that are loaded from a GitHub repo upon blueprint selection during instance creation.\n{% endhint %}\n\n### Special Files\n\n**ie8.css**\n\nIf a file is given the name ie8.css, it will be ignored by the minification process and is included in its own href link in the header after the main minified CSS file is added.\n\n### Auto Added Stylesheet Files\n\nZesty.io auto appends stylesheets to specific templates (mostly legacy). If you experience added CSS and it is a problem please reach out to support on the Zesty.io developer slack channel. Support engineers can remove the base CSS files.\n\n### CSS files migrating from Legacy to ZUID Zesty.io\n\nAll old CSS files use to be processed by the LESSC compiler for minification or file compile order. When sites are migrated, old CSS files will be converted to LESS file to maintain the same behavior.\n\n### **Operations that happen on pre-existing CSS files:**\n\n* Head type changes from text/css to text/less &#x20;\n* View type changes from text/css to text/less &#x20;\n* File extension changes from .css to .less\n\nNew CSS files will abide by the rules in this specification.\n","category":"ui","service":"instances"},{"name":"Outputting Content","url":"/instances/ui/editor/outputting-content","objectId":"-Lb4ICvlL57LdVPC8JyS","item":[],"content":"---\ndescription: >-\n  The final step to have your website content ready for publishing is to compile\n  it all together using HTML, Style Sheets, and JavaScript for websites, and\n  endpoints and files for headless distribution.\n---\n\n# Outputting Content\n\n### Overview\n\nA brief overview of our process has us beginning at the Schema section where we add Pages, Page Groups, and/or Data Sets; and then we move on to the Content section where we add content to our Pages, Page Groups, and/or Data Sets. Lastly, we want to move on to the Editor section where we code our HTML view, add styles to our Style Sheets, and JavaScript as necessary.\n\n### Editor\n\nIn the Editor section, you will find the Views for all of the Pages and Page Groups that you created. You will also see a Snippet for a 404 page and the Loader. Below, you'll find the Style Sheets and JavaScript sections where you can add your files.\n\n### HTML Views\n\nSingle Pages will show a page icon\n\nPage Groups will appear with a table icon.\n\nIn both the Page and Page Group views, you'll add HTML and Parsley to create dynamic template layouts which will be visible on that page's corresponding URL. For example, on our home page, we created content entry fields for a hero image and a title. This is what the code might look like in the Editor using HTML and Parsley.\n\n```\n<div class=\"my-hero\">\n<div class=\"hero-container\" style=\"background-image:url('{{ page.main_image.getImage() }}')\"</div>\n<h2>{{ page.page_title }}</h2> \n</div>\n```\n\nUse standardized HTML language to create your static webpage layout and add Parsley to create dynamic inputs pulling from your content entries using their respective Parsley code reference names which were created in Schema section.\n\nYou can create Snippets to create globally available content such as a header or footer to avoid having to repeat the same code on each page. Click the \"+\" symbol next to Views and select Snippet.\n\n### Loader\n\nNote that the Loader is the file that loads what you see on your webpage. It is the first file that is loaded in each view and it loads the view via the Parsley call:`{{ current_view }}`. For your newly created HTML and Parsley layout to load, this Parsley call needs to be in the Loader file. This is where you can add your globally available Snippets as well. For example, we created two Snippets: one for our header and another for our footer and named them accordingly. We want our header and footer to show on every webpage so we'll write our loader as follows:\n\n```\n{{ include header }}  \n{{ current_view }}  \n{{include footer }}\n```\n\n### 404 Page\n\nIf a user happens to stumble upon a broken link, the loader will not render. Users will instead see a 404 page.&#x20;\n\nIn the Code App of an Instance, a snippet with the filename `404-page` and file type `404` is provided. When the loader is unable to resolve the requested URL, the `404-page` will render instead.&#x20;\n\nDue to WebEngine rendering of the `404-page` outside of the loader, all necessary scripts and Parsley `{{ includes }}` calls applied to the loader will also need to be applied to the `404-page`.  &#x20;\n\nThe 404-page is fully customizable and can be built out similar to a traditional view file. The head tags established for the Instance in the Settings App will output on the 404. Additionally, the file has access to all stored content by using Parsley direct data calls.&#x20;\n","category":"ui","service":"instances"},{"name":"String Modifiers","url":"/instances/ui/editor/string-modifiers","objectId":"-LbZ5p1M9Gm6njiy7AKs","item":[],"content":"---\ndescription: >-\n  There are a number of Parsley string modifiers that users can employ to suite\n  their needs. Keep reading to learn more about which string modifiers are\n  available and how to use them.\n---\n\n# String Modifiers\n\n## .getNextURL()\n\nA quick way to retrieve the next URL in line in a page group.\n\n```\n{{ page.getNextURL() }}\n```\n\n## .getPreviousURL()\n\nQuick access to the URL of the previous page in line in a page group.\n\n```\n{ page.getpreviousurl() }}\n```\n\n## .getUrl()\n\nReturns the relative path to the item you are trying to access.\n\n```\n<a href=\"{{ blog_post.getUrl() }}\">Link</a>\n// <a href=\"https://zesty.io/blog/updates/new-sitemap-xml-control-in-zesty/\">Link</a>\n```\n\n## .htmlentities()\n\nConverts the text string provided into HTML entities. Useful for when outputting text from the database.\n\n```\n<p>{{ page.description.htmlentities() }}</p>\n```\n\n## .html\\_entity\\_decode()\n\nConverts all HTML entities in the provided string to their applicable characters.\n\n```\n<p>{{ page.description.html_entity_decode() }}</p>\n```\n\n## .obfuscate()\n\nUse this call to render obscure text to web crawlers, like email or phone numbers.\n\n```\n<a href=\"mailto:{{setting.contact-form.sending_email.obfuscate()}}\">\n{{setting.contact-form.sending_email.obfuscate()}}</a>\n```\n\n## .preg\\_replace(pattern, replacement)\n\nExecutes a regular expression find and replace on the text attached to the call.\n\n```\n// Replace all instances of whitespace with dashes\n{{ $title = Hello all and welcome to Zesty}}\n{{ $title.preg_replace(' ','-') }}\n// \"Hello-all-and-welcome-to-Zesty\"\n```\n\n## .replace(pattern, replacement)\n\nDoes a simple replace without any regular expression.\n\n```\n// $description = \"We wrote this blog post\"\n{{ $description.replace(We, I) }}\n// \"I wrote this blog post\"\n{{ page.article_body.replace( src='(.*?)', data-src='\\') }}\n```\n\n## .slugify()\n\nSlugify will concatenate strings by replacing spaces with dashes (-), lowercasing all letters, and stripping out all punctuation.\n\n```\n// if the page title is the string: My New Homepage!\n\n{{ page.title.slugify() }}\n\n// calling slugify on the page title will return: my-new-homepage\n```\n\n## .striptags(start, length)\n\nFunction will return a string with HTML tags removed. It also acts as a substring method if a `start` and `length` parameter are provided.\n\n```\n{{thispage.html.striptags()}}\n\n{{thispage.html.striptags(4,6)}}\n```\n\n## .substr(start, length)\n\nFunction that takes the text value it is attached to and returns a substring with the desired length. Substring can take negative numbers as well such as `substr(-5)` to return the last five characters of a string. Does not consider whitespace as part of length.\n\n```\n// $description = \"This is a longer description that needs shortened!\"\n{{ $description.substr(0,9) }}...\n// \"This is a lo...\"\n```\n\n## .subWords(number\\_of\\_words)\n\nReturn the first X words from a body of text. This is a cleaner method and subString() when creating text previews in lists because it will not create breaks in the middle of words.\n\n```\n{{ page.content.subWords(3) }}\n```\n\n## site.lorem(number)\n\nAuto generates lorem ipsum placeholder content from this example string:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam volutpat quam quis erat tristique pretium. Nunc iaculis lacinia nulla, quis pulvinar lorem rhoncus quis. In adipiscing, sapien blandit dictum pulvinar, massa nisl pretium nunc, vel volutpat nisl leo id justo. Sed ut elit nulla. Vestibulum pharetra est sit amet odio bibendum pharetra. Mauris magna dolor, mollis ac dignissim vitae, sollicitudin et arcu. Vivamus nec ultrices augue. Quisque libero diam, facilisis in ullamcorper vitae, condimentum vitae erat. Ut lacinia lacus in tellus scelerisque vestibulum. Praesent pharetra ligula lacus, at ultrices felis dictum ac. Cras consectetur ut dolor vitae dapibus. Vestibulum sit amet nibh semper, ornare erat vel, consectetur sapien.\n\n```\n{{site.lorem(20)}}\n```\n\n## site.searchformatted\n\nTakes a string parameter and a limit paramenter and outputs a site wide search results based on a meta title, meta desription, and page url.\n\n```\n{{site.searchformatted(STRING, NUMBER)}}\n{{site.searchformatted({get_var.search},10)}}\n```\n","category":"ui","service":"instances"},{"name":"Custom File Types / Endpoints","url":"/instances/ui/editor/custom-file-types-endpoints","objectId":"-MBpPa2Q3-r5DOOpYvfO","item":[],"content":"---\ndescription: >-\n  Create free standing files with custom paths that are accessible through the\n  CDN. These files are used for custom JSON, wild card url paths, xml, html,\n  etc.\n---\n\n# Custom File Types / Endpoints\n\n## Custom File Type/Endpoint Overview&#x20;\n\nEndpoints are _(Mixed Extensions)_ Parsley accessible file for creating endpoints or custom experiences. These files need to be named with a full path with an extension like `/my/file/path.json`. The file can be viewed at `hash-dev.preview.zesty.io/my/file/path.json` or `my-custom-domain.com/my/file/path.json` as long as the file and its content has been published. File types that can be used: css, html, json, js, xml, css, csv, tsv, xml, yaml, md, svg, txt, rss, ics, vcf, xhtml.\n\n{% hint style=\"info\" %}\nAlways use relative URLs or production links in your views for example: `/my/file/path.json`  or  `//my-custom-domain.com/my/file/path.json` . We recommend using relative links as the endpoint will render relative to the domain that you're on.\\\n\\\nThis is important because preview URLs are not cached, they do not collect analytics, Google does not recognize it as their own domain, and it can expose unpublished content. \\\n\\\nHowever, production URLs _are_ cached and thus perform faster, is recognized by Google  and collects analytics, and will not expose unpublished content.\n{% endhint %}\n\n###\n\n### Creating a custom file type from the Web IDE\n\nCreate a file name with a full path, starting with a forward slash, like `/this/is/my/custom/file.json`\n\n![Click Create File (blue button top left) and choose custom file type from the dropdown.](../../../.gitbook/assets/custom-endpoint.png)\n\n### Some examples of file types that can be made\n\n* Custom JSON files ([How to Guide](../../guides/how-tos/how-to-create-a-customizable-json-endpoint-for-content.md))\n* SVG created off datasets (e.g. dynamically rendering images of build locations)\n* Dataset exports (custom CSV exports)\n* Contact information through VCARDS\n* Exports to static site generator (markdown and YAML)\n* Editable configuration files in YAML for cloud deployments\n* Dynamic javascript around data\n* Dynamic CSS styling around data\n* Voice XML dialect for IVR (interactive voice response) e.g. Zesty.io Phone Number Response\n* Dynamic calendar invite downloads (ics)\n* Custom Realtime Really Simple Syndication Syndication Feeds (rss)\n* Markdown template designs\n* Dynamically build Javascript templates like Handlebars or Mustache\n* Raw Text\n* TVML For Apple TV\n\n### Working with Wild Card Views to Resolve Dynamic URL paths\n\nZesty.io allows for you to capture custom URLs that are not registered to content items or a specific file path. For example, the URL path `/store/12345/my-product/` is capture by a file named `/store/*/*/index.parsley`\n\nThese files are created as custom file type, as seen here, and are identified by having an asterisk `*` as a path part between two forward slashes, and the name `index.parsley` at the end of the file path. [Please reference the file (resource) resolution loading order](../../../webengine/guides/web-engine/resource-resolution-order.md).\n\nWild Card Views files can be used to dynamically generate pages from data not located on Zesty.io by using identifiers passed into the url. We will describe two examples, product pages and referral pages.&#x20;\n\n**Product Pages:** With product pages like `/store/12345/my-product/`(represented as a custom file type named `/store/*/*/index.parsley` ) the identifier is the product id `12345` which is accessed with `{{request.pathPart(2)}}`and can be used to query another system like Oracle for product data. This is useful when thousands of products are store externally and do not need to be synchronized into a content instance. &#x20;\n\n**Referral Pages**: A URL like `/referral/3e5h1/`(represented as a custom file type named `/referral/*/index.parsley` where `3e5h1`is a unique identifier which can be accessed with `{{request.pathPart(2)}}` and can be used to present a printable coupon on page, or to make a request to an external system via javascript.&#x20;\n\n{% hint style=\"info\" %}\nPages that use wildcard routing will not include Zesty automated head tags. These pages will need to be fully built top to bottom.&#x20;\n{% endhint %}\n\n## &#x20;Snippets&#x20;\n\nSnippets are _(html)_ Parsley accessible file meant to abstract common use of code, or for organizing file build. Examples: slider, footer, header. These can be used inside of each loops as well.\n\n## Troubleshooting\n\nBefore you view the live endpoint always be sure to view the endpoint on preview. Viewing the endpoint on preview will ensure that you catch any Parsley errors.\n\n","category":"ui","service":"instances"},{"name":"Importing Code and Styles","url":"/instances/ui/editor/importing-code-and-styles","objectId":"-LbZ0hHWY-n4rLol2JnL","item":[],"content":"---\ndescription: >-\n  This guide will help you import content and styles from other websites through\n  drag and dropping code into the Zesty.io editior\n---\n\n# Importing Code and Styles\n\nIf you want to move your website styles into Zesty.io, we recommend using a drag and drop feature.\n\nOpen the website you have selected and go ahead and save the website. In your Internet browser, you can do this via right clicking and selecting “Save Page As\" in Mozilla Firefoz, or \"Save as” in Google Chrome This will now open up a file browser window. Go ahead and choose where to save the page.\n\n![Alt text](https://wyp1jm.media.zestyio.com/image01.BkwFAk5Ex.png)\n\nI’m going to go ahead and save it on my desktop, but you can do that anywhere.\n\n![Alt text](https://wyp1jm.media.zestyio.com/image00.B1PFC1c4g.png)\n\nNow go ahead and confirm everything has been saved. You will also see a file folder in the same directory with your html web page. There are important files in here as well so make sure to keep these. Now is the time to log into your Zesty.io account at [accounts.zesty.io](https://accounts.zesty.io) From here, go ahead and navigate to your web property you would like to import these files to.\n\nFrom here you should select the editor tab as shown below:\n\n![](../../../.gitbook/assets/import-code-01.png)\n\nHere is the fun part. You can drag and drop these files right into the boxes of code on the left side of your screen. First we will drop the HTML file that came out of your website right into the left-hand navigation under HTML Views.\n\nIt is important to know that Zesty.io only needs the content between the  tags of the HTML file. You can either delete the other non-relevant text in the Zesty.io editor, or in your own personal text editor before.\n\nIt is also important to connect this content you have just imported to your Zesty.io website. This can be done with one simple line of code to the page you just added. `{{include Homepage}}`\n\nThis will connect the file you just imported with the homepage.\n\n### CSS\n\nThe next step is to import any of the CSS that was in your old website. If you look inside the folder you downloaded, you will see several files that have a .CSS extension on them. These are the files you need. You can import them one at a time by dropping them in the left-hand navigation under Stylesheets.\n\nGo ahead and save everything, and make sure to publish your code. This can be done, by clicking the save button on each page you have imported, and finally the Publish button, both located in the upper right corner of the Zesty.io platform.\n","category":"ui","service":"instances"}],"content":"---\ndescription: Learn about Zesty.io's Web IDE file versioning.\n---\n\n# Versions\n\nCode views (_single-page, multi-page and headless_), resources (_JavaScript and Stylesheets_) and custom endpoints are versioned whenever a save action occurs. As there can be multiple API consumers these save actions can result from different clients, such as; the Manager [Web IDE](https://zesty.org/services/manager-ui/editor), [Atom IDE](https://zesty.org/tools/atom-package), [node-sdk](https://zesty.org/tools/node-sdk) and your teams internal scripts.\n\n## Diffing Versions\n\nYou may need to understand the difference between two versions of a code file. This can be done by using the diff button located on the file action bar.\n\n![Web IDE file action bar](https://kfg6bckb.media.zestyio.com/09-action-bar.png)\n\n![Web IDE file diff view](https://kfg6bckb.media.zestyio.com/08-diff-view.png)\n\nThe diff view will allow you to select two versions of the same file and see the changes that have occurred between them. This can be helpful to debug a code issue or to revert to a prior version of a file. Using the \"Load Version X\" button will update the code editor to the selected versions code. Once loaded you can either make additional changes to the code or save it as is.\n\n#### Diff Colors\n\n**Yellow** - Syntax warnings. These are not items that necessarily need to be corrected, however, they indicate items that should probably be cleaned up like unused variables, unused CSS variables, etc.&#x20;\n\n**Red** - Code that's been removed.\n\n**Green** - Code that's been added.\n\n### Version Rollbacks\n\nWhen accessing and restoring (saving/publishing) older versions of your code you’re creating new versions. In order to revert code you will need to follow these 3 steps.\n\n1. Use the diff view to load a prior version of the code.\n2. Save the now loaded prior version of code.&#x20;\n   1. _Saving creates a new version. At this point you have reverted the files code._\n3. Publish the new version.&#x20;\n   1. **By publishing you will make the reverted code live.**\n\n**For example**, _if working on version 4 but want to revert to version 2, select and load version 2. And on save version 5 is created. To send that code live, you would then publish it._\n\n## Developing With Version Control. E.G. Git\n\nVersion control software provides very standardized and complete solutions for managing code. As such we do not want to duplciate that work. For example; we do not provide a way to [**merge**](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts) code. This should be handled on a local machine using your version control system of choice.\n\nWe highly recommend combining version control best practices along with our [Atom IDE package](https://zesty.org/tools/atom-package). Using version control locally will provide you with workflows such as; [branching, merging and making pull requests](https://guides.github.com/introduction/flow/). If code is merged to a master branch that work needs to be synced with your Zesty.io instance. When synced those changes will be on the Zesty.io dev envrionment, allowing for previewing the code effects on content before publishing. When code on your instance is ready to go live you will need to publish it from the Web IDE.\n","category":"ui","service":"instances"},{"name":"Leads","url":"/instances/ui/leads","objectId":"-LbZ7uVTM3TnfQAeHJrb","item":[],"content":"---\ndescription: >-\n  The Leads Section is where submitted data from forms configured to work with\n  Zesty.io Leads can be collected, viewed, and exported.\n---\n\n# Leads\n\n### Overview\n\nIf a form submission is posted to a Zesty.io hosted website with an input value for `zlf`, Zesty.io will automatically store all the submitted data. The Leads section is where that stored data can be interacted with.\n\n{% hint style=\"info\" %}\nThe Leads section will be automatically display once a lead is stored with your Zesty.io instance.\n{% endhint %}\n\n![Leads section shown in the Manager UI navigation.](../../.gitbook/assets/01-leads.png)\n\n### Navigating the Leads Section\n\nLeads are shown in a paginated table that shows the date, email, first name, last name, and form group for the captured submissions.&#x20;\n\n{% hint style=\"info\" %}\nPlease note that while all of your lead form's data is not shown in the table, the CSV export will show all the form fields' data.&#x20;\n{% endhint %}\n\n![Leads section interface.](../../.gitbook/assets/02-leads-interface.png)\n\nEach row in the table is clickable and clicking on a row will show a snippet of the leads detail.\n\n![Lead capture details.](../../.gitbook/assets/03-leads-individual-entry.png)\n\n### Lead Export\n\nLeads can be exported using the box in the upper right-hand corner.\n\n![Leads can be exported using the export options shown above.](../../.gitbook/assets/04-leads-export.png)\n\nOptions for lead export include date range:\n\n![Date range option for lead export.](../../.gitbook/assets/05-leads-export-date-range.png)\n\nAnother option is form group. The form group's name comes from the [`zlf` value](https://zesty.org/guides/how-to-create-a-lead-form#zesty-io-lead-form) which is set when the form created in the view.\n\n![Form group option for lead export.](../../.gitbook/assets/06-leads-export-form-group.png)\n\nOnce your options have been set click the green Download CSV button to get your CSV.\n\n![Once you've set your options, use the download CSV button to get your leads.](../../.gitbook/assets/07-leads-export-csv-button.png)\n\n### How to Connect forms to ZLF\n\nTo configure a form to use Zesty.io's leads table, three items need to be true. First, the form needs to be using the `POST` method. Second, the form action needs to be to a relative path. Third, the form needs to include an input with a name attribute of `zlf` and a non-empty `value`.\n\nHere is an example:\n\n```\n<form method=\"post\" action=\"/thank-you/\" >\n          .........\n         <input type=\"hidden\" name=\"zlf\" value=\"Contact Page Form\" />\n          .........\n</from>\n```\n","category":"ui","service":"instances"},{"name":"Analytics","url":"/instances/ui/analytics","objectId":"-M_b5JcUMpGKE4G-xZq3","item":[],"content":"---\ndescription: Google Analytics can be viewed in Zesty.io.\n---\n\n# Analytics\n\n### Overview\n\nThe Analytics section allows users to view some Google Analytics (GA) in a dashboard in Zesty.io. If a user hasn't authenticated Zesty.io with Google they will be prompted to do so. Once authentication has been completed the some GA the interface will show some analytics and graphs.&#x20;\n\nGA authentication is optional. It purpose is to simply display some useful information so a user can view the data directly in Zesty.io instead of having to login to another application to view them.&#x20;\n\n**Note:** only users with owner, admin, and developer roles can set up analytics.\n\n![Analytics section dashboard.](../../.gitbook/assets/analytics.png)\n\n{% content-ref url=\"../guides/how-tos/analytics.md\" %}\n[analytics.md](../guides/how-tos/analytics.md)\n{% endcontent-ref %}\n","category":"ui","service":"instances"},{"name":"Schema","url":"/instances/ui/schema","objectId":"-Lb4UHMcquvlH0HQHi0r","item":[],"content":"---\ndescription: >-\n  Zesty.io Content Instances are comprised of Content Models, which are data\n  representations to guide data entry to create content items.\n---\n\n# Schema\n\n## What is Content Schema\n\nContent Schema is the combination of **Content Models**, **Content Fields**, and their respective behaviors. Content Schema provides the guidelines for creating, editing, and accessing content in a Zesty.io Content Instance. Changes to Content Schema also shapes the patterns of a Content Instance's auto generated API by assigning unique identifiers.\n\n{% hint style=\"info\" %}\nContent Schema is most commonly created and controlled through the Zesty.io Content Manager User Interface, but it can also be created through the API\n{% endhint %}\n\n{% embed url=\"https://youtu.be/aD0iVpQwONw\" %}\nBegin building your instance structure with content models.\n{% endembed %}\n\n### Content Models\n\nContent Models contain instructions (options and fields) that determine the format of the content items that can be created and stored in them. For example, let's pretend we created a **content model** called _Person_, and _Person_ has two fields: _name_ and _date of birth_. Person now serves as a model to follow when entering or editing content in the Person content model.\n\n### Content Fields\n\nContent Fields are stored on a content model to determine what type of content can be stored. Content fields are created with three key attributes:\n\n1. **Name** (A label used to guide people conducting content entry)&#x20;\n2. **Reference Name** (used by programmers, only alphanumeric characters and underscores)\n3. **Data Type** (used to determine input options and data requirements)\n\n#### **Content Model Example: Person**\n\n| Content Fields Names | Reference Name | Field Type |\n| -------------------- | -------------- | ---------- |\n| Name                 | name           | text       |\n| Date of Birth        | date\\_of birth | date       |\n\nFields can control what type of data is stored, for example, text or number, They also determine what the editing interface for a user is. Fields can be one of many types.\n\n### Content Fields Types\n\n| Type           | Description                                                                                                                                                                         |\n| -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| text           | Simple text, limit 160 characters                                                                                                                                                   |\n| textarea       | Simple text, can contain HTML, limit 1000 characters, produces a larger input area                                                                                                  |\n| wysiwyg        | What You See is What You Get (wysiwyg) is a rich editor that provides the user with tools to format text with titles, bolding, italics, links, Instagram embeds, video embeds, etc. |\n| markdown       | A text editing area that supports the [markdown format](https://www.markdownguide.org/basic-syntax/)                                                                                |\n| number         | A numeric character 0-9999999999                                                                                                                                                    |\n| currency       | A float style number i.e. 99.99                                                                                                                                                     |\n| sort           | A numeric character -9999999 - 9999999                                                                                                                                              |\n| image          | A field that stores an image reference Zesty.io Micro DAM                                                                                                                           |\n| files          | A field that stores a file reference from Zesty.io Micro DAM                                                                                                                        |\n| link           | Accepts a full URL                                                                                                                                                                  |\n| internal\\_link | Accepts a ZUID to a content item                                                                                                                                                    |\n| datetime       | Accepts a date in the format YYYY-MM-DD HH:mm:SS                                                                                                                                    |\n| date           | Accepts a date in the format YYYY-MM-DD                                                                                                                                             |\n| yes\\_no        | A boolean field that can have custom labels on a toggle                                                                                                                             |\n| dropdown       | Creates a pre-populated dropdown controlled by the user generated options                                                                                                           |\n| one\\_to\\_one   | One to one relationship to another content model's content item (requires relationship field on creation)                                                                           |\n| one\\_to\\_many  | One to many Relationship to another content model's content item. (requires relationship field on creation)                                                                         |\n","category":"ui","service":"instances"},{"name":"schema","url":"/instances/ui/schema","item":[{"name":"Building a Content Structure","url":"/instances/ui/schema/building-a-content-structure","objectId":"-Lb5-eXvpdVFhPf7Ukbs","item":[],"content":"---\ndescription: >-\n  Content Structure is the control panel for all your content. All content sets\n  are created in here. This is where set types are categorized on a high level\n  as Page, Page Group, or Data sets. Then where\n---\n\n# Building a Content Structure\n\n\n\n![Content Structure](https://yl440w.media.zestyio.com/cs-infographic.png)\n\n### Page\n\nA Single Page will create a template layout with a unique URL. These will display with a single page view in the Content section. A Single Page can be reused as a template for multiple pages but will only be called once using Parsley in the Editor.\n\nSee examples of single pages listed below.\n\n* Homepage &#x20;\n* Landing Page &#x20;\n* Contact Page\n\n### Page Group\n\nA Page Group creates a grouped collection of pages. These pages will each have their own URLs and display as a table under the Content section with each page from the Page Group as a row in the table. A Page Group can be called out as a set in Parsley in the Editor. Every page within a Page Group will share a single template layout using Parsley in the Editor.\n\nSee examples of Page Groups listed below.\n\n* Blog posts &#x20;\n* Articles &#x20;\n* Products &#x20;\n\n### Data Sets\n\nA Data Sets does not generate a template layout nor unique URLs. An Data Sets creates a collection of entries available globally within Parsley. Each Data Set is displayed as a table with each data entry as a row in the table. A Data Set can be nested under a Page or Page Group by assigning a parent when initially created.\n\nSee examples of Data Sets listed below.\n\n* Categories &#x20;\n* Slides &#x20;\n* FAQ's\n\n### Building a Content Structure\n\nA Content Structure can be found under the Schema section. To create a new content component, click **Single Page**, **Group with a View (Page Group)**, or **Headless (Data Set)** and fill out the required inputs.\n\n* **Display Name**: This is what displays throughout the Zesty.io interface as a label for the component. &#x20;\n* **Parsley Reference Name**: This is what will be used to call the component with Parsley in your HTML in the Editor.\n","category":"ui","service":"instances"},{"name":"Content Models","url":"/instances/ui/schema/content-models","objectId":"-Lb4YXpv1FWeDnG7hx8-","item":[],"content":"---\ndescription: >-\n  This article reviews what a Content Model is and the three different Content\n  Model types: Single With View, Group With View, and Headless. We cover what\n  makes them different and when to use each.\n---\n\n# Content Models\n\n### Overview\n\nA simplified way to think about Content Models is to think of tables in a database; each field creates a column, each entry draft creates a row. But a Content Model isn't just a store of data it also comes with an interactive interface for managing content, automated JSON and dynamic feeds, and can be connected to view files in the editor. How to control all those aspects of a content model depend on the type of model you start with and the fields you assign to it. There are three different types of Content Models and over twenty types of fields to allow you to create the most intuitive content managment interface for the requirements specific to each use.\n\n### Content Model Types\n\nThe three types of Content Models are: Single With View (Single), Group With View (Group) and Headless. The difference between the three boils down to two questions. First, do the entries in the content model generate a URL? And second, in the Content section, are the entries displayed together in a table or is each entry listed separately on the left hand column?\n\nFor the first questions, if the answer is yes, the entries do need to generate their own URL, then use either a Single or a Group type. Those two types do two important things. First they automatically add required fields for info all pages need, like a url path, meta information, and SEO settings. Second, they create a corresponding view file in the Editor to be used for the HTML markup for this content model's template. If the answer is no, the entries in this content model do not need to generate a URL, use a Headless type. The additional fields and view file will not be added.\n\nOnce you know your Content Model needs to generate URLs, the second question determines whether to use a Single or Group. If the entries should be displayed together in a table in the Content section use a Group type. If the entries need to be displayed individually in the Content section, use a Single type.\n\n### **Single With View**\n\nA Single Content Model is used for content entries that each generate a page and are listed separately in the content section sidebar. Examples of this Content Model type are Homepage, Blog Landing Page, Standard Page Template. Contrary to what the name might imply, a Single Content Model can have multiple entries. These entries would share the same fields, and use the same view file for a template, but would be listed independently in the Content section.\n\n### **Group With View**\n\nA Group Content Model is used for groups of entries (pages) which share a layout and can be viewed as a table in the Content section. Examples of this Content Model type are Articles, Team Members, Categories.\n\n### **Headless**\n\nA Headless Content Model is used for content entries which don't generate their own URL and are viewed as a table in the Content section. Examples of this type are Carousel Items, Testimonials, Client Logos or any on page item with multiple entries which do not click through to their own page or URL.\n\n### Fields\n\nAdding a field to a Content Model adds an input to the Content Model entries in the Content Tab and creates a column to store the content in the Content Model database table. The different types of fields create different inputs. For example a `text` type field creates a text type input and restricts the total number of characters that can be stored to that field. Where as an `image` type field creates a custom input that prompts a media selection modal and stores comma-separated media ids according to what's selected.\n","category":"ui","service":"instances"},{"name":"Adding Fields","url":"/instances/ui/schema/adding-fields","objectId":"-Lb4VVv8YSFDgmWeaicG","item":[],"content":"---\ndescription: >-\n  Fields are added to each of the high-level components in the Content\n  Structure. All of your site's content will be added into fields.\n---\n\n# Adding Fields\n\n### Get Started\n\nAfter you've created a Page, Page Group, or Data Set, you're ready to start adding fields for your content. Adding fields is done in the Schema section. Select the set that you would like to add fields to from the left sidebar list and then click on the Add Fields button.\n\n### Datatypes\n\nEach field is defined by its datatype and some datatypes are more specialized than others. For example, the Date field datatype only takes a date in the form of YYYY-MM-DD. Please see a list of all our field datatypes and their descriptions [here.](https://app.gitbook.com/fields) You'll need to select a datatype for the the field you are adding then give it label which will be used throughout the interface and a code reference name which will be used with Parsley.\n\n### Label v. Reference Name\n\nA field's label will be what's displayed throughout the Content entry interface to help you quickly spot what that entry is being used for. The reference name is what is used for your HTML templating on the backend using Parsley.\n\n### Deactivating Fields\n\nFields can also be deactivated if they are no longer useful to you. To deactivate a field follow these steps: 1. Navigate to the Schema section 2. Select the content model that contains the field that you want to deactivate 3. Find the field that you want to deactivate and select it 4. The selected field should have opened and there will be a red-orange \"Deactivate\" button located on the right-hand side of the row. Click the \"Deactivate\" button. 5. Confirm that you want to deactivate that field by clicking the green \"Yes, Deactivate it\" button in the confirmation pop-up.\n\nNote that fields can be re-activated at any time if you'd like to bring them back to the content model. Because of this, the reference names are appended to the fields even if they are deactivated. If you would like to deactivate a field but keep the same reference name for a new field, first change the reference name of the field that you want to deactivate, and then add a new field and assign the reference name that you would like. Duplicate Labels and Reference names are not allowed if they're within the same content model.\n","category":"ui","service":"instances"},{"name":"Fields","url":"/instances/ui/schema/fields","objectId":"-Lb4WreEE71clxVS6T1A","item":[],"content":"---\ndescription: >-\n  Zesty.io's Fields Content Models create content entry fields for a content set\n  and a view (page). Multiple field datatypes can be added to any content set or\n  page\n---\n\n# Fields\n\n### Overview\n\nZesty.io has approximately 20 field datatype options. Each option is named and describe below. As you go through adding fields to your Content Models, you'll give each field a label and reference name. The label is what you'll see in the Content section as you're making your entries. The reference is what you'll use to call that field using Parsley for templating your views, snippets, and/or feeds in the Editor section.&#x20;\n\n### Table of Field Types\n\n| Field Name     | Field Description                                                                                                                                                                                                                                                                                                                                                                                                  | XML Syntax                                                                                                                                                       |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Article Writer | This is a field that you can type in and add images to. You can drag and drop images into the field, and when you highlight text that you've already typed a box pops up with simple formatting options such as bold, italic, blockquote, and more.                                                                                                                                                                | `<article_writer name=\"articlewriter_field\" name_friendly=\"Article Writer Field\" />`                                                                             |\n| Color          | This is a field where you can enter color values such as '#ffffff' or 'blue'. It has a limit of 150 characters. It currently does not validate the hex code or have a color picker.                                                                                                                                                                                                                                | `<color name=\"color_field\" name_friendly=\"color_field\" />`                                                                                                       |\n| Currency       | This is a field where you can enter a dollar sign ($), numbers, and up to 2 decimal points. For example: $15.99. It has a limit of 150 characters.                                                                                                                                                                                                                                                                 | `<currency name=\"currency_field\" name_friendly=\"Currency Field\" />`                                                                                              |\n| Date           | This is a field where you can select a date from a pop-up calendar, you cannot type a date into the field, it must be selected from the calendar. The date is string-formatted as YYYY-MM-DD. To apply date formatting use \".date()\" call and include PHP data format characters.                                                                                                                                  | `<date name=\"date_field\" name_friendly=\"Date Field\" />`                                                                                                          |\n| DateTime       | This is a field where you can select a date from a pop-up calendar. After you've selected a date from the calendar, a time pop-up allows you to select a time from a 24-hour digital clock. The DateTime is string formatted YYYY-MM-DD HH-MM-SS. To apply date formatting use \".date()\" call and include PHP data format characters.                                                                              | \\<datetime name=\"datetimefield\" __ name\\_friendly=\"Datetime Field \"                                                                                              |\n| Dropdown       | This field creates a dropdown with different options made up of key:value pairs.                                                                                                                                                                                                                                                                                                                                   | `<dropdown name=\"default_fields\" name_friendly=\"Default Form Fields\" options=\"no_form:No Form;basic_form:Patient Basic Form;adv_form:Patient Advanced Form;\" />` |\n| External URL   | This creates a text field for a link which requires the form of a URL, e.g., http:// or https://. It has a maximum character limit of 150 characters.                                                                                                                                                                                                                                                              | `<link name=\"link_field\" name_friendly=\"Link Field\" />`                                                                                                          |\n| Media          | This creates a field for inserting an asset from the Media Bin. The number of assets can be limited by using the 'limit' parameter in your image tag. Note that when calling the field in your view, you must use the `getImage()` Parsley call to access the file URL, if not the file's CDN ID number will print out on the page. The default number of assets is 1, however this can be modified upon creation. | `<images name=\"main_image\" name_friendly=\"Main Image\" limit=\"1\" />`                                                                                              |\n| Internal Link  | This field creates a dropdown with all available internal links. The dropdown will have all the pages on the site, sorted alphabetically by Navigation title. In the View what prints out is the ZID associated with the selected page. Use the Parsley call `truepath()` to access the page URL.                                                                                                                  | `<internal_link name=\"btn_links_to\" name_friendly=\"Button Links To\" />`                                                                                          |\n| Markdown       | This field creates an open text area that accepts markdown syntax and formatting.                                                                                                                                                                                                                                                                                                                                  | `<markdown name=\"markdown_field\" name_friendly=\"Markdown Field\"/>`                                                                                               |\n| Number         | This creates a field for numbers (with optional decimal point), with a max input of 150 characters. Commas or currency signs are not allowed.                                                                                                                                                                                                                                                                      | `<number name=\"number_field\" name_friendly=\"Number Field\" />`                                                                                                    |\n| One to Many    | This field allows users to create one-to-many relationship between a page and a dataset, a pageset and a dataset, or a dataset and a dataset. There may be a limit to how many items can be related.                                                                                                                                                                                                               | `<one_to_many name=\"additional_fields\" name_friendly=\"Additional Form Fields\" relationship=\"custom_form_fields\" relationship_field=\"custom_field_name\" />`       |\n| One to One     | This field allows users to create one-to-one relationship between a page and a dataset, a pageset and a dataset, or a dataset and a dataset.                                                                                                                                                                                                                                                                       | `<one_to_one name=\"employee_category\" name_friendly=\"Employee Category\" relationship=\"employee_category\" relationship_field=\"employee_category\" list=\"1\" />`     |\n| Sort           | This creates a unique field to allow for a numerical sorting of pagesets and datasets. You can change the default sort number with the plus and minus buttons in the pageset or dataset, as well as in the table view.                                                                                                                                                                                             | `<sort name=\"sort_order\" name_friendly=\"Sort Order\" />`                                                                                                          |\n| Text           | This field creates a text field limited to 150 characters.                                                                                                                                                                                                                                                                                                                                                         | `<text name=\"homepage_title\" name_friendly=\"Homepage Title\" />`                                                                                                  |\n| Textarea       | <p>This creates an open text area with an unlimited character count. The bottom right corner is draggable for resizing. Line breaks print out as <br> tags unless you add '_raw' to the end of the field name in the Parsley call. Use carriage returns or HTML to create line breaks.</p>                                                                                                                         | `<textarea name=\"bubble_blurb\" name_friendly=\"Bubble Blurb\" list=\"1\" />`                                                                                         |\n| Toggle         | <p>This creates a customized toggle field made up of key:value pairs. The key will either be 0 (zero) or 1 (one), however the value is customizable. Since the key is either 0 or 1, the logic for if-statements or where-statements will take the form of </p><p><code>{{ if {scope.item} == 0 }}       {{ if {this == 0} }}</code> </p>                                                                          | `<yes_no name=\"field_type_toggle\" name_friendly=\"Field Type (text: 150 character limit; textarea: unlimited)\" options=\"0:Text;1:Textarea;\"  list=\"1\"/>`          |\n| UUID           |  This field generates a UUID when your content model is saved.                                                                                                                                                                                                                                                                                                                                                     |                                                                                                                                                                  |\n| WYSIWYG        | This creates a 'What You See Is What You Get' (WYSIWYG) text field, i.e., all formatting that you have, such as bolded text, font size, italics, etc. will be exactly what you see on your site.                                                                                                                                                                                                                   | `<wysiwyg_advanced name=\"image_caption\" name_friendly=\"Image Caption\" />`                                                                                        |\n|                |                                                                                                                                                                                                                                                                                                                                                                                                                    | ``                                                                                                                                                               |\n|                |                                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                                                                                  |\n|                |                                                                                                                                                                                                                                                                                                                                                                                                                    |                                                                                                                                                                  |\n","category":"ui","service":"instances"}],"content":"---\ndescription: >-\n  Content Structure is the control panel for all your content. All content sets\n  are created in here. This is where set types are categorized on a high level\n  as Page, Page Group, or Data sets. Then where\n---\n\n# Building a Content Structure\n\n\n\n![Content Structure](https://yl440w.media.zestyio.com/cs-infographic.png)\n\n### Page\n\nA Single Page will create a template layout with a unique URL. These will display with a single page view in the Content section. A Single Page can be reused as a template for multiple pages but will only be called once using Parsley in the Editor.\n\nSee examples of single pages listed below.\n\n* Homepage &#x20;\n* Landing Page &#x20;\n* Contact Page\n\n### Page Group\n\nA Page Group creates a grouped collection of pages. These pages will each have their own URLs and display as a table under the Content section with each page from the Page Group as a row in the table. A Page Group can be called out as a set in Parsley in the Editor. Every page within a Page Group will share a single template layout using Parsley in the Editor.\n\nSee examples of Page Groups listed below.\n\n* Blog posts &#x20;\n* Articles &#x20;\n* Products &#x20;\n\n### Data Sets\n\nA Data Sets does not generate a template layout nor unique URLs. An Data Sets creates a collection of entries available globally within Parsley. Each Data Set is displayed as a table with each data entry as a row in the table. A Data Set can be nested under a Page or Page Group by assigning a parent when initially created.\n\nSee examples of Data Sets listed below.\n\n* Categories &#x20;\n* Slides &#x20;\n* FAQ's\n\n### Building a Content Structure\n\nA Content Structure can be found under the Schema section. To create a new content component, click **Single Page**, **Group with a View (Page Group)**, or **Headless (Data Set)** and fill out the required inputs.\n\n* **Display Name**: This is what displays throughout the Zesty.io interface as a label for the component. &#x20;\n* **Parsley Reference Name**: This is what will be used to call the component with Parsley in your HTML in the Editor.\n","category":"ui","service":"instances"},{"name":"Health","url":"/instances/ui/health","objectId":"-Lb4Ihsb73NR_lPzSyuH","item":[],"content":"---\ndescription: >-\n  The Health Section, previously called the SEO Tab, is where you can edit and\n  manage redirects, create a robots.txt, and crawl the site for 404 links.\n---\n\n# Health\n\n### Overview\n\nIn the Health Section users can manager redirects, robots.txt, and the site crawler. All of these tools can help you diagnose and correct the health of your instance.&#x20;\n\nAccess the Health section via the Manager UI's main navigation bar at the top of the screen.&#x20;\n\n![Access the Health section via the Manager UI's main navigation.](<../../../.gitbook/assets/01-seo-navigate-to-seo (2).png>)\n\n### Manage Redirects\n\nThe Health section home screen shows the redirect manager. Here we can create new redirects, view and delete existing redirects, and mass upload redirects through CSV or XML format.\n\n![Redirects are accessed via the Health section.](../../../.gitbook/assets/02-seo-manage-redirects.png)\n\nWhen creating a new redirect, always start the old redirect with a forward slash, `/`, and include the entire path after the domain. Redirects are case sensitive, so `/old-path/` and `/Old-Path/` would need to be separate entries.\n\nTo mass upload from a CSV you can either do a single column, where you specify the old paths and manually select the new paths in the interface, or provide two columns, with the old paths on the left and the new paths on the right.\n\n```\n/old-path/,/new-path/\n/another-old-path/,/\n```\n\nTo mass upload from XML, use the XML format required for sitemap.xml files provided to search engines. This format only reads old paths and requires selecting the new path to redirect to using the interface.\n\n### robots.txt\n\n{% hint style=\"info\" %}\nRobots.txt is now located in the [Settings section](https://zesty.org/services/manager-ui/settings).\n{% endhint %}\n\nThis section is where you can input custom robots.txt statements to allow or disallow crawlers access to pages. The control for the site-wide settings for allowing or disallowing crawl access is in the Settings section of the Schema section.\n\n![The robots.txt file is accessed via the Health section.](../../../.gitbook/assets/health-section-robots.png)\n\nThe robots.txt editor allows control over search engine crawling rules per site. To access this tool, please navigate to the Health section.\n\nFrom here you can see the button labeled `Robots.txt`. Once clicked, the manager should open a new page with a text area allowing you to edit the file. Below the text area is a preview of what the final Robots.txt file will looks like.\n\n### Site Crawler\n\nAs of 2020 The Site Crawler (formerly Spice Crawler) has been deprecated. &#x20;\n","category":"ui","service":"instances"},{"name":"health","url":"/instances/ui/health","item":[{"name":"Redirects","url":"/instances/ui/health/redirects","objectId":"-Lb55NTupSQS06nqMcPt","item":[],"content":"---\ndescription: Create redirects with relative paths to ensure that none of your pages 404.\n---\n\n# Redirects\n\n### Overview\n\nPart of Zesty.io's Health section is a redirect manager. The redirect manager allows users to create and delete either 301 or 302 redirects, as well as to mass upload redirects without needing access to `.htaccess` files. All of your current redirects are visible upon navigating to your instance's Health section.\n\nTo navigate to the Health section select the Health/SEO icon in the main menu.\n\n![Access the health section from the Manager UI navigation bar.](<../../../.gitbook/assets/01-seo-navigate-to-seo (1).png>)\n\nThe Health/SEO section will show all redirects if any have been created and allow you to upload a CSV of redirects.&#x20;\n\n![Redirects can be created and managed through this interface.](<../../../.gitbook/assets/02-seo-manage-redirects (1).png>)\n\n{% hint style=\"warning\" %}\n_We resolve published pages prior to redirects to prevent a redirect from mistakenly  overtaking actual published pages._ Therefore be sure to unpublish items that you're making redirects for to ensure your redirects perform as expected.\n{% endhint %}\n\n### 301 and 302 redirects\n\nZesty.io allows for the creation of 301 or 302 redirects. Learn more about 301 redirects [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301) and 302 redirects [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302).\n\nCreate a 301 or 302 redirects by following these steps:&#x20;\n\n1\\. Add a specific link in the left-hand \"From\" column. Do not include the domain. For example: `/team-members`&#x20;\n\n2\\. Choose whether you want a 301 or 302 redirect by toggling the switch between the columns.&#x20;\n\n3\\. Search for a link by typing the name of the page into the textbox. For example, if your page was called \"About Us\" then you'd stay by typing \"about \" and see what results are returned. Select the link that you'd like it to redirect **to** in the right-hand \"To\" column from the results.&#x20;\n\n4\\. Click the green \"+ Redirect\" button to create the redirect.\n\n![Create redirect interface.](../../../.gitbook/assets/seo-redirect-from-to.png)\n\n## Mass Redirect\n\nTo use our mass redirect tool you can import a CSV file or an XML file to create redirects.\n\n### CSV\n\nTo create redirects with a CSV you need to have all of your \"From\" URLs in one column, your \"Target\" URLs in another column, and optional Code (e.g. 301 or 302) and TargetType (e.g. path, page, external) columns.\n\nFollow these steps to create a CSV of your redirects:\n\n1. Create a CSV with 4 columns\n2. Title your columns\n   1. From\n   2. Target\n   3. Code (_if not specified_ _defaults to 301)_\n   4. TargetType (_if not specified_ _defaults  to path)_\n3. If TargetType is path then use **relative path only**. Do not include your domain.\n4. If TargetType is page then Target must be a **ZUID**.\n\nSee the image below for an example of how your CSV should be formatted.\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-09-07 at 9.24.50 AM.png\" alt=\"\"><figcaption><p>Example CSV of redirects.</p></figcaption></figure>\n\nOnce your sheet is properly formatted click the gray \"Import CSV/XML\" button and import your sheet.\n\n![Redirect and CSV upload interface.](../../../.gitbook/assets/redirects.png)\n\n\n\n{% hint style=\"info\" %}\nWhen importing content into a date field use the format: MM/DD/YYYY or  MM/D/YY\n{% endhint %}\n\n### XML Sitemap\n\nTo mass upload from XML, use the XML format required for sitemap.xml files provided to search engines. This format only reads old paths and requires selecting the new path to redirect to using the interface.\n","category":"ui","service":"instances"}],"content":"---\ndescription: Create redirects with relative paths to ensure that none of your pages 404.\n---\n\n# Redirects\n\n### Overview\n\nPart of Zesty.io's Health section is a redirect manager. The redirect manager allows users to create and delete either 301 or 302 redirects, as well as to mass upload redirects without needing access to `.htaccess` files. All of your current redirects are visible upon navigating to your instance's Health section.\n\nTo navigate to the Health section select the Health/SEO icon in the main menu.\n\n![Access the health section from the Manager UI navigation bar.](<../../../.gitbook/assets/01-seo-navigate-to-seo (1).png>)\n\nThe Health/SEO section will show all redirects if any have been created and allow you to upload a CSV of redirects.&#x20;\n\n![Redirects can be created and managed through this interface.](<../../../.gitbook/assets/02-seo-manage-redirects (1).png>)\n\n{% hint style=\"warning\" %}\n_We resolve published pages prior to redirects to prevent a redirect from mistakenly  overtaking actual published pages._ Therefore be sure to unpublish items that you're making redirects for to ensure your redirects perform as expected.\n{% endhint %}\n\n### 301 and 302 redirects\n\nZesty.io allows for the creation of 301 or 302 redirects. Learn more about 301 redirects [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301) and 302 redirects [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302).\n\nCreate a 301 or 302 redirects by following these steps:&#x20;\n\n1\\. Add a specific link in the left-hand \"From\" column. Do not include the domain. For example: `/team-members`&#x20;\n\n2\\. Choose whether you want a 301 or 302 redirect by toggling the switch between the columns.&#x20;\n\n3\\. Search for a link by typing the name of the page into the textbox. For example, if your page was called \"About Us\" then you'd stay by typing \"about \" and see what results are returned. Select the link that you'd like it to redirect **to** in the right-hand \"To\" column from the results.&#x20;\n\n4\\. Click the green \"+ Redirect\" button to create the redirect.\n\n![Create redirect interface.](../../../.gitbook/assets/seo-redirect-from-to.png)\n\n## Mass Redirect\n\nTo use our mass redirect tool you can import a CSV file or an XML file to create redirects.\n\n### CSV\n\nTo create redirects with a CSV you need to have all of your \"From\" URLs in one column, your \"Target\" URLs in another column, and optional Code (e.g. 301 or 302) and TargetType (e.g. path, page, external) columns.\n\nFollow these steps to create a CSV of your redirects:\n\n1. Create a CSV with 4 columns\n2. Title your columns\n   1. From\n   2. Target\n   3. Code (_if not specified_ _defaults to 301)_\n   4. TargetType (_if not specified_ _defaults  to path)_\n3. If TargetType is path then use **relative path only**. Do not include your domain.\n4. If TargetType is page then Target must be a **ZUID**.\n\nSee the image below for an example of how your CSV should be formatted.\n\n<figure><img src=\"../../../.gitbook/assets/Screen Shot 2022-09-07 at 9.24.50 AM.png\" alt=\"\"><figcaption><p>Example CSV of redirects.</p></figcaption></figure>\n\nOnce your sheet is properly formatted click the gray \"Import CSV/XML\" button and import your sheet.\n\n![Redirect and CSV upload interface.](../../../.gitbook/assets/redirects.png)\n\n\n\n{% hint style=\"info\" %}\nWhen importing content into a date field use the format: MM/DD/YYYY or  MM/D/YY\n{% endhint %}\n\n### XML Sitemap\n\nTo mass upload from XML, use the XML format required for sitemap.xml files provided to search engines. This format only reads old paths and requires selecting the new path to redirect to using the interface.\n","category":"ui","service":"instances"},{"name":"Activity Log (prev Audit Trail)","url":"/instances/ui/audit-trail","objectId":"-Lb4VNx8x-uOQ9rIni5n","item":[],"content":"---\ndescription: >-\n  Activity Log keeps a log of all the actions that have been taken on your\n  instance.\n---\n\n# Activity Log (prev Audit Trail)\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/2a563373-a8be-43d4-b504-1e193db86125/2022-08-07%2017.00.11.gif)\n\n## What is Activity Log?\n\nActivity Log (previously Audit Trail) is a feature in Reports that allows you to review and gain insights about your instance's activity and see a timeline of user actions for a specific resource such as a content item, a model, a code file/snippet, or a setting. It is extremely useful in allowing you to conduct security audits to catch malicious user actions and in helping you prioritize what your team should be working on.\n\n**You can use Activity Log to:**\n\n1. [View Activity of a Resource such as a Content Item or a Model or a Code File](view-activity-of-a-resource.md)\n2. [View Activity of a Specific User](view-activity-of-a-user.md)\n3. [Download an Audit Trail Report of a Selected Resource for legal purposes](download-audit-trail-report.md)\n4. [View an Overview Timeline of Actions on Your Instance](view-instance-timeline.md)\n5. [View Insights About Your Instance Activity](view-instance-activity-insights.md)\n\n**We recommend viewing our how to guides using the links above or watching this video below.**\n\n{% embed url=\"https://www.youtube.com/watch?t=101&v=nC0RAYmad6w&feature=youtu.be\" %}\n\n## FAQ\n\n### I cannot access Activity Log. What should I do?\n\nDepending on your configuration and user type, this feature might not be available to you. Please contact your instance's administrator to give you permission to access this feature.\n\n### What are each of the Tabs in Activity Log?\n\n**The 4 tabs are:**\n\n1. **Resources:** a list of your most recently modified resources\n2. **Users:** a list of all the users in your instance\n3. **Timeline:** a timeline of all actions taken in your instance\n4. **Insights:** an activity data summary of your instance\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/be22f26c-3863-491e-a49c-0f5e2c37801c/2022-08-06%2015.26.29.gif)\n\n### Was this known as Audit Trail before?\n\nYes. This was known as Audit Trail until August 2022. We have now renamed it Activity Log. Activity Log will still allow you to generate audit trail reports for any resource you selected.\n","category":"ui","service":"instances"},{"name":"audit-trail","url":"/instances/ui/audit-trail","item":[{"name":"View Activity of a Resource","url":"/instances/ui/audit-trail/view-activity-of-a-resource","objectId":"YGhm32YctjJOYhyYXfbc","item":[],"content":"---\ndescription: How to use Activity Log to view the actions people have taken on a resource\n---\n\n# View Activity of a Resource\n\nSometimes, you may want to only view activity for a single resource such as a content item, model, code file, or setting. For example, you may want to know who scheduled a content item to be published or who most recently modified a code file.**There are four ways you can do this:**\n\n1. By selecting a resource from the Resources Tab in Activity Log\n2. By selecting the \"View Logs\" option in the:\n   1. Draft history card of an item in \"Content\"\n   2. Model info card of a model in \"Schema\"\n   3. Activity Log card in the bottom panel of a code file in \"Code\"\n\nBelow are step-by-step instructions for the methods mentioned above.\n\n## Method 1: From Activity Log\n\n### Step 1: Click on Reports in the left navigation bar\n\nThe Activity Log should open by default to the \"Resources\" tab.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/414b5728-797c-4c5f-9b2d-f6472b68b041/Screen%20Shot%202022-08-07%20at%2012.33.39%20PM.png)\n\n### Step 2: Click on a resource in the \"Resources\" tab of Activity Log\n\nFor example, I am clicking on \"Microsoft Active Directory integration [Zesty.io](http://zesty.io)\"\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/1afe2598-050e-4cae-9531-c357f0ac4321/Screen%20Shot%202022-08-07%20at%2012.35.30%20PM.png)\n\n### Step 3: View the activity timeline for your selected resource\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/18e8980a-a431-4419-baae-2d4599ec5166/Screen%20Shot%202022-08-07%20at%2012.38.22%20PM.png)\n\n## Method 2: From a content item in \"Content\"\n\n### Step 1: Click on \"Content\" in the left navigation bar\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/b55346cb-19bf-4163-953d-6d004537e349/Screen%20Shot%202022-08-07%20at%2012.41.32%20PM.png)\n\n### Step 2: Select a content item in the left panel\n\nFor example, I am selecting \"Marketplace\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/73362289-11d0-485a-99ed-9b50b0cba8da/Screen%20Shot%202022-08-07%20at%2012.42.36%20PM.png)\n\n### Step 3: Select \"View Logs\" from the publish history card\n\nYou can also select view logs from the draft history card within \"Content\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d4ab2f63-0a24-44a2-8597-b05ae6562390/Screen%20Shot%202022-08-07%20at%2012.44.05%20PM.png)\n\n### Step 4: View the activity timeline for your content item\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d38b3c23-9c46-40e5-853c-452168fd9e70/Screen%20Shot%202022-08-07%20at%2012.45.33%20PM.png)\n\n## Method 3: From a model in Schema\n\n### Step 1: Click on \"Schema\" in the left navigation bar\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/e979656b-e213-445f-b315-6b498bf6056f/Screen%20Shot%202022-08-07%20at%2012.50.06%20PM.png)\n\n### Step 2: Select a model from the left panel\n\nFor example, I have selected \"Entities\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/8203ba39-c7ab-447a-b97c-798ec176d84f/Screen%20Shot%202022-08-07%20at%2012.51.15%20PM.png)\n\n### Step 3: Select \"View Logs\" from the model info card (on the right)\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d30fb0a9-46ae-4e89-9f55-2c3407b5c9f7/Screen%20Shot%202022-08-07%20at%2012.51.51%20PM.png)\n\n### Step 4: View the activity timeline for your model\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/0c50407b-0689-4fd7-b9a4-9c17a8e75884/Screen%20Shot%202022-08-07%20at%2012.54.56%20PM.png)\n\n## Method 4: From a code file/snippet in Code\n\n### Step 1: Click on \"Code\" in the left navigation bar\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/e6ef1628-fe7b-4e7b-bba6-20cfdda9dd8b/Screen%20Shot%202022-08-07%20at%2012.56.01%20PM.png)\n\n### Step 2: Select a Code File or Snippet\n\nFor example, I have selected \"404-page\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/1870d4cf-b468-44f1-8a86-640387429658/Screen%20Shot%202022-08-07%20at%2012.57.06%20PM.png)\n\n### Step 3: Expand the \"More Information\" bottom panel\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/801a3255-4ef3-4ce1-b68b-e1b26ea00d15/Screen%20Shot%202022-08-07%20at%2012.58.06%20PM.png)\n\n### Step 4: Select \"View Logs\" from the audit trail card\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/ca2df7b9-b01e-4ac4-99e0-af2d639e5ecd/Screen%20Shot%202022-08-07%20at%201.00.43%20PM.png)\n\n### Step 4: View the activity timeline for your code file\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d5c8aee3-104a-4689-b2ce-e981bb2b3568/Screen%20Shot%202022-08-07%20at%2012.59.34%20PM.png)\n","category":"ui","service":"instances"},{"name":"View Activity of a User","url":"/instances/ui/audit-trail/view-activity-of-a-user","objectId":"RJwwC5qccAxQq22MilKx","item":[],"content":"---\ndescription: >-\n  How to use Activity Log to view the actions a user has taken on different\n  resources\n---\n\n# View Activity of a User\n\nIn some scenarios, you may want to review a specific user's actions. For example, you may want to know what resources a user has acted on and what actions they took on those resources. Below are the step-by-step instructions on how you can conduct such a review.\n\n## Step 1: Select Reports in the left navigation bar\n\nThe Activity Log should open by default to the \"Resources\" tab\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/414b5728-797c-4c5f-9b2d-f6472b68b041/Screen%20Shot%202022-08-07%20at%2012.33.39%20PM.png)\n\n## Step 2: Select the \"Users\" tab on Activity Log\n\nYou will now be able to view a list of all the users on your instance sorted in the order of most recently active.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/00977093-401e-4ae3-aa0f-030b4d72a4f7/Screen%20Shot%202022-08-07%20at%204.20.45%20PM.png)\n\n## Step 3: Select a user on the \"Users\" tab of Activity Log\n\nIn this case, I am selecting Gisele Blair.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/cd01ca19-89b0-4e45-86f9-94276019d108/Screen%20Shot%202022-08-07%20at%204.21.39%20PM.png)\n\n## Step 4: On the user page, select a resource they have worked on\n\nIn this case, I am selecting the \"Microsoft Active Directory integration [Zesty.io](http://zesty.io)\" resource.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/2e260e23-eced-4fe9-a6f2-5291906ce790/Screen%20Shot%202022-08-07%20at%204.24.04%20PM.png)\n\n## Step 5: View the timeline of actions taken by the user on the resource\n\nNote: By default, the view that loads only shows the action that the user you have selected has taken. You can always reset this by going to the \"Users\" filter and selecting the \"All\" option.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/8982fe1f-f333-42ef-8e98-98c5fbe69a5d/Screen%20Shot%202022-08-07%20at%204.25.51%20PM.png)\n","category":"ui","service":"instances"},{"name":"Download Audit Trail Report","url":"/instances/ui/audit-trail/download-audit-trail-report","objectId":"JtWBeW4Xp0jB3qvPEMLK","item":[],"content":"---\ndescription: How to use Activity Log to generate PDF log reports\n---\n\n# Download Audit Trail Report\n\nYour legal team may need to use log data as evidence for legal purposes. In these situations, they may request a PDF file of all actions taken on a resource/s which they can register with a court of law. Below are the steps to download such a PDF report.\n\n## Step 1: Click on Reports in the left navigation bar\n\nThe Activity Log should open by default to the \"Resources\" tab.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/414b5728-797c-4c5f-9b2d-f6472b68b041/Screen%20Shot%202022-08-07%20at%2012.33.39%20PM.png)\n\n## Step 2: Click on a resource in the \"Resources\" tab of Activity Log\n\nFor example, I am clicking on \"Microsoft Active Directory integration [Zesty.io](http://zesty.io/)\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/1afe2598-050e-4cae-9531-c357f0ac4321/Screen%20Shot%202022-08-07%20at%2012.35.30%20PM.png)\n\n## Step 3: Click on \"Export Audit Trail Report\" (in the top right corner) in the resources view\n\nThis will load a new tab.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/659f95af-0cdd-4f11-aa97-2a431cad5441/Screen%20Shot%202022-08-07%20at%204.43.32%20PM.png)\n\n## Step 4: In the new tab, click on the blue \"Save\" button (in the bottom center)\n\nMake sure you have the destination set as \"Save as PDF\" and the checkbox for \"Background Graphics\" selected.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/b202bb2c-7b58-4a67-b860-5dc6fe9c8403/Screen%20Shot%202022-08-07%20at%204.47.01%20PM.png)\n","category":"ui","service":"instances"},{"name":"View Instance Activity Insights","url":"/instances/ui/audit-trail/view-instance-activity-insights","objectId":"YNJZxOBEIOmRDgZlv9uZ","item":[],"content":"---\ndescription: >-\n  How to use Activity Log to view the actions a user has taken on different\n  resources\n---\n\n# View Instance Activity Insights\n\nWith Activity Log Insights, you can learn what kind of resources your team has been working on. This can allow you to better allocate how your team spends time on tasks ensuring you meet your project objectives faster. Below are the steps on how to access these insights.&#x20;\n\n## Step 1: Click on Reports in the left navigation bar\n\nThe Activity Log should open by default to the \"Resources\" tab.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/414b5728-797c-4c5f-9b2d-f6472b68b041/Screen%20Shot%202022-08-07%20at%2012.33.39%20PM.png)\n\n## Step 2: Select the \"Insights\" tab on Activity Log\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/593fceb1-dd33-4b4f-9fa4-1ccc2be7d990/Screen%20Shot%202022-08-07%20at%204.52.07%20PM.png)\n\n## Step 3: View insights about your instance\n\nHere you will see a breakdown of your activity by resource and your top 5 active users. You can further filter your insights by action type, user, and date.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/251a4589-2d12-4a5a-8c45-69a235122dc8/insights%20page.png)\n","category":"ui","service":"instances"},{"name":"View Instance Timeline","url":"/instances/ui/audit-trail/view-instance-timeline","objectId":"OdV1DNR9pWojK0E6XDI5","item":[],"content":"---\ndescription: How to view a timeline of all actions taken on your instance\n---\n\n# View Instance Timeline\n\nIn some instances you may want to gain immediate context on what your team members were most recently working on by viewing a timeline of all instance actions. To get to such a view take the following steps. &#x20;\n\n## Step 1: Click on Reports in the left navigation bar\n\nThe Activity Log should open by default to the \"Resources\" tab.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/414b5728-797c-4c5f-9b2d-f6472b68b041/Screen%20Shot%202022-08-07%20at%2012.33.39%20PM.png)\n\n## Step 2: Select the \"Timeline\" tab on Activity Log\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/4f7520da-7084-4123-9ca8-fadabdf35bea/Screen%20Shot%202022-08-07%20at%204.55.39%20PM.png)\n\n## Step 3: View the timeline of all actions taken on your instance\n\nYou can filter this timeline by action type, resource type, user, and date.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/32149d1d-92c6-4d95-884d-4e3ca3f21a82/Screen%20Shot%202022-08-07%20at%204.56.32%20PM.png)\n","category":"ui","service":"instances"}],"content":"---\ndescription: How to use Activity Log to view the actions people have taken on a resource\n---\n\n# View Activity of a Resource\n\nSometimes, you may want to only view activity for a single resource such as a content item, model, code file, or setting. For example, you may want to know who scheduled a content item to be published or who most recently modified a code file.**There are four ways you can do this:**\n\n1. By selecting a resource from the Resources Tab in Activity Log\n2. By selecting the \"View Logs\" option in the:\n   1. Draft history card of an item in \"Content\"\n   2. Model info card of a model in \"Schema\"\n   3. Activity Log card in the bottom panel of a code file in \"Code\"\n\nBelow are step-by-step instructions for the methods mentioned above.\n\n## Method 1: From Activity Log\n\n### Step 1: Click on Reports in the left navigation bar\n\nThe Activity Log should open by default to the \"Resources\" tab.\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/414b5728-797c-4c5f-9b2d-f6472b68b041/Screen%20Shot%202022-08-07%20at%2012.33.39%20PM.png)\n\n### Step 2: Click on a resource in the \"Resources\" tab of Activity Log\n\nFor example, I am clicking on \"Microsoft Active Directory integration [Zesty.io](http://zesty.io)\"\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/1afe2598-050e-4cae-9531-c357f0ac4321/Screen%20Shot%202022-08-07%20at%2012.35.30%20PM.png)\n\n### Step 3: View the activity timeline for your selected resource\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/18e8980a-a431-4419-baae-2d4599ec5166/Screen%20Shot%202022-08-07%20at%2012.38.22%20PM.png)\n\n## Method 2: From a content item in \"Content\"\n\n### Step 1: Click on \"Content\" in the left navigation bar\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/b55346cb-19bf-4163-953d-6d004537e349/Screen%20Shot%202022-08-07%20at%2012.41.32%20PM.png)\n\n### Step 2: Select a content item in the left panel\n\nFor example, I am selecting \"Marketplace\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/73362289-11d0-485a-99ed-9b50b0cba8da/Screen%20Shot%202022-08-07%20at%2012.42.36%20PM.png)\n\n### Step 3: Select \"View Logs\" from the publish history card\n\nYou can also select view logs from the draft history card within \"Content\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d4ab2f63-0a24-44a2-8597-b05ae6562390/Screen%20Shot%202022-08-07%20at%2012.44.05%20PM.png)\n\n### Step 4: View the activity timeline for your content item\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d38b3c23-9c46-40e5-853c-452168fd9e70/Screen%20Shot%202022-08-07%20at%2012.45.33%20PM.png)\n\n## Method 3: From a model in Schema\n\n### Step 1: Click on \"Schema\" in the left navigation bar\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/e979656b-e213-445f-b315-6b498bf6056f/Screen%20Shot%202022-08-07%20at%2012.50.06%20PM.png)\n\n### Step 2: Select a model from the left panel\n\nFor example, I have selected \"Entities\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/8203ba39-c7ab-447a-b97c-798ec176d84f/Screen%20Shot%202022-08-07%20at%2012.51.15%20PM.png)\n\n### Step 3: Select \"View Logs\" from the model info card (on the right)\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d30fb0a9-46ae-4e89-9f55-2c3407b5c9f7/Screen%20Shot%202022-08-07%20at%2012.51.51%20PM.png)\n\n### Step 4: View the activity timeline for your model\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/0c50407b-0689-4fd7-b9a4-9c17a8e75884/Screen%20Shot%202022-08-07%20at%2012.54.56%20PM.png)\n\n## Method 4: From a code file/snippet in Code\n\n### Step 1: Click on \"Code\" in the left navigation bar\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/e6ef1628-fe7b-4e7b-bba6-20cfdda9dd8b/Screen%20Shot%202022-08-07%20at%2012.56.01%20PM.png)\n\n### Step 2: Select a Code File or Snippet\n\nFor example, I have selected \"404-page\".\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/1870d4cf-b468-44f1-8a86-640387429658/Screen%20Shot%202022-08-07%20at%2012.57.06%20PM.png)\n\n### Step 3: Expand the \"More Information\" bottom panel\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/801a3255-4ef3-4ce1-b68b-e1b26ea00d15/Screen%20Shot%202022-08-07%20at%2012.58.06%20PM.png)\n\n### Step 4: Select \"View Logs\" from the audit trail card\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/ca2df7b9-b01e-4ac4-99e0-af2d639e5ecd/Screen%20Shot%202022-08-07%20at%201.00.43%20PM.png)\n\n### Step 4: View the activity timeline for your code file\n\n**From here you can:**\n\n* Filter the timeline by action type, user, and date\n* View the resource\n* Export Audit Trail report for legal purposes\n* View and message all users who have modified the resource\n\n![](https://t20654803.p.clickup-attachments.com/t20654803/d5c8aee3-104a-4689-b2ce-e981bb2b3568/Screen%20Shot%202022-08-07%20at%2012.59.34%20PM.png)\n","category":"ui","service":"instances"},{"name":"Tabs","url":"/instances/ui/tabs","objectId":"dIGPG5BGxT7IzC0JjH5s","item":[],"content":"---\ndescription: Toggle between pinned tabs quickly to accelerated your workflow\n---\n\n# Tabs\n\n## What are Tabs?\n\nSometimes when working on a project, you may want to quickly switch back and forth between different apps or resources. For example you may want to continuously switch between a content resource, a media item, and a code resource as you complete a project.&#x20;\n\nWith the Zesty Tabs experience you can achieve this by pinning multiple apps and resources as tabs so that they are permanently present and accessible in the top navigation bar.&#x20;\n\n<figure><img src=\"../../.gitbook/assets/Screen Shot 2022-10-04 at 3.32.08 AM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## FAQ&#x20;\n\n### How do I pin a Tab?&#x20;\n\n1. Go to the current tab and click on the pin icon in the right part of the tab.&#x20;\n2. It will then become pinned.\n\n<figure><img src=\"../../.gitbook/assets/Screen Shot 2022-10-04 at 3.21.47 AM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### How do I open a Tab?&#x20;\n\nNew tabs automatically open as you switch between different resources and apps of your instance. However they only permanently remain if you pin them. If you do not pin a tab, it automatically closes once you switch to a new resource/app. See the GIF below for reference.&#x20;\n\n<figure><img src=\"../../.gitbook/assets/2022-10-04 03.26.02.gif\" alt=\"\"><figcaption></figcaption></figure>\n\n### How do I close a Tab?&#x20;\n\n#### **If your tab is not pinned (pin only has an outline):** &#x20;\n\nSimply switch to a different tab. You will automatically close your existing tab.&#x20;\n\n#### **If your tab is pinned (pin has a grey fill):**\n\n* First unpin the tab by clicking on the pin icon.\n* Then switch to a different resource or tab.\n\n### What is the More Menu?&#x20;\n\nSometimes you may happen to pin many tabs (for example let's assume 10 tabs). In such a scenario, all tabs cannot easily fit in the space available. Hence we shift the earliest pinned tabs to a \"More menu\" which you can find at the end of all the pinned tabs.&#x20;\n\n**From this menu you can:**&#x20;\n\n* Go to pinned tabs\n* Unpin pinned tabs\n* Search pinned tabs (when there are one too many pinned)\n\n<figure><img src=\"../../.gitbook/assets/Screen Shot 2022-10-04 at 3.33.24 AM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"AI Content Assistant","url":"/instances/ui/ai-content-assistant","objectId":"oTi47G1gCrIrwzJZcge9","item":[],"content":"---\ndescription: >-\n  What used to take hours to write, now takes just minutes with our AI Content\n  Assistant in the Zesty content management system.\n---\n\n# AI Content Assistant\n\n{% embed url=\"https://www.youtube.com/watch?v=qngyFVYofqw\" %}\n\nOur AI Content Assistant, powered by [OpenAI](https://openai.com/blog/chatgpt/), eliminates writer's block and simplifies the content creation process. It’s a groundbreaking approach to content creation, freeing up time for marketers and content creators to focus on other aspects of their digital strategy. In just a matter of minutes, you can create and edit content ranging from “5 Tricks to Teach your Pet Dog”, to “Best Practices for E-Commerce” to “How to Build a Headless Blog Website”, the possibilities are endless.&#x20;\n\n## How to Generate Long Form Content in Zesty?&#x20;\n\nWriting long form content traditionally by yourself can be especially time consuming. You need to do extensive research, tackle writer's block, and then go through multiple rounds of drafts. This usually ends up with an article taking at least 5 hours to create. With our AI Content Assistant, those 5 hours are cut down to just 20 minutes.&#x20;\n\nSimply provide a prompt or topic for your article to our AI assistant. It could be a question, a statement, or an idea related to a topic. Once the context is provided, our AI Content Assistant, with ChatGPT3 under the hood will generate a full length article based on the prompt. You can then simply review the generated content, and make appropriate edits and additions as necessary, and you’re then ready to hit publish!\n\nReview the steps below to learn more.\n\n### Step 1: Select a WYSIWYG or multi line text text input and click on the brain icon in the top right corner\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.32.09 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Write a prompt describing the content you want the AI assistant to write for you and click on generate\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.33.56 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Review the generated content and click on the Approve button once ready\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.36.04 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Your Content is Now Entered!&#x20;\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.37.15 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## How to Generate Headlines in Zesty?&#x20;\n\nCreating an engaging headline for your article is an important step in the writing process. A headline can be the difference between an article that is read and one that is not. With our new AI Content Assistant, you can be assured that the headlines generated are more creative and relevant to the topic at hand.&#x20;\n\n### Step 1: Select a single line input of a content item and click on the Brain Icon in the top right corner&#x20;\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.01.14 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Write a prompt describing what you want the AI assistant to write for you and click on the Generate button\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.02.07 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 3: Review and edit and click on the Approve Button when ready\n\nOr click on generate again if you want to modify your prompt to get a different response.\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.03.05 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 4: Your Content is Now Ready to Go!\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2023-02-14 at 12.03.28 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"},{"name":"Settings","url":"/instances/ui/settings","objectId":"-Lz9l8UeG6KSirq5yaFi","item":[],"content":"---\ndescription: Settings allow you to access Zesty.io Settings saved in the manager\n---\n\n# Settings\n\n### Introduction\n\nAn instance's settings control a number of an instance's attributes from forcing HTTPS to defining fonts. Learn how to access your instances setting below.&#x20;\n\n### Accessing An Instance's Settings\n\nAn instance's settings are located under the Settings section in the Content Manger.&#x20;\n\n![Settings section in the content manager navigation.](../../../.gitbook/assets/01-settings.png)\n\nAn instance's settings are broken down into 4 subsections:&#x20;\n\n* Instance Settings\n* Styles\n* Fonts\n* Account Settings\n\n![Instance settings subsections.](../../../.gitbook/assets/02-settings-cats.png)\n\nEach subsection has their own categories as well. Each subsections' categories are located in the left-hand sidebar navigation (outlined in purple below).\n\n![Subsection's utilities are shown in the left-hand navigation.](../../../.gitbook/assets/03-settings-cats-sections.png)\n\nOnce one of the categories is selected the main portion of the screen will show you your options (outlined in purple below). Options will vary depending on which utility has been selected.\n\n![All of a utilities options will be shown in the main portion of the screen.](<../../../.gitbook/assets/04-settings-cats-sections options.png>)\n\n### Accessing Instance Settings With Parsley\n\nTo call your settings using Parsley in the Editor, use the `{{ setting }}` reference tag. Type `{{ setting.` and you'll see a dropdown of all your available reference tags in your instance-wide settings.\n","category":"ui","service":"instances"},{"name":"settings","url":"/instances/ui/settings","item":[{"name":"Instance Settings","url":"/instances/ui/settings/instance-settings","objectId":"-LzJl2jib292AGru-jpY","item":[],"content":"---\ndescription: >-\n  A variety of developer-oriented settings to help customize backend\n  functionality.\n---\n\n# Instance Settings\n\n### Introduction\n\nInstance settings are developer-oriented settings that help customize an instance's backend functionality. The most commonly edited configurations are Google Analytics, contact form options, and HTTPS settings.&#x20;\n\n![The Instance Settings subsection is location under the Settings section.](../../../.gitbook/assets/instance-settings.png)\n\nEach category contains a list of settings. Categories are located in the left-hand sidebar of the window (image below). In the list below you'll find a list of which settings are nested under which category along with descriptions from the UI.\n\n![Instance Setting categories in the left-hand navigation outlined in purple.](<../../../.gitbook/assets/instance-settings (1).png>)\n\n### **General**\n\n* **Search Engine Crawlable:** Search engines will have permission to index each page of your site allowing for greater visibility\n* **HTTPS On:** If your site has an SSL certificate then contact support@zesty.io about secure hosting\n* **Always redirect to HTTPS:** This will redirect any http requests to https (if https is on).\n* **Always prepend WWW to my domain**\n* **Show site name in meta title:** Appends your site name, located in Global dataset, to the title tag.\n\n### **Developer**&#x20;\n\n* **Use Parsley Debugger:** Option to how and when the debugger should be presented&#x20;\n* **Show Zesty Tips:** Choose to turns Zesty.io Tips on of off\n* **Access to Instant JSON API for content**\n* **Allow cross domain access to Instant JSON API:** Toggle CORS Headers\n* **Automatically include JavaScript in head**\n* **Custom View Endpoints CORS Allow Any Origin**\n* **Auto Include Google Analytics Tag:** if on (default) it will auto include a Google Analytics tracking script tag which is created using the **Google Analytics ID** setting. IF the **Google Analytics ID** is not written as a setting, it wont do anything. If the **Auto Include Google Analytics Tag** setting is OFF, no GA script tag will be auto included regardless if **Google Analytics ID** code is set.\n\n### **Contact form**\n\n* **Sending Email:** This email address will be used to send an outbound email. We will verify this email, and then register it with Amazon SES (our mailing service provider). This will whitelist your email, helping you to avoid the junk folder.\n* **Email Recipients:** This can be a single email address or comma separated email addresses. The email(s) in this area will receive form information upon submit.\n* **Reply Email:** When the form is complete, a notification email is sent to the person who filled out the form. When they hit reply on that email, the email entered here is who they reply to.\n* **Form Honey Pot:** If this value is set, all posted forms will look for an input whose name matches the honeypot setting value. If forms are posted without an input whose name matches the honeypot setting value, they will not succeed. If a form is posted containing an input whose name matches the honeypot setting value, and this input has a value, the post will fail. It needs to be submitted with no value to succeed. Setting a honeypot value AFFECTS ALL FORMS IMMEDIATELY.\n* **Safe Emails Send To List :** The Safe Emails feature allows users to enter a comma separated list of emails that are safe for form submissions to be sent to.  All form submissions using the [email override feature](https://zesty.org/guides/how-to-create-a-lead-form#email-override-setting-a-specific-form-to-notify-a-different-email-than-the-one-in-settings) will be validated against this list before the email is sent.&#x20;\n\n### **Verification**&#x20;\n\n* Keybase Filename\n* Keybase Value\n\n### **SEO**&#x20;\n\n* Content Set ID override for /feed.xml\n* Enable Canonical Tags\n\n### **I18n**\n\n* **Default Language Page:** When you have multiple languages, this is the starting page url PATH. Empty is none. This setting creates a meta tag in every page head.\n\n### **Tag Managers**\n\n* **Google Tag Manager ID:** Typically in the format: GTM-XXXXXXX. This will auto inject scripts into the head and body for you on the live production website.\n\n### **Analytics**\n\n* **Google Analytics ID:** It is a unique code that Google Analytics gives you to track your website hits. This is required for Zesty to track hits to your website.\\*|\\*What is an Urchin ID?\n* **Google Profile ID:** The main account created with google analytics is tied to a unique profile ID. This is necessary for Zesty to pull data and show your analytics.\\*|\\*Google Profile ID\n* **Use Google Universal Code:** The new version of Googles tracking code.\\*|\\*Google Universal Code\n* **Display Advertising Support:** If you turn on Display Advertising, you need to enable Re-marketing with Google Analytics or Google Display Network (GDN) Impression Reporting. With this setting on the Analytics tracking code is updated. Once you have made that change, Google Analytics collects the information it normally does, as well as the DoubleClick cookie when that cookie is present.\n* **Google Auto Linker:** When tracking sessions across multiple domains, the Client-ID value has to be transferred from one domain to the other. To do this, the Analytics tracking code has linking features that allow the source domain to place the Client-ID in the URL parameters of a link, where the destination domain can access it. Add your secondary domain or domains here as a comma separated list.\n\n### Security\n\n* **Header: X-Frame-Options**: Learn more at [https://developer.mozilla.org/enUS/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/enUS/docs/Web/HTTP/Headers/X-Frame-Options)\n* **Strict-Transport-Security:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)\n* **Content-Security-Policy:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)\n* **X-Content-Type-Options:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)\n* **Referrer-Policy:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)\n* **Feature-Policy:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy)\n","category":"ui","service":"instances"},{"name":"Instance Meta Tags","url":"/instances/ui/settings/instance-meta-tags","objectId":"-M74xS3xPH2cUmSD_4jb","item":[],"content":"---\ndescription: Learn how to add instance scoped meta tags to the document head.\n---\n\n# Instance Meta Tags\n\nInstance scoped meta tags are global and are a great place to provide development specific meta information such as viewport, device, character set, etc. These are managed underneath the instance settings.\n","category":"ui","service":"instances"},{"name":"Instance Styles","url":"/instances/ui/settings/less-variables","objectId":"-M6b3WW0O3pSMXEmd6Ox","item":[],"content":"---\ndescription: >-\n  Access and edit style variables through the Settings section using a\n  non-technical interface to update colors, fonts, and other design elements.\n---\n\n# Instance Styles\n\n## Overview\n\nThe Styles subsection will only be available if your blueprint has style variables built-in. A blueprints styles are defined on instance creation via a file called plate-variables.xml. If you do not see a Styles subsection then your blueprint does not have styles.\n\n![Styles subsection is found under the Settings section.](../../../.gitbook/assets/settings-styles-subsection.png)\n\n## What are style variables?\n\nEach of the Styles have an associated variable. That variable is denoted by the `@` followed by its name, for example: `@body-bg`. Each of these variables is defined in the instance's [style sheet](https://zesty.org/services/manager-ui/editor/stylesheets).\n\n![Styles and style variable names.](../../../.gitbook/assets/style-variable.png)\n\n## Editing your variables\n\nStyles offer a variety of options from font style to colors. The left-hand sidebar shows all the available categories (outlined in purple below).\n\n![Styles categories outlined in the left-hand sidebar.](<../../../.gitbook/assets/style categories.png>)\n\nOnce a category is selected from the left-hand navigation the main portion of the screen to the right will show the editable fields for you (outlined in purple below) to start customizing the variables.\n\n![The editable fields of a category in the main portion of the screen.](../../../.gitbook/assets/style-category-fields.png)\n\nThe available style variables will depend on your selected Blueprint. Once you're finished editing your styles be sure to save them so your changes populate.\n\n{% hint style=\"info\" %}\nIn order for the style variables to work they must be added to your style sheet _before_ you edit them.\n{% endhint %}\n\n![Example of style variables in a style sheet. ](<../../../.gitbook/assets/Screen Shot 2020-02-19 at 12.13.28 PM.png>)\n\n## Accessing your variables in the Editor\n\nIn the Editor section, you can add your style variables to a LESS/SCSS file in the under Style Sheets section. All variable names are listed in the Styles subsection. Add those variable names to your style sheet, for example: `background-color: @body-bg;`.\n","category":"ui","service":"instances"},{"name":"Instance Fonts","url":"/instances/ui/settings/fonts","objectId":"-M0UHtzKYABynNFcSeKS","item":[],"content":"---\ndescription: Add fonts through the Settings section using a non-technical interface.\n---\n\n# Instance Fonts\n\n### Overview\n\nFonts can easily be added to your instance via the Fonts subsection of the Settings section. There are hundreds of fonts to choose from. All of Google Fonts are available through this interface.&#x20;\n\n![Access the Fonts subsection through the Setting section.](../../../.gitbook/assets/settings-subsection-fonts.png)\n\n### Adding Fonts to your instance\n\nSearch for the fonts you'd like to add to your instance. Once you find a font that you like simply click that font's install button.&#x20;\n\n![Fonts are added with the Install button.](../../../.gitbook/assets/font-selection.png)\n\n### Adding fonts to the Editor\n\nAfter installation, fonts will still need to be added to the instance's style sheet. Use the font-family property to add the font(s) to your style sheets.\n\n![Add fonts to your stylesheets with the font-family property.](../../../.gitbook/assets/font-family-property.png)\n\n","category":"ui","service":"instances"}],"content":"---\ndescription: >-\n  A variety of developer-oriented settings to help customize backend\n  functionality.\n---\n\n# Instance Settings\n\n### Introduction\n\nInstance settings are developer-oriented settings that help customize an instance's backend functionality. The most commonly edited configurations are Google Analytics, contact form options, and HTTPS settings.&#x20;\n\n![The Instance Settings subsection is location under the Settings section.](../../../.gitbook/assets/instance-settings.png)\n\nEach category contains a list of settings. Categories are located in the left-hand sidebar of the window (image below). In the list below you'll find a list of which settings are nested under which category along with descriptions from the UI.\n\n![Instance Setting categories in the left-hand navigation outlined in purple.](<../../../.gitbook/assets/instance-settings (1).png>)\n\n### **General**\n\n* **Search Engine Crawlable:** Search engines will have permission to index each page of your site allowing for greater visibility\n* **HTTPS On:** If your site has an SSL certificate then contact support@zesty.io about secure hosting\n* **Always redirect to HTTPS:** This will redirect any http requests to https (if https is on).\n* **Always prepend WWW to my domain**\n* **Show site name in meta title:** Appends your site name, located in Global dataset, to the title tag.\n\n### **Developer**&#x20;\n\n* **Use Parsley Debugger:** Option to how and when the debugger should be presented&#x20;\n* **Show Zesty Tips:** Choose to turns Zesty.io Tips on of off\n* **Access to Instant JSON API for content**\n* **Allow cross domain access to Instant JSON API:** Toggle CORS Headers\n* **Automatically include JavaScript in head**\n* **Custom View Endpoints CORS Allow Any Origin**\n* **Auto Include Google Analytics Tag:** if on (default) it will auto include a Google Analytics tracking script tag which is created using the **Google Analytics ID** setting. IF the **Google Analytics ID** is not written as a setting, it wont do anything. If the **Auto Include Google Analytics Tag** setting is OFF, no GA script tag will be auto included regardless if **Google Analytics ID** code is set.\n\n### **Contact form**\n\n* **Sending Email:** This email address will be used to send an outbound email. We will verify this email, and then register it with Amazon SES (our mailing service provider). This will whitelist your email, helping you to avoid the junk folder.\n* **Email Recipients:** This can be a single email address or comma separated email addresses. The email(s) in this area will receive form information upon submit.\n* **Reply Email:** When the form is complete, a notification email is sent to the person who filled out the form. When they hit reply on that email, the email entered here is who they reply to.\n* **Form Honey Pot:** If this value is set, all posted forms will look for an input whose name matches the honeypot setting value. If forms are posted without an input whose name matches the honeypot setting value, they will not succeed. If a form is posted containing an input whose name matches the honeypot setting value, and this input has a value, the post will fail. It needs to be submitted with no value to succeed. Setting a honeypot value AFFECTS ALL FORMS IMMEDIATELY.\n* **Safe Emails Send To List :** The Safe Emails feature allows users to enter a comma separated list of emails that are safe for form submissions to be sent to.  All form submissions using the [email override feature](https://zesty.org/guides/how-to-create-a-lead-form#email-override-setting-a-specific-form-to-notify-a-different-email-than-the-one-in-settings) will be validated against this list before the email is sent.&#x20;\n\n### **Verification**&#x20;\n\n* Keybase Filename\n* Keybase Value\n\n### **SEO**&#x20;\n\n* Content Set ID override for /feed.xml\n* Enable Canonical Tags\n\n### **I18n**\n\n* **Default Language Page:** When you have multiple languages, this is the starting page url PATH. Empty is none. This setting creates a meta tag in every page head.\n\n### **Tag Managers**\n\n* **Google Tag Manager ID:** Typically in the format: GTM-XXXXXXX. This will auto inject scripts into the head and body for you on the live production website.\n\n### **Analytics**\n\n* **Google Analytics ID:** It is a unique code that Google Analytics gives you to track your website hits. This is required for Zesty to track hits to your website.\\*|\\*What is an Urchin ID?\n* **Google Profile ID:** The main account created with google analytics is tied to a unique profile ID. This is necessary for Zesty to pull data and show your analytics.\\*|\\*Google Profile ID\n* **Use Google Universal Code:** The new version of Googles tracking code.\\*|\\*Google Universal Code\n* **Display Advertising Support:** If you turn on Display Advertising, you need to enable Re-marketing with Google Analytics or Google Display Network (GDN) Impression Reporting. With this setting on the Analytics tracking code is updated. Once you have made that change, Google Analytics collects the information it normally does, as well as the DoubleClick cookie when that cookie is present.\n* **Google Auto Linker:** When tracking sessions across multiple domains, the Client-ID value has to be transferred from one domain to the other. To do this, the Analytics tracking code has linking features that allow the source domain to place the Client-ID in the URL parameters of a link, where the destination domain can access it. Add your secondary domain or domains here as a comma separated list.\n\n### Security\n\n* **Header: X-Frame-Options**: Learn more at [https://developer.mozilla.org/enUS/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/enUS/docs/Web/HTTP/Headers/X-Frame-Options)\n* **Strict-Transport-Security:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)\n* **Content-Security-Policy:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)\n* **X-Content-Type-Options:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)\n* **Referrer-Policy:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)\n* **Feature-Policy:** Learn more at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy)\n","category":"ui","service":"instances"}],"content":"---\ndescription: Get a high level view of everything happening in your instance\n---\n\n# Home Dashboard\n\n<figure><img src=\"../../.gitbook/assets/Mature Dashboard (1).jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n## What is Home?&#x20;\n\nHome in Zesty is the best way to get a high level view of everything happening in your instance. &#x20;\n\n**From here you can:**&#x20;\n\n* View key performance metrics which enable you to monitor the health of your instance\n* Open recently worked on content items, code files, and models\n* Create new content items, code files, and models and upload new media files\n* Jump to resources such as our product docs, release notes, and community channels\n\n## How to get started with Home?&#x20;\n\nWe recommend you get started by learning more about the home interface.&#x20;\n\n### View the High Level Metrics for your instance\n\nHere you can view key performance metrics such as the total web requests, media requests, items scheduled, and items published and see how they have changed for the last 30 days. These will help you make more informed business decisions and also help ensure you keep your team aligned with your business goals.&#x20;\n\n<figure><img src=\"../../.gitbook/assets/2.jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n### Quickly Create New Content Items, Code Files, Models, and Upload Files\n\nWant to start working on something new in your Zesty instance? Simply click on the plus button in the top right hand corner and choose from the 4 options available.\n\n<figure><img src=\"../../.gitbook/assets/Mature Dashboard-1 (1).jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n### Open Recently Worked on Content Items, Code Files, and Models\n\nBelow the cards are a list of your instance's most recently worked on content items, code files, or models. To open them, simply hover and click on the item you want to view.\n\n<figure><img src=\"../../.gitbook/assets/4.jpg\" alt=\"\"><figcaption></figcaption></figure>\n\n### Learn Zesty using our Resources\n\nIf you're actively working on building or growing your instance the resources card in the right can be extremely useful for you. From the Resources Card you can access our&#x20;\n\n* Documentation where you can learn about getting started, our platform, and APIs\n* Release Notes to learn about most recent releases\n* Community Channels on Slack, Youtube, and Discord where you can ask questions and get support from other people building with Zesty\n\n<figure><img src=\"../../.gitbook/assets/5.jpg\" alt=\"\"><figcaption></figcaption></figure>\n","category":"ui","service":"instances"}],"content":"# Guides\n\n","category":"guides","service":"instances"},{"name":"Media","url":"/media","objectId":"1i8uedvLXQYoirIGky0U","item":[],"category":"media","service":""},{"name":"media","url":"/media","item":[{"name":"Guides","url":"/media/guides","objectId":"WrMg7CGjSA3wQhGiuCc9","item":[],"content":"# Guides\n\n","category":"guides","service":"media"},{"name":"guides","url":"/media/guides","item":[{"name":"DAM (Media Management)","url":"/media/guides/media-storage-micro-dam","objectId":"-LMExl7RymO9Fjza_ZfB","item":[],"content":"---\ndescription: >-\n  A DAM (digital asset manager) is an abstract file system that stores and\n  optimizes files in the Zesty.io cloud.\n---\n\n# DAM (Media Management)\n\n## What is a DAM?\n\nA DAM (digital asset manager) is a Zesty.io service for managing files that are served publicly. Designed as an abstract file system, the DAM allows file organization that mimics an operating system directory structure. Zesty.io's DAM differs from dedicated enterprise DAMs in two ways: it does not handle digital right management (DRM), and assumes that every file added to it will be accessed publicly.\n\n## What type of Files can be Stored on the Micro DAM?\n\nMany file types may be uploaded to a Micro DAM. Examples include images (PNG, JPG, GIF), PDFs, Video (MP4, OGG), Fonts (OTF, WOFF, TTF), SVGs, YAML, Markdown, Javascript, CSS, etc.\n\n## File Life Cycle\n\nOnce files are uploaded to the DAM (through the content manager or directly through the API), they are copied to cloud storage on Google Cloud Platform. From there they are propagated to the multiple edge point-of-presence (POP) points across the world. Files live on the DAM until they are deleted from the DAM through the API or the media section of the content manager.\n\n### File Delivery & Content Delivery Network (CDN) Details\n\nFiles load to the client device (mobile phone, desktop, game console etc.) from the closest POP server they are located on. If the file is not located on a POP server, the POP server makes a request to Zesty.io (the origin) for the file. At that point Zesty.io transfers the file from cloud storage to the POP server. Any request to that file will be loaded from the POP server thereafter. The file will remain \"cached\" on the POP server for a 24 hour period. This whole cycle ensures fast delivery while delivering fresh files.\n\n{% hint style=\"success\" %}\n### POPs are high-density servers with 24 TB of SSDs, 768 GB of RAM, and 4 x 25 Gigabit Ethernet. Delivery is sub-millisecond Time to First Byte (TTFB) on the 99th%.\\*\n{% endhint %}\n\n### This map shows all the Point of Presence (POP) servers across the World.\n\n![\\* Files are propagated to Fastly's (our partner) POP servers for optimal and fast delivery. ](../../../.gitbook/assets/pop-endpoints.png)\n","category":"guides","service":"media"},{"name":"media-storage-micro-dam","url":"/media/guides/media-storage-micro-dam","item":[{"name":"On-The-Fly Media Optimization and Dynamic Image Manipulation","url":"/media/guides/media-storage-micro-dam/on-the-fly-media-optimization-and-dynamic-image-manipulation","objectId":"-McFoxnX33G3qdwHBwJI","item":[],"content":"---\ndescription: >-\n  Zesty.io's DAM has on-the-fly (OTF) rendering options to improve and\n  manipulate media that both developers and content authors can use.\n---\n\n# On-The-Fly Media Optimization and Dynamic Image Manipulation\n\n### Auto Image Optimization - Default Output\n\nZesty.io automatically transforms images as the content-type \"webp\", which is a format made to  optimized image download speed and rendering speed, developed by Google.\n\n> &#x20;WebP is a modern **image format** that provides superior **lossless and lossy** compression for images on the web. Using WebP, webmasters and web developers can create smaller, richer images that make the web faster. - _Read the full Google launch article_ [_https://developers.google.com/speed/webp_](https://developers.google.com/speed/webp)__\n\n&#x20;When optimization happens, Zesty.io does a few things to the file:\n\n* All metadata (for example, EXIF, XMP, or ICC) will is removed.\n* Any [ICC profile](https://en.wikipedia.org/wiki/ICC\\_profile) on the image is applied directly to the image to ensure color output is correct. If the image doesn't have an ICC profile, a default profile is added.\n* If the source image contains orientation metadata, this orientation will be applied directly to the image data and metadata will be removed.\n* Images are served with their original name and extension, but will still output as `content-type` \"webp\"&#x20;\n\n### OTF DAM Quick Examples\n\n```markup\n<!-- using the direct media url, append query parameters to the url --> \n<img src=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=200\" alt=\"space ship example\">\n<!-- using parsley, append query paramters outside th call -->\n<img src=\"{{this.image.getImage()}}?width200&crop=1:1\" alt=\"parsley example\">\n\n<!-- example using src set images to be used at different display pixel densities -->\n<img srcset=\"{{this.image.getImage()}}?width=320&dpr=1.5 1.5x,\n             {{this.image.getImage()}}?width=320&dpr=2 2x\"\n     src=\"{{this.image.getImage()}}?width=320\"/>\n     \n<!-- HTML5 art direction, use different images based on browser width -->\n<picture>\n  <source srcset=\"{{this.image.getImage()}}?width=600&crop=16:9\" media=\"(min-width: 600px)\"/>\n  <img src=\"{{this.image.getImage()}}?width=320&crop=1:1\"/>\n</picture>\n\n<style>\n  .header {\n    background-image: url(https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=2000)\n  }\n</style>\n```\n\n### Bypass Image Optimization&#x20;\n\nTo bypass image optimization to get the raw encoding and data of the origin image, append `?raw=true` to the end of the image request like so:\n\n`https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?raw=true`\n\nThis is useful for fetching EXIF data or other meta data hidden in your image file.\n\n### Image Manipulation Options\n\nAll image may be manipulated on-the-fly by passing query parameter to the end of the image URL. See the example below\n\n| Query Param    | Example                                                                                                                                                  |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **none**       | [https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg](https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg)                         |\n| **?width=**    | [https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=300](https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=300)     |\n| **?orient=**   | ****[https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=v](https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=v)   |\n| **?bg-color=** | [https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=006699](https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=006699) |\n\n![Original Image Source: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg](../../../.gitbook/assets/Arcade-Space-Ship-Example.jpg)\n\nWe recognize the following parameters in the query string of the image request:\n\n| Parameter                                                                                                                     | Description                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |\n| [`auto`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#auto-optimize-image-jpg-auto)``                      | Enable optimization features automatically.                                                     |\n| [`bg-color`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#background-color-bg-color)                       | Set the background color of an image.                                                           |\n| ``[`bypass`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#bypass-image-jpg-raw-true)``                     | Ignore all optimization and fetch the raw original image                                        |\n| [`blur`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#gaussian-blur-blur)                                  | Set the blurriness of the output image.                                                         |\n| [`brightness`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#brightness-brightness)                         | Set the brightness of the output image.                                                         |\n| [`canvas`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#canvas)                                            | Increase the size of the canvas around an image.                                                |\n| [`contrast`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#contrast-image-jpg-contrast)                     | Set the contrast of the output image.                                                           |\n| [`crop`](https://developer.fastly.com/reference/io/crop)                                                                      | Crop an image by removing pixels from an image based on a ratio. Great for thumbnails.          |\n| [`dpr`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#device-pixel-ratio-dpr-image-jpg-dpr)                 | Device Pixel Ratio - Serve correctly sized images for devices that expose a device pixel ratio. |\n| [`fit`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#fit-image-jpg-fit-cover-and-height-200-and-width-200) | Set how the image will fit within the width and height provided.                                |\n| [`height`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#height-images-jpg-height)                          | Resize the height of the image.                                                                 |\n| [`optimize`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-optimize-image-jpg-optimize)               | Automatically apply optimal quality compression.                                                |\n| [`orient`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#orientation-image-jpg-orient)                      | Change the cardinal orientation of the image.                                                   |\n| [`pad`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad)                          | Add pixels to the edge of an image, like css padding.                                           |\n| [`quality`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-quality-image-jpg-quality)                  | Optimize the image to the given compression level for lossy file formatted images.              |\n| [`saturation`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#saturation-image-jpg-saturation)               | Set the saturation of the output image.                                                         |\n| [`sharpen`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#sharpen-image-jpg-sharpen)                        | Set the sharpness of the output image.                                                          |\n| [`trim`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#trim-image-jpg-trim)                                 | Remove pixels from the edge of an image.                                                        |\n| [`width`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#width-image-jpg-width)                              | Resize the width of the image.                                                                  |\n\n### Image Manipulation Processing order\n\nManipulation query parameters can be specified in any order, but they are processed in this order:\n\n| Order | Query Call                                                 |\n| ----- | ---------------------------------------------------------- |\n| 1     | `trim`                                                     |\n| 2     | `crop`                                                     |\n| 3     | `orient`                                                   |\n| 4     | `width`     `height`    `dpr`     `fit`                    |\n| 5     | `pad`     `canvas`     `bg-color`                          |\n| 6     | `brightness`     `contrast`     `saturation`               |\n| 7     | `sharpen`                                                  |\n| 8     | `blur`                                                     |\n| 9     |  `auto`    `optimize`    `quality`    `profile`    `level` |\n\n## Zesty.io OTF DAM: On-The-Fly Image Options API\n\nAll query parameters listed below may be used in conjunction with one another, and may be stacked. Some query params conflict with each other, for example [pad](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad) and [canvas](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#canvas). This behavior is documented under each example API call.\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?auto=webp\" method=\"get\" summary=\"Auto Optimize:   /image.jpg?auto=\" %}\n{% swagger-description %}\nEnables optimizations based on content negotiation. Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.\n\n\\\n\n\n\n\n\\\n\n\n\n\n`?auto=webp`\n\n \n\n_Deliver lossless (because input image is lossless) WebP where client support is available, otherwise deliver a PNG_\n\n\\\n\n\n_`?format=pjpg&auto=webp`Deliver lossy (because format=pjpg is lossy) WebP where client support is available, otherwise deliver a progressive JPEG_\n\n\\\n\n\n_`?format=png&auto=webp`\tDeliver lossless (because format=png is lossless) WebP where client support is available, otherwise deliver a PNG_\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"auto\" type=\"string\" %}\nwebp is the only option, see notes above\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?format=pjpg&auto=webp\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?format=pjpg\\&auto=webp](<../../../.gitbook/assets/image (3).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/parsley-logo-brackets.png\" path=\"?bg-color=690167\" method=\"get\" summary=\"Background Color:   /image.jpg?bg-color=\" %}\n{% swagger-description %}\nChange the background color of a transparent image. Tip: you can make background transparent using a decimal value on the end like \n\n`125,80,200,0.5`\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"bg-color\" type=\"string\" %}\nHex RBG: \n\n`690167`\n\nDecimal: \n\n`105,1,103,0.5`\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=006699\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=105,1,103](<../../../.gitbook/assets/image (22).png>)\n\n![https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=323CF3](<../../../.gitbook/assets/image (13).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?raw=true\" method=\"get\" summary=\"Bypass:   /image.jpg?raw=true\" %}\n{% swagger-description %}\nBypass any optimization and return the original image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"raw\" type=\"string\" %}\ntrue\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?raw=true\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?blur=20\" method=\"get\" summary=\"Gaussian Blur:   /image.jpg?blur=\" %}\n{% swagger-description %}\nGaussian blur your image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"blur\" type=\"number\" %}\n0.5 to 1000\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?blur=20\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?blur=20](<../../../.gitbook/assets/image (37).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?brightness=20\" method=\"get\" summary=\"Brightness:  /image.jpg?brightness=\" %}\n{% swagger-description %}\nAdjusts the \"brightness\" of an image. This effect adds perceived light to an image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"brightness\" type=\"integer\" %}\n0 unchanged || -100 black || 100 white\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?brightness=20\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?brightness=20](<../../../.gitbook/assets/image (8).png>)\n\n## Canvas\n\nCanvas is used for advanced targeted cropping of images.&#x20;\n\nThe `canvas` image modifier query parameter takes multiple values which can get complicated, so we included example references as they are best to understand the behavior. To get a feel for it, experiment with the image url example provided, and play with the numbers.\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?canvas=500,100](<../../../.gitbook/assets/image (93).png>)\n\nThe canvas query param takes comma separated values **`SIZE,POSITION`**, where **SIZE** is a pixel width and height `500,100`or a ratio like `2:1`. The **POSITION**  is represented as a percentage offset from the center of the image using `offset-x` and `offset-y`like `offset-x50,offset-y95` . **POSITION** and **SIZE** together look like this:`canvas=400,130,offset-x50,offset-y95`. If **POSITION** is omitted, the image centers by default.&#x20;\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=500\\&canvas=320,100](<../../../.gitbook/assets/image (14).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=1000\\&canvas=400,130,offset-x50,offset-y95](<../../../.gitbook/assets/image (96).png>)\n\n* The background color of the canvas will default to transparency for image output formats that support transparency and white for formats that don't. This behavior can be changed by adding the [`bg-color`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#background-color-image-jpg-bg-color) parameter.\n* When using [`canvas`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#canvas) and [`pad`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad) at the same time, [`pad`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad) will be ignored.\n* &#x20;Fractional pixel measurements are rounded to the nearest whole pixel.\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?canvas=500,100\" method=\"get\" summary=\"Canvas Control: /image.jpg?canvas=\" %}\n{% swagger-description %}\nAllows the user to precisely crop an image by specific positions as described above. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"canvas\" type=\"string\" %}\nSee above documentation\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?canvas=500,400,offset-x20,offset-y20](<../../../.gitbook/assets/image (70).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?contrast=20\" method=\"get\" summary=\"Contrast: /image.jpg?contrast=\" %}\n{% swagger-description %}\nChange the image contrast, the value can be anything between -100 and 100, negative numbers start to wash out the image, positive number increase the vibrancy of the images colors.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"contrast\" type=\"integer\" %}\n\\-100 to 100\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?contrast=100\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?contrast=100](<../../../.gitbook/assets/image (66).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?crop=1:1\" method=\"get\" summary=\"Crop: /image.jpg?crop=\" %}\n{% swagger-description %}\nCrop an image evenly from all sides by passing in a ratio 1:1 is a perfect square, 16:9 is letter box, 10:1 is a slim rectangle etc. Great for making thumbnails by passing in a width and a crop, \n\n`?crop=1:1&width=50`\n\n makes a tiny square, for example.\n\n\\\n\n\n\n\n\\\n\n\nTo crop before other commands are run, use \n\n`precrop`\n\n instead of \n\n`crop`\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"precrop\" type=\"string\" %}\nuse over crop when needed before other changes\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"crop\" type=\"string\" %}\n1:1 || 10:1 || 16:9\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?crop=1:1&width=400\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Crop Example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?crop=1:1\\&width=200](<../../../.gitbook/assets/image (57).png>)\n\n![Crop example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?crop=4:1\\&width=800](<../../../.gitbook/assets/image (86).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?dpr=2\" method=\"get\" summary=\"Device Pixel Ratio (dpr):   /image.jpg?dpr= \" %}\n{% swagger-description %}\nFor optimizing delivery of images to devices with high pixel ratios. The iPhone XS, for example, has a resolution of 375x812 pixels, but its device to pixel ration is 3, so it renders 1125x2436. A developer can access this value from JavaScript by calling \n\n`window.devicePixelRatio`\n\n\\\n\n\n\n\n\\\n\n\nDPR will increase the delivered size by a multiple 1-10 to accommodate for the device Pixel Ratio. Use with JavaScript dynamically when rendering a view and you know the clients Device Pixel Ratio. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"dpr\" type=\"number\" %}\n1-10\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![DPR example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?dpr=2\\&width=200](<../../../.gitbook/assets/image (92).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?fit=cover&height=200&width=200\" method=\"get\" summary=\"Fit: /image.jpg?fit=cover&height=200&width=200\" %}\n{% swagger-description %}\nThe fit parameter controls how the image will be constrained within the provided size (width and height) values, in order to maintain proportions that fit within the confines of the width and height.\n\n\\\n\n\n\n\n\\\n\n\nNote: \n\n`width`\n\n and \n\n`height`\n\n must be pass with fit to work properly. Use the the navigation on the right to search on width and height. An example of this is \n\n`image.jpg?fit=cover&height=200&width=200`\n\n\\\n\n\n\n\n\\\n\n\n\n\n`bounds`\n\n  fit entirely within the specified region, making one dimension smaller if needed.\n\n\\\n\n\n\n\n\\\n\n\n\n\n`cover`\n\n cover the specified region, making one dimension larger if needed.\n\n\\\n\n\n\n\n\\\n\n\n\n\n`crop`\n\n  Resize and crop the image centrally to exactly fit the specified region.\r\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"fit\" type=\"string\" %}\nbounds || cover || crop\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"width\" type=\"number\" %}\nwidth in pixels\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"height\" type=\"number\" %}\nheight in pixels\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Fit Crop Example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?fit=crop\\&width=200\\&height=400](<../../../.gitbook/assets/image (74).png>)\n\n![Fit Bounds example keeps within the width, reducing height: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?fit=bounds\\&width=200\\&height=400](<../../../.gitbook/assets/image (33).png>)\n\n![Fit cover fits within the largest bounds, which is height in this examples: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?fit=cover\\&width=200\\&height=400](<../../../.gitbook/assets/image (103).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?height=200\" method=\"get\" summary=\"Height:   /images.jpg?height=\" %}\n{% swagger-description %}\nControl the height of the image, the width, if not provided, will adapt to match the original ratio of the image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"height\" type=\"number\" %}\nA height in pixels\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?height=100\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?height=100](<../../../.gitbook/assets/image (54).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?optimize=high\" method=\"get\" summary=\"Image Optimize   /image.jpg?optimize=\" %}\n{% swagger-description %}\nDifference and output are minimal for most images that use this param, to be more aggressive in sizing, use the QUALITY param. \n\n\\\n\n\n\n\n\\\n\n\n\n\n`log`\n\n        Output image quality will be similar to the input image quality.\n\n\\\n\n\n\n\n`medium`\n\n  More optimization is allowed. Visual quality of the input is preserved.\n\n\\\n\n\n\n\n`high`\n\n\t  Minor visual artifacts may be visible. This produces the smallest file.\n\n\\\n\n\n\r\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"optimize\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?orient=l\" method=\"get\" summary=\"Orientation:    /image.jpg?orient=\" %}\n{% swagger-description %}\nRotate the image on 90 degree angles\n\n\\\n\n\n\n\n`r`\n\n\t   Orient the image right.\n\n\\\n\n\n\n\n`l`\n\n\t   Orient the image left.\n\n\\\n\n\n\n\n`h`\n\n\t   Flip the image horizontally.\n\n\\\n\n\n\n\n`v`\n\n\t   Flip the image vertically.\n\n\\\n\n\n\n\n`hv`\n\n   Flip the image both horizontally and vertically (also \n\n`vh`\n\n).\n\n\\\n\n\n\n\n`rv`\n\n   Flip the image horizontally, then orient the image left (also \n\n`rv`\n\n or \n\n`vr`\n\n).\n\n\\\n\n\n\n\n`vl`\n\n   Flip the image horizontally, then orient the image right (also \n\n`lv`\n\nor \n\n`vl`\n\n).\r\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"orient\" type=\"string\" %}\nsee above docs for options\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=l\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Orientation example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=l](<../../../.gitbook/assets/image (28).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?pad=10,20,50,10\" method=\"get\" summary=\"Image Padding:   /image.jpg?pad=\" %}\n{% swagger-description %}\nAdd extra pixels around an image by following the same standards as the CSS padding attribute. \n\n\\\n\n\n\n\n\\\n\n\n\n\n**For example:**\n\n \n\n\\\n\n\ntop, right, bottom, left:  \n\n`10,20,10,20`\n\n\\\n\n\nsingle number to get even all around:  \n\n`100`\n\n\\\n\n\ntop bottom and left and right as: 100,200\n\n\\\n\n\n\n\n\\\n\n\n\n\n**Tip:**\n\n combine with \n\n`bg-color`\n\n to change the padding color\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"pad\" type=\"string\" %}\n100,20,200,111\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?pad=10,10,50,10\\&bg-color=FFC0CB\\&width=500](<../../../.gitbook/assets/image (58).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?quality=55\" method=\"get\" summary=\"Image Quality:   /image.jpg?quality=\" %}\n{% swagger-description %}\nControl the file size of the image by reducing the quality. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?quality=55\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Reduced from 56KB to 4KB https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?quality=1](<../../../.gitbook/assets/image (97).png>)\n\n![56KB full quality https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?quality=100\\&width=500](<../../../.gitbook/assets/image (32).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?saturation=-50\" method=\"get\" summary=\"Saturation:    /image.jpg?saturation=\" %}\n{% swagger-description %}\nPlay with the intensity levels of colors, also use to grayscale an image by passing -100 \n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\n\\-100 for grayscale 0 is normal 100 is intense\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?saturation=-50](<../../../.gitbook/assets/image (63).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?saturation=100](<../../../.gitbook/assets/image (38).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?saturation=-100](<../../../.gitbook/assets/image (5).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com\" path=\"?sharpen=a5,r5,t4\" method=\"get\" summary=\"Sharpen:    /image.jpg?sharpen\" %}\n{% swagger-description %}\nChange the sharpness of an image, which can create really interesting artistic outputs\n\n\\\n\n\n\n\n\\\n\n\namount:0-10, radius:0-1000, and threshold:0-100\n\n\\\n\n\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\naX,rX,tX where X is an integer\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a5,r5,t4\n\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a10,r1000,t100](<../../../.gitbook/assets/image (56).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a5,r5,t4](<../../../.gitbook/assets/image (67).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a10,r500,t10](<../../../.gitbook/assets/image (104).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?trim=25,50,75,100\" method=\"get\" summary=\"Trim  /image.jpg?trim=\" %}\n{% swagger-description %}\nValues are accept the same as CSS padding or margin values. The numbers may be pixels or percentages. Pixel value example: \n\n`25,50,75,100`\n\n Percentage example \n\n`25p,50p,20p,10p`\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Trim: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?trim=25p,50p,20p,10p](<../../../.gitbook/assets/image (23).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?width=100\" method=\"get\" summary=\"Width:   /image.jpg?width=\" %}\n{% swagger-description %}\nConstrain the width of the image, the height, if not passed, will auto size itself to the original ratio of thr image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"width\" type=\"number\" %}\nInteger\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=800\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=800](<../../../.gitbook/assets/image (25) (1).png>)\n\n#### About Zesty.io On-The-Fly Media Technology\n\nZesty.io leverages Fastly's Image Optimization technology layered on top of the Zesty.io DAM Media Manager. Features documented here relate to what is supported through Zesty.io WebEngine and Media services.\n","category":"guides","service":"media"},{"name":"Custom DAM Media Domains","url":"/media/guides/media-storage-micro-dam/micro-dam-domains","objectId":"-MXVTECpy5wVhvoF3OVz","item":[],"content":"---\ndescription: >-\n  WebEngine can optionally server media through the registered url or origin,\n  allowing for customer domains instead of media.zestyio.com\n---\n\n# Custom DAM Media Domains\n\n## Default DAM Domain\n\nBy default, all DAM instances are assigned a random hash on a zestyio.com domain e.g. `xyz.media.zestyio.com` This domain is what serves all media you upload to an instance. This URL serves as a direct pathway to an obfuscated storage bucket. All assets served on this domain are cached indefinitely for speed.&#x20;\n\n### Custom Vanity Domains for DAMs\n\nEnterprise-level customers have the option to create a DAM with a custom vanity domain. To create a Micro DAM with a vanity URL please reach out to your account manager. Note, only a new DAM can be assigned a vanity domain. Vanity domains cannot be retroactively assigned to preexisting buckets that already have media that is consumed over the web.&#x20;\n\n### On Domain URL path for DAMs _(/-/media)_\n\nEnterprise level customers have the option to enables WebEngine to proxy through a media bucket of images to a `/-/media/` path on the registered domain to an [instance](../../../introduction/guides/glossary.md#instance). This feature may be used to replace the `xyz.media.zestyio.com` media domain in favor of `myregistereddomain.com/-/media/`\n\nThe /-/media/ routing may also be used to pass through any storage bucket url from Amazon, Azure, or Google. This allows WebEngine to proxy and /-/media/\\*.\\* request to another service. Note, both media.zestyio.com and an external bucket domain cannot be used simultaneously. &#x20;\n\n**Parsley:** If the domain being proxied is a zesty media url, WebEngine will look to replace that domain with the relative path `/-/media/` when the getImage() parsley function is called called.\n\n**Hardcoded Media URLs:** Hard coded media URLs occur when developers directly paste the full media.zesty.io.com domain into their code. This often occurs in CSS files. WebEngine will scan the final rendered document for hard coded occurrences and actively replace them with the /-/media/... relative path.\n\n#### Understanding /-/media Caching\n\nMedia served this way will be purged by regular publishes. Media gets cache keys: Instance ZUID, Legacy Site ID, domain, and an MD5(Instance ZUID+Filepath). You can mimic this key by concatenating the zuid and file path into a single string then running an md5 string conversion on it.\n\nThe same cache keys all WebEngine assigns to an instance's pagesare also applied to media, so media can be purged, an a hybrid purge request will also clear it\n\n#### Using /-/media with EcoSystems\n\nFor sites that have EcoMedia, only the Instance's direct media bucket url will resolve as /-/media, media from foreign EcoMedia will load wi the  [media.zestyio.com](http://media.zestyio.com/) domain\n\n#### Rendering Caveat for /-/media\n\nThe first time an image is processed with a Parsley call like `this.image.getImage(432,23)` WebEngine will generate a temporary processing url like `https://svc.zesty.io/media-resolver-service/resource/c5567c9a132bb58ce9ce648c5a911adf6a109103` which redirects to the `https://9skdl6.media.zestyio.com/photo-by-adrian-drebler.4bc8d829e6421e78cf8539272c470028.jpg`. On second load the updated /-/media/ url will appear `https://parsley.zesty.io/-/media/photo-by-adrian-drebler.4bc8d829e6421e78cf8539272c470028.jpg`\n\n","category":"guides","service":"media"}],"content":"---\ndescription: >-\n  Zesty.io's DAM has on-the-fly (OTF) rendering options to improve and\n  manipulate media that both developers and content authors can use.\n---\n\n# On-The-Fly Media Optimization and Dynamic Image Manipulation\n\n### Auto Image Optimization - Default Output\n\nZesty.io automatically transforms images as the content-type \"webp\", which is a format made to  optimized image download speed and rendering speed, developed by Google.\n\n> &#x20;WebP is a modern **image format** that provides superior **lossless and lossy** compression for images on the web. Using WebP, webmasters and web developers can create smaller, richer images that make the web faster. - _Read the full Google launch article_ [_https://developers.google.com/speed/webp_](https://developers.google.com/speed/webp)__\n\n&#x20;When optimization happens, Zesty.io does a few things to the file:\n\n* All metadata (for example, EXIF, XMP, or ICC) will is removed.\n* Any [ICC profile](https://en.wikipedia.org/wiki/ICC\\_profile) on the image is applied directly to the image to ensure color output is correct. If the image doesn't have an ICC profile, a default profile is added.\n* If the source image contains orientation metadata, this orientation will be applied directly to the image data and metadata will be removed.\n* Images are served with their original name and extension, but will still output as `content-type` \"webp\"&#x20;\n\n### OTF DAM Quick Examples\n\n```markup\n<!-- using the direct media url, append query parameters to the url --> \n<img src=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=200\" alt=\"space ship example\">\n<!-- using parsley, append query paramters outside th call -->\n<img src=\"{{this.image.getImage()}}?width200&crop=1:1\" alt=\"parsley example\">\n\n<!-- example using src set images to be used at different display pixel densities -->\n<img srcset=\"{{this.image.getImage()}}?width=320&dpr=1.5 1.5x,\n             {{this.image.getImage()}}?width=320&dpr=2 2x\"\n     src=\"{{this.image.getImage()}}?width=320\"/>\n     \n<!-- HTML5 art direction, use different images based on browser width -->\n<picture>\n  <source srcset=\"{{this.image.getImage()}}?width=600&crop=16:9\" media=\"(min-width: 600px)\"/>\n  <img src=\"{{this.image.getImage()}}?width=320&crop=1:1\"/>\n</picture>\n\n<style>\n  .header {\n    background-image: url(https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=2000)\n  }\n</style>\n```\n\n### Bypass Image Optimization&#x20;\n\nTo bypass image optimization to get the raw encoding and data of the origin image, append `?raw=true` to the end of the image request like so:\n\n`https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?raw=true`\n\nThis is useful for fetching EXIF data or other meta data hidden in your image file.\n\n### Image Manipulation Options\n\nAll image may be manipulated on-the-fly by passing query parameter to the end of the image URL. See the example below\n\n| Query Param    | Example                                                                                                                                                  |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **none**       | [https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg](https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg)                         |\n| **?width=**    | [https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=300](https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=300)     |\n| **?orient=**   | ****[https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=v](https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=v)   |\n| **?bg-color=** | [https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=006699](https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=006699) |\n\n![Original Image Source: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg](../../../.gitbook/assets/Arcade-Space-Ship-Example.jpg)\n\nWe recognize the following parameters in the query string of the image request:\n\n| Parameter                                                                                                                     | Description                                                                                     |\n| ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |\n| [`auto`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#auto-optimize-image-jpg-auto)``                      | Enable optimization features automatically.                                                     |\n| [`bg-color`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#background-color-bg-color)                       | Set the background color of an image.                                                           |\n| ``[`bypass`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#bypass-image-jpg-raw-true)``                     | Ignore all optimization and fetch the raw original image                                        |\n| [`blur`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#gaussian-blur-blur)                                  | Set the blurriness of the output image.                                                         |\n| [`brightness`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#brightness-brightness)                         | Set the brightness of the output image.                                                         |\n| [`canvas`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#canvas)                                            | Increase the size of the canvas around an image.                                                |\n| [`contrast`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#contrast-image-jpg-contrast)                     | Set the contrast of the output image.                                                           |\n| [`crop`](https://developer.fastly.com/reference/io/crop)                                                                      | Crop an image by removing pixels from an image based on a ratio. Great for thumbnails.          |\n| [`dpr`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#device-pixel-ratio-dpr-image-jpg-dpr)                 | Device Pixel Ratio - Serve correctly sized images for devices that expose a device pixel ratio. |\n| [`fit`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#fit-image-jpg-fit-cover-and-height-200-and-width-200) | Set how the image will fit within the width and height provided.                                |\n| [`height`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#height-images-jpg-height)                          | Resize the height of the image.                                                                 |\n| [`optimize`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-optimize-image-jpg-optimize)               | Automatically apply optimal quality compression.                                                |\n| [`orient`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#orientation-image-jpg-orient)                      | Change the cardinal orientation of the image.                                                   |\n| [`pad`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad)                          | Add pixels to the edge of an image, like css padding.                                           |\n| [`quality`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-quality-image-jpg-quality)                  | Optimize the image to the given compression level for lossy file formatted images.              |\n| [`saturation`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#saturation-image-jpg-saturation)               | Set the saturation of the output image.                                                         |\n| [`sharpen`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#sharpen-image-jpg-sharpen)                        | Set the sharpness of the output image.                                                          |\n| [`trim`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#trim-image-jpg-trim)                                 | Remove pixels from the edge of an image.                                                        |\n| [`width`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#width-image-jpg-width)                              | Resize the width of the image.                                                                  |\n\n### Image Manipulation Processing order\n\nManipulation query parameters can be specified in any order, but they are processed in this order:\n\n| Order | Query Call                                                 |\n| ----- | ---------------------------------------------------------- |\n| 1     | `trim`                                                     |\n| 2     | `crop`                                                     |\n| 3     | `orient`                                                   |\n| 4     | `width`     `height`    `dpr`     `fit`                    |\n| 5     | `pad`     `canvas`     `bg-color`                          |\n| 6     | `brightness`     `contrast`     `saturation`               |\n| 7     | `sharpen`                                                  |\n| 8     | `blur`                                                     |\n| 9     |  `auto`    `optimize`    `quality`    `profile`    `level` |\n\n## Zesty.io OTF DAM: On-The-Fly Image Options API\n\nAll query parameters listed below may be used in conjunction with one another, and may be stacked. Some query params conflict with each other, for example [pad](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad) and [canvas](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#canvas). This behavior is documented under each example API call.\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?auto=webp\" method=\"get\" summary=\"Auto Optimize:   /image.jpg?auto=\" %}\n{% swagger-description %}\nEnables optimizations based on content negotiation. Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.\n\n\\\n\n\n\n\n\\\n\n\n\n\n`?auto=webp`\n\n \n\n_Deliver lossless (because input image is lossless) WebP where client support is available, otherwise deliver a PNG_\n\n\\\n\n\n_`?format=pjpg&auto=webp`Deliver lossy (because format=pjpg is lossy) WebP where client support is available, otherwise deliver a progressive JPEG_\n\n\\\n\n\n_`?format=png&auto=webp`\tDeliver lossless (because format=png is lossless) WebP where client support is available, otherwise deliver a PNG_\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"auto\" type=\"string\" %}\nwebp is the only option, see notes above\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?format=pjpg&auto=webp\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?format=pjpg\\&auto=webp](<../../../.gitbook/assets/image (3).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/parsley-logo-brackets.png\" path=\"?bg-color=690167\" method=\"get\" summary=\"Background Color:   /image.jpg?bg-color=\" %}\n{% swagger-description %}\nChange the background color of a transparent image. Tip: you can make background transparent using a decimal value on the end like \n\n`125,80,200,0.5`\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"bg-color\" type=\"string\" %}\nHex RBG: \n\n`690167`\n\nDecimal: \n\n`105,1,103,0.5`\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=006699\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=105,1,103](<../../../.gitbook/assets/image (22).png>)\n\n![https://9skdl6.media.zestyio.com/parsley-logo-brackets.png?bg-color=323CF3](<../../../.gitbook/assets/image (13).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?raw=true\" method=\"get\" summary=\"Bypass:   /image.jpg?raw=true\" %}\n{% swagger-description %}\nBypass any optimization and return the original image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"raw\" type=\"string\" %}\ntrue\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?raw=true\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?blur=20\" method=\"get\" summary=\"Gaussian Blur:   /image.jpg?blur=\" %}\n{% swagger-description %}\nGaussian blur your image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"blur\" type=\"number\" %}\n0.5 to 1000\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?blur=20\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?blur=20](<../../../.gitbook/assets/image (37).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?brightness=20\" method=\"get\" summary=\"Brightness:  /image.jpg?brightness=\" %}\n{% swagger-description %}\nAdjusts the \"brightness\" of an image. This effect adds perceived light to an image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"brightness\" type=\"integer\" %}\n0 unchanged || -100 black || 100 white\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?brightness=20\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?brightness=20](<../../../.gitbook/assets/image (8).png>)\n\n## Canvas\n\nCanvas is used for advanced targeted cropping of images.&#x20;\n\nThe `canvas` image modifier query parameter takes multiple values which can get complicated, so we included example references as they are best to understand the behavior. To get a feel for it, experiment with the image url example provided, and play with the numbers.\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?canvas=500,100](<../../../.gitbook/assets/image (93).png>)\n\nThe canvas query param takes comma separated values **`SIZE,POSITION`**, where **SIZE** is a pixel width and height `500,100`or a ratio like `2:1`. The **POSITION**  is represented as a percentage offset from the center of the image using `offset-x` and `offset-y`like `offset-x50,offset-y95` . **POSITION** and **SIZE** together look like this:`canvas=400,130,offset-x50,offset-y95`. If **POSITION** is omitted, the image centers by default.&#x20;\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=500\\&canvas=320,100](<../../../.gitbook/assets/image (14).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=1000\\&canvas=400,130,offset-x50,offset-y95](<../../../.gitbook/assets/image (96).png>)\n\n* The background color of the canvas will default to transparency for image output formats that support transparency and white for formats that don't. This behavior can be changed by adding the [`bg-color`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#background-color-image-jpg-bg-color) parameter.\n* When using [`canvas`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#canvas) and [`pad`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad) at the same time, [`pad`](on-the-fly-media-optimization-and-dynamic-image-manipulation.md#image-padding-image-jpg-pad) will be ignored.\n* &#x20;Fractional pixel measurements are rounded to the nearest whole pixel.\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?canvas=500,100\" method=\"get\" summary=\"Canvas Control: /image.jpg?canvas=\" %}\n{% swagger-description %}\nAllows the user to precisely crop an image by specific positions as described above. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"canvas\" type=\"string\" %}\nSee above documentation\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?canvas=500,400,offset-x20,offset-y20](<../../../.gitbook/assets/image (70).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?contrast=20\" method=\"get\" summary=\"Contrast: /image.jpg?contrast=\" %}\n{% swagger-description %}\nChange the image contrast, the value can be anything between -100 and 100, negative numbers start to wash out the image, positive number increase the vibrancy of the images colors.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"contrast\" type=\"integer\" %}\n\\-100 to 100\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?contrast=100\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?contrast=100](<../../../.gitbook/assets/image (66).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?crop=1:1\" method=\"get\" summary=\"Crop: /image.jpg?crop=\" %}\n{% swagger-description %}\nCrop an image evenly from all sides by passing in a ratio 1:1 is a perfect square, 16:9 is letter box, 10:1 is a slim rectangle etc. Great for making thumbnails by passing in a width and a crop, \n\n`?crop=1:1&width=50`\n\n makes a tiny square, for example.\n\n\\\n\n\n\n\n\\\n\n\nTo crop before other commands are run, use \n\n`precrop`\n\n instead of \n\n`crop`\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"precrop\" type=\"string\" %}\nuse over crop when needed before other changes\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"crop\" type=\"string\" %}\n1:1 || 10:1 || 16:9\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?crop=1:1&width=400\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Crop Example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?crop=1:1\\&width=200](<../../../.gitbook/assets/image (57).png>)\n\n![Crop example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?crop=4:1\\&width=800](<../../../.gitbook/assets/image (86).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?dpr=2\" method=\"get\" summary=\"Device Pixel Ratio (dpr):   /image.jpg?dpr= \" %}\n{% swagger-description %}\nFor optimizing delivery of images to devices with high pixel ratios. The iPhone XS, for example, has a resolution of 375x812 pixels, but its device to pixel ration is 3, so it renders 1125x2436. A developer can access this value from JavaScript by calling \n\n`window.devicePixelRatio`\n\n\\\n\n\n\n\n\\\n\n\nDPR will increase the delivered size by a multiple 1-10 to accommodate for the device Pixel Ratio. Use with JavaScript dynamically when rendering a view and you know the clients Device Pixel Ratio. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"dpr\" type=\"number\" %}\n1-10\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![DPR example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?dpr=2\\&width=200](<../../../.gitbook/assets/image (92).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?fit=cover&height=200&width=200\" method=\"get\" summary=\"Fit: /image.jpg?fit=cover&height=200&width=200\" %}\n{% swagger-description %}\nThe fit parameter controls how the image will be constrained within the provided size (width and height) values, in order to maintain proportions that fit within the confines of the width and height.\n\n\\\n\n\n\n\n\\\n\n\nNote: \n\n`width`\n\n and \n\n`height`\n\n must be pass with fit to work properly. Use the the navigation on the right to search on width and height. An example of this is \n\n`image.jpg?fit=cover&height=200&width=200`\n\n\\\n\n\n\n\n\\\n\n\n\n\n`bounds`\n\n  fit entirely within the specified region, making one dimension smaller if needed.\n\n\\\n\n\n\n\n\\\n\n\n\n\n`cover`\n\n cover the specified region, making one dimension larger if needed.\n\n\\\n\n\n\n\n\\\n\n\n\n\n`crop`\n\n  Resize and crop the image centrally to exactly fit the specified region.\r\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"fit\" type=\"string\" %}\nbounds || cover || crop\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"width\" type=\"number\" %}\nwidth in pixels\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"height\" type=\"number\" %}\nheight in pixels\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Fit Crop Example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?fit=crop\\&width=200\\&height=400](<../../../.gitbook/assets/image (74).png>)\n\n![Fit Bounds example keeps within the width, reducing height: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?fit=bounds\\&width=200\\&height=400](<../../../.gitbook/assets/image (33).png>)\n\n![Fit cover fits within the largest bounds, which is height in this examples: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?fit=cover\\&width=200\\&height=400](<../../../.gitbook/assets/image (103).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?height=200\" method=\"get\" summary=\"Height:   /images.jpg?height=\" %}\n{% swagger-description %}\nControl the height of the image, the width, if not provided, will adapt to match the original ratio of the image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"height\" type=\"number\" %}\nA height in pixels\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?height=100\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?height=100](<../../../.gitbook/assets/image (54).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?optimize=high\" method=\"get\" summary=\"Image Optimize   /image.jpg?optimize=\" %}\n{% swagger-description %}\nDifference and output are minimal for most images that use this param, to be more aggressive in sizing, use the QUALITY param. \n\n\\\n\n\n\n\n\\\n\n\n\n\n`log`\n\n        Output image quality will be similar to the input image quality.\n\n\\\n\n\n\n\n`medium`\n\n  More optimization is allowed. Visual quality of the input is preserved.\n\n\\\n\n\n\n\n`high`\n\n\t  Minor visual artifacts may be visible. This produces the smallest file.\n\n\\\n\n\n\r\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"optimize\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?orient=l\" method=\"get\" summary=\"Orientation:    /image.jpg?orient=\" %}\n{% swagger-description %}\nRotate the image on 90 degree angles\n\n\\\n\n\n\n\n`r`\n\n\t   Orient the image right.\n\n\\\n\n\n\n\n`l`\n\n\t   Orient the image left.\n\n\\\n\n\n\n\n`h`\n\n\t   Flip the image horizontally.\n\n\\\n\n\n\n\n`v`\n\n\t   Flip the image vertically.\n\n\\\n\n\n\n\n`hv`\n\n   Flip the image both horizontally and vertically (also \n\n`vh`\n\n).\n\n\\\n\n\n\n\n`rv`\n\n   Flip the image horizontally, then orient the image left (also \n\n`rv`\n\n or \n\n`vr`\n\n).\n\n\\\n\n\n\n\n`vl`\n\n   Flip the image horizontally, then orient the image right (also \n\n`lv`\n\nor \n\n`vl`\n\n).\r\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"orient\" type=\"string\" %}\nsee above docs for options\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=l\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Orientation example: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?orient=l](<../../../.gitbook/assets/image (28).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?pad=10,20,50,10\" method=\"get\" summary=\"Image Padding:   /image.jpg?pad=\" %}\n{% swagger-description %}\nAdd extra pixels around an image by following the same standards as the CSS padding attribute. \n\n\\\n\n\n\n\n\\\n\n\n\n\n**For example:**\n\n \n\n\\\n\n\ntop, right, bottom, left:  \n\n`10,20,10,20`\n\n\\\n\n\nsingle number to get even all around:  \n\n`100`\n\n\\\n\n\ntop bottom and left and right as: 100,200\n\n\\\n\n\n\n\n\\\n\n\n\n\n**Tip:**\n\n combine with \n\n`bg-color`\n\n to change the padding color\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"pad\" type=\"string\" %}\n100,20,200,111\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?pad=10,10,50,10\\&bg-color=FFC0CB\\&width=500](<../../../.gitbook/assets/image (58).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?quality=55\" method=\"get\" summary=\"Image Quality:   /image.jpg?quality=\" %}\n{% swagger-description %}\nControl the file size of the image by reducing the quality. \n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?quality=55\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Reduced from 56KB to 4KB https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?quality=1](<../../../.gitbook/assets/image (97).png>)\n\n![56KB full quality https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?quality=100\\&width=500](<../../../.gitbook/assets/image (32).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?saturation=-50\" method=\"get\" summary=\"Saturation:    /image.jpg?saturation=\" %}\n{% swagger-description %}\nPlay with the intensity levels of colors, also use to grayscale an image by passing -100 \n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\n\\-100 for grayscale 0 is normal 100 is intense\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?saturation=-50](<../../../.gitbook/assets/image (63).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?saturation=100](<../../../.gitbook/assets/image (38).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?saturation=-100](<../../../.gitbook/assets/image (5).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com\" path=\"?sharpen=a5,r5,t4\" method=\"get\" summary=\"Sharpen:    /image.jpg?sharpen\" %}\n{% swagger-description %}\nChange the sharpness of an image, which can create really interesting artistic outputs\n\n\\\n\n\n\n\n\\\n\n\namount:0-10, radius:0-1000, and threshold:0-100\n\n\\\n\n\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\naX,rX,tX where X is an integer\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a5,r5,t4\n\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a10,r1000,t100](<../../../.gitbook/assets/image (56).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a5,r5,t4](<../../../.gitbook/assets/image (67).png>)\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?sharpen=a10,r500,t10](<../../../.gitbook/assets/image (104).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?trim=25,50,75,100\" method=\"get\" summary=\"Trim  /image.jpg?trim=\" %}\n{% swagger-description %}\nValues are accept the same as CSS padding or margin values. The numbers may be pixels or percentages. Pixel value example: \n\n`25,50,75,100`\n\n Percentage example \n\n`25p,50p,20p,10p`\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![Trim: https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?trim=25p,50p,20p,10p](<../../../.gitbook/assets/image (23).png>)\n\n{% swagger baseUrl=\"https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg\" path=\"?width=100\" method=\"get\" summary=\"Width:   /image.jpg?width=\" %}\n{% swagger-description %}\nConstrain the width of the image, the height, if not passed, will auto size itself to the original ratio of thr image.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"width\" type=\"number\" %}\nInteger\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\nhttps://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=800\n```\n{% endswagger-response %}\n{% endswagger %}\n\n![https://9skdl6.media.zestyio.com/Arcade-Space-Ship-Example.jpg?width=800](<../../../.gitbook/assets/image (25) (1).png>)\n\n#### About Zesty.io On-The-Fly Media Technology\n\nZesty.io leverages Fastly's Image Optimization technology layered on top of the Zesty.io DAM Media Manager. Features documented here relate to what is supported through Zesty.io WebEngine and Media services.\n","category":"guides","service":"media"}],"content":"---\ndescription: >-\n  A DAM (digital asset manager) is an abstract file system that stores and\n  optimizes files in the Zesty.io cloud.\n---\n\n# DAM (Media Management)\n\n## What is a DAM?\n\nA DAM (digital asset manager) is a Zesty.io service for managing files that are served publicly. Designed as an abstract file system, the DAM allows file organization that mimics an operating system directory structure. Zesty.io's DAM differs from dedicated enterprise DAMs in two ways: it does not handle digital right management (DRM), and assumes that every file added to it will be accessed publicly.\n\n## What type of Files can be Stored on the Micro DAM?\n\nMany file types may be uploaded to a Micro DAM. Examples include images (PNG, JPG, GIF), PDFs, Video (MP4, OGG), Fonts (OTF, WOFF, TTF), SVGs, YAML, Markdown, Javascript, CSS, etc.\n\n## File Life Cycle\n\nOnce files are uploaded to the DAM (through the content manager or directly through the API), they are copied to cloud storage on Google Cloud Platform. From there they are propagated to the multiple edge point-of-presence (POP) points across the world. Files live on the DAM until they are deleted from the DAM through the API or the media section of the content manager.\n\n### File Delivery & Content Delivery Network (CDN) Details\n\nFiles load to the client device (mobile phone, desktop, game console etc.) from the closest POP server they are located on. If the file is not located on a POP server, the POP server makes a request to Zesty.io (the origin) for the file. At that point Zesty.io transfers the file from cloud storage to the POP server. Any request to that file will be loaded from the POP server thereafter. The file will remain \"cached\" on the POP server for a 24 hour period. This whole cycle ensures fast delivery while delivering fresh files.\n\n{% hint style=\"success\" %}\n### POPs are high-density servers with 24 TB of SSDs, 768 GB of RAM, and 4 x 25 Gigabit Ethernet. Delivery is sub-millisecond Time to First Byte (TTFB) on the 99th%.\\*\n{% endhint %}\n\n### This map shows all the Point of Presence (POP) servers across the World.\n\n![\\* Files are propagated to Fastly's (our partner) POP servers for optimal and fast delivery. ](../../../.gitbook/assets/pop-endpoints.png)\n","category":"guides","service":"media"}],"content":"# Guides\n\n","category":"guides","service":"media"},{"name":"WebEngine","url":"/webengine","objectId":"xVch78ddKk1MSLlAQf86","item":[],"category":"webengine","service":""},{"name":"webengine","url":"/webengine","item":[{"name":"Guides","url":"/webengine/guides","objectId":"VAOw0ehAw7R2TJSIznSO","item":[],"content":"# Guides\n\n","category":"guides","service":"webengine"},{"name":"guides","url":"/webengine/guides","item":[{"name":"WebEngine","url":"/webengine/guides/web-engine","objectId":"-LLGiKfjkyLdlK12tpPi","item":[],"content":"---\ndescription: >-\n  WebEngine is a server side rendering origin for rich content and data. It\n  communicate with popular CDNs and have handle versioned or published states.\n---\n\n# WebEngine\n\nAt the foundation of every Zesty.io instance is WebEngine, a rendering service which powers the dynamic rendering of full page HTML, stand-alone files of any datatype, automated JSON output, proxied remote files, and more. WebEngine has all the logic built in to instantly become your domains origin to power on-the-fly search engine rich content.&#x20;\n\nThe most foundational part of WebEngine is powering HTML or JSON views that are associated with the content items entered into [content models](../../../instances/ui/schema/content-models.md). Each content item can power a dynamic rich HTML view or automated JSON which has all the content relationships hydrated.  &#x20;\n\nDepending on the [WebEngine mode](modes.md), when a content items route is hit `/about/` for example, either a fully rendered HTML page will be delivered, or, a fully hydrated JSON object of route's the content item.&#x20;\n\n**Full Page Rendering - Hybrid and Traditional Modes**\n\nEach content model created on a Zesty.io instance comes with a editable HTML view that can be customized to any design. Pages can be wrapped in snippets like `headers` and `footers`. Each view is wrapped in a body with an automated head of title, meta, og:tags, CSS links, and JavaScript references. The head can [optionally be customized](meta-tags/custom-head-overwrite.md). &#x20;\n\n**Automated JSON - Headless Mode**\n\nWhen WebEngine runs in [headless mode](modes.md#headless-mode-headless), it converts all routes associated to a content item and converts that data into fully hydrated JSON.&#x20;\n\n{% code title=\"https://www.zesty.io/?toJSON\" %}\n```javascript\n{\n    title: \"Your Content, Anywhere\",\n    content: \"<h1>A CONTENT PLATFORM THAT POWERS ENTERPRISE GRADE WEBSITES AND APPLICATIONS</h1>\",\n    image: {\n        type: \"images\",\n        totalItems: 1,\n        data: [\n            {\n                type: \"image\",\n                zuid: \"3-5c58033-eb8cq\",\n                url: \"https://zestyio.media.zestyio.com/Zesty.io---9-5seg.mp4\"\n            }\n        ]\n    },\n    customer_logo_heading: \"Trusted by enterprises, startups, and everyone in between\",\n    main_headline: \"Managing content at scale is difficult.\",\n    main_description: \"<ul><li><p>Security issues, and out of date software</p></li><li><p>Editing the same content in multiple places</p></li><li><p>Developers needed for content updates</p></li></ul><h1>..but it doesn’t have to be</h1><ul><li><p>Centralized content management</p></li><li><p>Automated security and product improvements</p></li><li><p>Easy Distribution at global scale</p></li></ul>\",\n    pagina_nueva: null,\n    og_image: {\n    type: \"images\",\n    totalItems: 1,\n    data: [\n            {\n                type: \"image\",\n                zuid: \"3-a4f5ca6-a25px\",\n                url: \"https://kfg6bckb.media.zestyio.com/zesty-share-image-generic.png\"\n            }\n        ]\n    },\n    meta: {\n        type: \"item\",\n        model_name: \"homepage\",\n        zuid: \"7-31209c-g7qsjg\",\n        createdAt: \"2020-10-01 06:33:30\",\n        updatedAt: \"2020-10-01 06:33:29\",\n        listed: \"1\",\n        version: \"200\",\n        locale: {\n            id: \"1\",\n            name: \"English (United States)\",\n            code: \"en-US\",\n            default: \"1\",\n            active: \"1\",\n            enabled: \"1\"\n        },\n        model: {\n            type: \"model\",\n            zuid: \"6-31079c-vdg69q\",\n            name: \"homepage\",\n            label: \"Homepage\",\n            resourceURI: \"https://www.zesty.io/-/instant/6-31079c-vdg69q.json\"\n        },\n        web: {\n            url: \"https://www.zesty.io/\",\n            uri: \"/\",\n            fragment: \"zesty_home\",\n            canonical_tag_mode: \"1\",\n            sitemap_priority: \"-1.0\",\n            sitemap_last_updated: \"2020-10-01 06:33:29\",\n            canonical_query_param_whitelist: null,\n            canonical_tag_custom_value: null,\n            seo_link_text: \"Homepage\",\n            seo_meta_title: \"Zesty.io: The Headless CMS for Marketers + Developers\",\n            seo_meta_description: \"Built for teams to manage and distribute content to multiple sites, devices, and anywhere else it needs to go.\",\n            seo_meta_keywords: null\n        }\n    }\n}\n```\n{% endcode %}\n\n## ****\n","category":"guides","service":"webengine"},{"name":"web-engine","url":"/webengine/guides/web-engine","item":[{"name":"Modes","url":"/webengine/guides/web-engine/modes","objectId":"-MdJY3N2mwKgAqcY9NrX","item":[],"content":"---\ndescription: >-\n  WebEngine has three options for rendering output to work with different data\n  access styles, which are called modes. Modes only affect WebEngine.\n---\n\n# Modes\n\n#### Modes give teams the ultimate flexibility to work in the style of their implementation target. Mode change the output behavior of WebEngine from only serving JSON to rendering full HTML pages.&#x20;\n\n{% hint style=\"info\" %}\nModes do not affect the Read/Write APIs (Instances API, Accounts API, or Media API)\n{% endhint %}\n\n### Traditional Mode `traditional`_\\[default]_\n\nIf you are building HTML experiences solely on Zesty.io and want to guard against people accessing your content outside of the HTML document, traditional is right. GET APIs that expose content need to be turned on manually, giving teams the options to turn on some items but not others. Custom JSON or other data format endpoints made with Parsley can still be made without an affect on access.&#x20;\n\n| Key Aspect         | How it work in **Traditional Mode**                                                                                                                                                                                                                         |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **HTML Rendering** | All Views render with Parsley by default, HTML document body is auto generated.                                                                                                                                                                             |\n| **Content APIs**   | Instant and GraphQL (gql) APIs must be installed and explicitly turned toggled on through settings, CORS rejects remote client requests outside of the serving domain unless explicitly told otherwise through settings. Headless routing is not available. |\n| **JSON Access**    | Routes (View Rendering) does not have access `/?toJSON`, custom made JSON views are accessible.                                                                                                                                                             |\n| **SEO**            | SEO is automated on page from user input on each content item.                                                                                                                                                                                              |\n\n### Headless Mode  `headless`\n\nMode is best for team who's engineers work fully outside of Zesty.io, example technologies, but not limited to, would be NextJS, NuxtJS, or Angular. When headless mode is on, all routes render as JavaScript object notation (JSON). &#x20;\n\n| Key Aspect         | How it behaves in **Headless Mode**                                                                                                                    |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **HTML Rendering** | Off. Routes to content items render Hydrated JSON. Custom HTML endpoints are still available.                                                          |\n| **Content APIs**   | Instant and GraphQL (gql) APIs are on, CORS is `*` allowing client requests from any domain. Headless routing is available from `/-/headless/`         |\n| **JSON Access**    | Routes automatically render JSON. The `/?toJSON`is available to return routes with meta data, using `/?toJSON=nometa`                                  |\n| **SEO**            | SEO is available on content items with routes, and from the key \\[meta] off the JSON object, and is also available from the`/-/headless/routing.json`  |\n\n### Hybrid Mode `hybrid`\n\nHybrid is best of both worlds. Pages still render HTML at their routes, but they can also render JSON with a simple get parameter. For example `/about/` would return HTML, but `/about/?toJSON` would return a fully hydrated JSON object of the about page.&#x20;\n\n| Key Aspect         | How it work in **Hybrid Mode**                                                                                                                                |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **HTML Rendering** | All Views render with Parsley by default, HTML document body is auto generated.                                                                               |\n| **Content APIs**   | Instant and GraphQL (gql) APIs are on, CORS is `*` allowing client requests from any domain. Headless routing is available from `/-/headless/`                |\n| **JSON Access**    | Routes can render JSON with by using a `/?toJSON`, query parameter at the end of any route.  Custom made JSON views and other datatypes are also accessible.  |\n| **SEO**            | SEO is automated on page from user input on each content item, and is also available from toJSON calls or the `/headless/routing.json` endpoint               |\n\n{% hint style=\"warning\" %}\nChanging a mode will instantly modify the output behavior of WebEngine&#x20;\n{% endhint %}\n\n### Change WebEngine Mode\n\nMode is controlled by a setting that can be found in the Manager UI under General. The default mode is always \"traditional\".&#x20;\n\n![Setting editable under \"general\" ](<../../../.gitbook/assets/image (48).png>)\n","category":"guides","service":"webengine"},{"name":"Environment States & Caching Behaviors","url":"/webengine/guides/web-engine/environment-states-and-caching-behaviors","objectId":"-McQnvkMgFNe--aZjrRh","item":[],"content":"---\ndescription: >-\n  Explains the multiple caching behaviors in the different environment state of\n  WebEngine.\n---\n\n# Environment States & Caching Behaviors\n\n### WebEngine Environment States\n\nWebEngine has two primary states, stage preview \\[**dev**], and published production \\[**live**]. **Live** is available through registered domains which have their branch set to **live. Dev** is available through your preview domain _HASH-dev.webengine.zesty.io_ or through a [registered domain](../../../instances/guides/how-tos/how-to-launch-an-instance.md#1-set-a-custom-domain-name) that has branch set to **dev.** Domains are assigned in the accounts.zesty.io user interface.\n\n| Environment State     | What resolves                                                                      |\n| --------------------- | ---------------------------------------------------------------------------------- |\n| **live - production** | Only published content and code files                                              |\n| **dev - preview**     | The latest version of content (published or not) and code files (published or not) |\n\nNote, any resource that does not have version, like customer headers and settings, will immediately affect production on new renders or a cache clear.\n\n### WebEngine Caching\n\nWebEngine has different cache layers in place for efficiency, speed, and global scale. Caching only occurs exist on HTTP GET requests.\n\n**System Cache**\n\nThe system cache is used to deliver data on GET and POST requests. The system cache is cleared on every POST, PUT, DELETE, and PUBLISH requests to the [Instances API](../../../instances/guides/instances-api.md). After the system cache is clears, it begins to rebuild cache references for every sequential request to data that powers a Zesty.io instance.\n\n**CDN Cache**\n\nThe CDN cache ensure speedy delivery of assets, Zesty.io has specific features sets to work with cache purging for Akamai and Fastly, but can work with any CDN. &#x20;\n\nThe CDN cache is explicitly used when serving WebEngine GET Requests to any registered domain (both branch \"dev\" or \"live\"). CDN cache is destroyed upon an expiry date or a PUBLISH event. HTTP requests are rendered on the fly and stored in the cache upon first render. &#x20;\n\n#### Ways to Purge/Refresh the Cache of your Instance\n\n**Publish Events**\n\nAny publish action will trigger the purge/refresh the system cache and CDN cache.\n\n**Manual Purges**\n\nThe Manager UI offers two options manually purge/refresh cache. The first option will purge ALL http cached resources and assets of the full instance. That option is located in Manager UI, by clicking the instance name, a fly out will reveal a \"Refresh Instance Cache\" button.\n\n![In Manager UI, by clicking the instance name, a fly out will reveal a \"Refresh Instance Cache\" button.](<../../../.gitbook/assets/image (4).png>)\n\nThe second option is to purge/refresh individual HTTP cached resources of a specific content item. This option is available in the Manager UI when viewing a content item, scroll down the page until the CDN option appears on the right.&#x20;\n\n![In Manager UI, when viewing a content item, scroll down and look on the right side.](<../../../.gitbook/assets/image (43).png>)\n","category":"guides","service":"webengine"},{"name":"Resource Resolution","url":"/webengine/guides/web-engine/resource-resolution-order","objectId":"-MBwHtrUYQBItT9MCi_F","item":[],"content":"---\ndescription: >-\n  The order in which specific types of behavior or views load, from 301\n  redirects to 404s.\n---\n\n# Resource Resolution\n\nWhen a request is served by WebEngine, it reads the url path and attempts to match the url path to a content item resources. URL are checked against resource in a specific order, and will resolve the resource first if a match is found. If two resources share a URL path, then the one that loads first will resolve and the other is ignored.\n\n**Resource load order:**\n\n1. Proxy (if configured). If url doesn't exist, it skips. _?toJSON urls ignore proxy_&#x20;\n2. Media Proxy (if configured) for _/-/media/_ urls\n3. Static files generated by Zesty.io: site.css and site.js\n4. Instant JSON API _e.g. /-/instant/7-zyx-zyxzyc.json_\n5. GQL API _e.g. /-/gql/\\*_\n6. Static files generated by Zesty.io: _sitemap.xml, feed.xml, robots.txt_\n7. Legacy JSON endpoints _e.g. /-/custom/_\n8. Well Known Files _e.g. /.well-known/\\*_\n9. Custom endpoints _e.g. /custom/endpoints.json_\n10. Legacy HTML endpoints _e.g. /ajax/_&#x20;\n11. Content Models Views if a content item's meta path matches the request page _e.g. /about/team/_\n12. Wild Card Views e.g. _/store/\\*/cool-shirt/_\n13. 301 redirects\n14. 404 Pages e.g. when no resources match the url pattern\n\n### Base Directory Setting\n\n**Overview**\n\nZesty.io will default all automated assets files to the root `/` directory unless the base directory setting has been added and set. \\\n\\\nthere is a setting on the instance with category:`general` key:`base_directory` with a directory set as its value e.g. `/blog/`\n\n**Base Directory and Zesty.io Auto-created Files**\n\nOnce the Base Directory settings has a value the Zesty.io auto-created files listed below will be immediately affected.\n\n* site.js\n* site.css\n* sitemap.xml\n* robots.txt\n* feed.xml\n* [Instant JSON API](../json-endpoints/instant-content-api.md)\n* [GQL API](../graphql.md)\n\n**Using the Base Directory setting** **with non-automated files**\n\nOther files created in the code editor such as custom endpoints must be manually named to follow the path of your choice. If you want content items to follow the same path as the Base Directory setting value, then a content model must exist with that path. For example, if you're using Zesty.io WebEngine only for your website's  `/blog/` subdirectory then you need to setup a content item as a placeholder with `/blog/` as its URL _and_ create the Base Directory setting (as shown below)  with the value `/blog/`.&#x20;\n\n#### Adding the Base Directory Setting\n\nThe Base Directory setting can be added via [API](https://instances-api.zesty.org/#d295e8c8-40a2-435c-85cd-23a043a7135f) with the following JSON body:\n\n```\n{\n    \"category\": \"general\",\n    \"keyFriendly\": \"Base Directory\",\n    \"key\": \"base_directory\",\n    \"value\": \"\",\n    \"admin\": false,\n    \"parselyAccess\": false,\n    \"dataType\": \"text\",\n    \"options\": \"\",\n    \"tips\": \"\"\n}\n```\n\n&#x20;If you know what value you want the base directory set to go ahead and add it to the JSON body under `value`.\n\n### Reserved Paths\n\nSome path parts are reserved for security reasons. Any content item url path that includes these words will 404.\n\n* vendor\n* composer\n* package\n* package-lock\n* gulpfile\n* README\n","category":"guides","service":"webengine"},{"name":"View Templating","url":"/webengine/guides/web-engine/view-templating","objectId":"-LLIzCf2gsSS5HWk1GkZ","item":[],"content":"# View Templating\n\n## What are Views?\n\nViews are template files in Zesty.io that can render HTML or various other MIME types. Views render dynamically using the templating language, [Parsley](view-templating.md#zesty-ios-templating-language-parsley).\n\nAll Views have a ZUID that starts with **11**, for example `11-123a2f0-qw2n4`.&#x20;\n\nViews can carry one of three associations:\n\n1. **Content Model** _View_\\\n   A Content Model can optionally be created with a view. When this happens, Content Items of that Model get unique URLs. When a content model's item gets accessed by its URL, the [Zesty.io Site Engine](./) will render the view associated with it. When a view is associated with a content model, it has unique behaviors in the Zesty.io Manager Code Editor. This views invoke the `{{this}}` Parsley call which gives direct access to the specific Content Item being rendered.\n2. **Endpoint** _View_\\\n   Views created to load a specific MIME type. Through Parsley they can have access to any data in an Instance, they can also have access to foreign instance data through [EcoCode](../../../accounts/guides/ecosystems.md#ecocode-shared-view-templates).\n3. **Snippet** _View_\\\n   ****Code that is intended to be reused, like HTML components or common each loops, can stored in a snippet and be `{{include}}`'d in both Endpoint Views of Content Model Views.\n4. **Wildcard View** _View_\\\n   ****A view that resolves against a dynamic url structure which may contain any URL path part. For example a wild card view created called: /store/\\*/\\*/ will resolve /store/anything/here/. These views have access to Parsley, but do not have access to the `{{this}}` call.&#x20;\n\n## Zesty.io's Templating Language, Parsley\n\nParsley is templating language used in a view to access content managed in Zesty.io.\n\nSimilar to other templating languages, Parsley uses double curly brackets `{{ }}` to open and close template expressions. Inside these brackets a developer can use Parsley to access content, write conditionals, or reference look ups. Parsley templating expressions are written alongside standard HTML. See the below example for a reference.\n\n{% code title=\"Parsley Each Example\" %}\n```markup\n<ul>\n{{each articles as article}}\n    <li><a href=\"{{article.getURL()}}\">{{article.title}}</a></li>\n{{end-each}}\n</ul>\n```\n{% endcode %}\n\nOne can quickly explore what Parsley has to offer at the [Parsley REPL](https://parsley.zesty.io/hello-world/).\n","category":"guides","service":"webengine"},{"name":"Parsley","url":"/webengine/guides/web-engine/introduction-to-parsley","objectId":"-Lar86sOVc9NWM4-QwWj","item":[],"content":"---\ndescription: Learn the basics of Zesty.io's templating language Parsley.\n---\n\n# Parsley\n\n### Overview\n\nParsley is the templating language used in Zesty.io. Parsley allows data stored and edited in the Content section to be accessed by the website files and data feed files created in the Editor section.\n\n#### Why is it called \"Parsley\"?\n\nParsley is play on words for how our rendering service \"parses\" through the code in the files looking for the templating code and, of course, a reference to the green, zesty flavor of freshly chopped parsley.\n\n#### What is Parsley?\n\nParsley is a dot-notation-style templating language used to quickly access data, perform logic operations, provide shortcuts for reused code segments and other programing-type functions, all in a human readable syntax.\n\n#### What Can Parsley Do?\n\nAt its core, Parsley can reference any Field from any content entry from any content set available on that Zesty.io Instance and replace the Parsley code with the value stored to that field when the file is rendered to a browser or endpoint request. Parsley can also:\n\n* Iterate through content collections\n* Evaluate Conditionals&#x20;\n* Execute Math Statements&#x20;\n* Access and Set Variables stored for the page load, session variables, cookies, GET and POST variables.&#x20;\n* Execute Query Statements&#x20;\n* Reference and include files available on the instance &#x20;\n* Be customizable and autocomplete based on a unique instance's content structure.\n* Modify data\n* Modify Images and create new image files&#x20;\n* And much more\n\n{% hint style=\"warning\" %}\nParsley _only_ works in Views. It does not work in Style Sheets or Scripts. Do not use Parsley in style sheet or JavaScript files. In order to use Parsley in styles and scripts use  `<script>` or `<style>` tags in views or use inline styles.\n{% endhint %}\n\n### Basic Rules\n\nOnce you're familiar with the basic rules below jump into our [Parsley Repl](http://parsley.zesty.io/) for some practice.&#x20;\n\n* Curly brackets (single or double):\n  * on the same line will be parsed\n  * on separate lines will **not** be parsed\n  * in fields will **not** be parsed\n* Spacing\n  * Single curly brackets: no spaces between Parsley call and bracket (e.g. `{this.my_field}`)\n  * Double curly brackets: space(s) allowed between call and bracket (e.g. `{{ this.my_field }}`)\n* Case Sensitive\n  * Parsley is a case-sensitive language which means that `{{ This.my_field }}` and `{{ this.my_field }}` are not the same call and both are not valid. Be sure to follow case in the examples closely.\n\n### Syntax Structure\n\n#### Whitespace\n\nWhite space does not matter within double quotes but can't be used within single quotes.\n\n#### Comparisons\n\nUse double equals `==` in `if` statements and single equals everywhere else.\n\n#### Quotes\n\nUse quotes in `if` statements when evaluating strings.&#x20;\n\n#### Conjunctions\n\nUse `&&` and `||` in `if` statements, and `and` and `or` everywhere else.\n\n#### Brackets\n\nUse double curly brackets `{{ }}` to start a Parsley statement. Use single curly brackets `{ }` when making a Parsley call within a double-bracketed call.&#x20;\n\n#### Comments\n\nUse `(**` to start and `**)` to end comments that will not render in the output of the website.\n","category":"guides","service":"webengine"},{"name":"introduction-to-parsley","url":"/webengine/guides/web-engine/introduction-to-parsley","item":[{"name":"Parsley Index","url":"/webengine/guides/web-engine/introduction-to-parsley/parsley-index","objectId":"-Lav2Zva91iAW-Hq5b8j","item":[],"content":"---\ndescription: This index collects all Parsley syntax and methods.\n---\n\n# Parsley Index\n\n## \\_index\n\nWhen looping through a content model with an each loop, you can use `variable_name._index` to get the current count of how many times you have run through the each loop. \\_index begins counting from 0. To start counting at 1 use `_num` instead.\n\n```\n<div class=\"row\">\n{{ each team_members as member }}\n{{ if {member._index} % 3 == 0 }} (** Checks for every third loop, can be used to end and stop rows when using fixed width columns in a grid  **)\n</div><div class=\"row\">\n{{ end-if }}\n<div class=\"column\">\n<p>{{ member.name }}</p>\n<p>{{ member._index }}</p>\n</div>\n{{ end-each }}\n</div>\n```\n\n## \\_length\n\nWhen looping through a content model with an each loop, you can call `{{ variable_name._length }}` to get the total number of times the loop will run.\n\n```\n<div class=\"article-tags\">\n{{ each article_tag as tag }}\n<p>{{ tag.name }}{{ if {tag._num} != {tag._length} }}, {{ end-if }}</p>\n{{ end-each }}\n</div>\n(** As long as the loop's num does not equal its length a comma will be appended to the list of tags **)\n```\n\n## \\_num\n\nWhen looping through a content model with an each loop, you can use `variable_name._num` to get the current count of how many times you have run through the each loop. `_num` begins counting from 1. To start counting at 0 use `_index` instead.\n\n```\n<div class=\"article-tags\">\n{{ each article_tag as tag }}\n<p>{{if {tag._num} == 1 }}This is the first item{{ end-if }}</p>\n{{ end-each }}\n</div>\n(** As long as the loop's num does not equal its length a comma will be appended to the list of tags **)\n```\n\n## activate\\_links()\n\nConverts plain text URLS into anchor tags [URL](https://github.com/zesty-io/zesty-org/tree/3418a808274fc82af3fe7dbbfeb55591b527edaf/services/web-engine/introduction-to-parsley/URL/README.md). Useful for content where text comes in with HTML stripped.\n\n```\n{{ page.textarea.activate_links() }}\n```\n\n## api.dribbble\n\n```\n{{ each api.dribbble.getShots(USER_NAME) as shot }}\n    <img src=\"{{ shot.image_teaser_url }}\" alt=\"{{ shot.title} }\" />\n{{ end-each }}\n```\n\n## breadcrumbs\n\nThe `breadcrumbs` call outputs an automated breadcrumb trail of links, listing the parent pages assigned to the current page. If there are no available links, then an empty span is outputted.\n\n```\n{{ breadcrumbs }}\n\nExample Output:\n<span itemprop=\"breadcrumb\">\n    <span class=\"crumb\"><a href=\"/blog/\">Blog</a></span> \n    <span class=\"sep\">»</span>\n    <span class=\"crumb\"><a href=\"/blog/example-category/\">Example Category</a></span>\n    <span class=\"sep\">»</span>\n    <span class=\"crumb\">Example Post</span>\n</span>\n```\n\n## clippings (see Globals)\n\n## Comments (\\*\\* **\\*\\***)\n\nUse these comments to prevent Parsley or other code from processing in HTML and Endpoint files. Anything within these comments are server side comments and will not render out to the source code.\n\n```\n(** old code  **)\n(** \n< h1>{{ page.title }}</h1>\n**)\n(** new code **)\n<h3>{{ page.new_title }}</h3>\n```\n\n## current\\_view\n\nThe `{{ current_view }}` call is a unique Zesty.io statement that will load the Page View associated with the current website url. `{{ current_view }}` is used once in the `loader` snippet. This allows a website to have consistent template elements above and below the unique aspect of each page.\n\n```\n{{ include header }}\n<div class=\"content\">\n      {{ current_view }}\n</div>\n{{ include footer }}\n```\n\n## date(format)\n\nUses the [php date](https://www.php.net/manual/en/datetime.format.php) format to create the date string shown to the user.\n\n```\n<em>{{ page.published_date.date(l, F jS, Y \\a\\t g:ia) }}</em> \n// <em>Sunday, January 1st, 2011 at 10:50pm</em>\n```\n\n## dateDiffForHumans()\n\nThis method creates an expression of duration comparing the date and time from a content field to the current date and time.\n\n```\n{{ page.date.dateDiffForHumans() }}\n<br/>\nReturns:\n<br/>\n[x time] ago\n```\n\n## each\n\nThe Parsley Each statements, also known as loops, allow you to iterate (loop) through each entry of a content model.\n\n```\n{{ each team_members as member }}\n<p>{{ member.name }}</p>\n{{ end-each }}\n```\n\n## else\n\nThe `else` statement allows for a a final case if none of the defined conditions in the `if` statement have been met.\n\n```\n{{ if {page.field} == 1 }}\nExample where first condition is met\n{{ else-if {page.field} == 2 }}\nExample where second condition is met\n{{ else }}\nExample where no condition is met\n{{ end-if }}\n```\n\n## else-if\n\nThe `else-if` statement is used for the defining alternate conditions, if the original if condition is not met. There can be as many `else-if` statements as needed after the opening `if` statement and before the `end-if`.\n\n```\n{{ if {page.field} == 1 }}\nExample where first condition is met\n{{ else-if {page.field} == 2 }}\nExample where second condition is met\n{{ else }}\nExample where no condition is met\n{{ end-if }}\n```\n\n## end-each\n\nRequired to close `each` loops.\n\n```\n{{ each team_members as member }}\n<p>{{ member.name }}</p>\n{{ end-each }}\n```\n\n## end-if\n\nRequired to close an `if` statement.\n\n```\n{{ if {page.field} == 1 }}\nExample where first condition is met\n{{ else-if {page.field} == 2 }}\nExample where second condition is met\n{{ else }}\nExample where no condition is met\n{{ end-if }}\n```\n\n## escapeForJs()\n\nThe `escapeForJs()` call returns text with all the characters that could break a Javascript or JSON string escaped with `\\`.\n\n```\n[\n {\n \"title\": \"{{ page.title.escapeForJs() }}\"\n }\n]\n```\n\n## filter()\n\nThe `.filter()` call can be used to access specific data based on the scope.\n\n```\n{{ scope.filter(z.zuid = '{this.one-to-one-field}').scope-field }}\n\n{{ another-set.filter(z.zuid = '{this.one-to-one}').page_title }}\n```\n\n## find\\_in\\_set\n\nThe `find_in_set` query allows for looking for a specific number or string in a comma separated list. `find_in_set` is always used to filter a Content Model related with a One-to\\_Many relational field.\n\n```\n{{ each tags as tag where find_in_set(tag.zuid, '{this.tags}') }}\n<span>{{ tag.title }}</span>\n{{ end-each }}\n```\n\n## first()\n\nThe `first()` call will access the content available in the first entry of any content model.\n\n```\n{{ content_model.first().title }}\n// \"This is the title for the first entry of a content model\"\n```\n\n## format\\_currency()\n\nThe `format_currency()` call transforms a float number from a content field to the format $XX.XX.\n\n```\n{{ each products as product }}\n    {{ product.price.format_currency() }}\n{{ end-each }}\n```\n\n## get\\_var\n\nThe `get_var` call returns the value of any query parameter in the current URL by referencing the key. When printing out any query parameter using `get_var`, be sure to use `htmlentities()` to prevent Cross-site Scripts and code injections.\n\n```\n// at the page /blog/?category=news\n\n{{ get_var.category.htmlentities() }}\n```\n\n## getfeedurl()\n\nEvery content model in Zesty (single page, page groups or datasets) can access a public RSS feed. It will always be `content_model_refrence_name-feed.rss/`\n\n```\n{{ content_model.getfeedurl() }}\n```\n\n## getImage(width, height, type)\n\nThe `getImage()` function takes optional arguments for width, height, and type (`fit` or `crop`) and returns a URL to that image. Fit is the default and does not need to be explicitly declared. Crop type requires all 3 arguments declared. Fit is similar to the css style \"contain\" and crop is similar to the css style \"cover\".\n\n```\n<img src=\"{{ page.photo.getImage() }}\" />\n<img src=\"{{ page.photo.getImage(100) }}\" />\n<img src=\"{{ page.photo.getImage(,100,fit) }}\" /> \n<img src=\"{{ page.photo.getImage(100,,fit) }}\" />\n<img src=\"{{ page.photo.getImage(100,100,fit) }}\" />\n<img src=\"{{ page.photo.getImage(100,100,crop) }}\" />\n```\n\n## getImageTitle()\n\nThe `getImageTitle()` call returns the image title set in the Media Tab.\n\n```\n{{ page.image.getImageTitle() }}\n```\n\n## getMediaURL()\n\nThe `getMediaURL()` call returns the original URL to that file. This is how to access files stored in the Media Tab that are not images, such as PDFs and MP4s. You can also use this call to access the original file of an image without the default optimization provided by Zesty.io.\n\n```\n<a href=\"{{ page.download_file.getMediaURL() }}\" >Download</a>\n// <a href=\"https://domain.com/file.pdf\" >Download</a>\n```\n\n```\n// If looping through an image field with multiple images use this call\n{{ my-var.image.getmediaurl() }}\n```\n\n## getNextURL(number)\n\nThe `getNextURL()` call returns the current page url with a query parameter `p` increased by the number specified. If there is no query parameter `p`, it will set it equal to the number specified. If no number is provided, the default is 10. This can be used with `get_var.p` to do pagination with an each loop.\n\n```\n{{ page.getNextURL(10) }}\n// blog/?p=10\n```\n\n## getPreviousURL(number)\n\nThe `getPreviousURL()` call returns the current page url with a query parameter `p` decreased by the number specified. If there is no query parameter `p`, it will set it equal to 0. If no number is provided as an argument, the default is 10. This can be used with `get_var.p` to do pagination with an each loop.\n\n```\n// on the page /blog/?p=30\n{{ page.getPreviousURL(10) }}\n// /blog/?p=20\n```\n\n## getUrl()\n\nThe `getUrl()` call returns the relative path to the entry.\n\n```\n<a href=\"{{ blog.first().getUrl() }}\">Link</a>\n// <a href=\"/blog/\">Link</a>\n```\n\n## globals\n\nThe `globals` call is used to access content stored in the Globals (formerly Content Clippings) set.\n\n```\n{{ globals.phone }}\n\n// Returns: \n555-555-5555\n```\n\n## Google Analytics\n\nParsley provides a short cut to creating google analytics tag. The advantage of using this Parsley call is that as Google Analytics updates their syntax, it will be automatically updated on your website.\n\nThis call `{{gaEvent(eventCategory,eventAction,eventLabel,eventValue)}}` will trigger an event to your Google Analytics integration.\n\n**eventCategory:** _text_ required Typically the object that was interacted with (e.g. 'Video')\n\neventAction:_text_ required The type of interaction (e.g. 'play')\n\n**eventLabel:\\***text\\* optional Useful for categorizing events (e.g. 'Fall Campaign')\n\n**eventValue:\\***integer\\* optional A numeric value associated with the event (e.g. 42)\n\nRead the spec for GA Events [here](https://developers.google.com/analytics/devguides/collection/analyticsjs/events%3E)\n\n```\n<pre><a href=\"https://vimeo.com/144792991\" {{gaEvent(Vimeo, Opened-video)}}>My Video</a></pre>\n\n// returns \n<pre><a href=\"https://vimeo.com/144792991\" onclick=\"ga('send','event', 'Vimeo', ' Opened-video', ' ',undefined,'{'nonInteraction': 1}');\">My Video</a></pre>\n```\n\n## gravatar()\n\nThe `gravatar()` function takes an email address and requests an image from the Gravatar API.\n\n```\n\"<img class=\"highlight\" src=\"{{ page.author_email.gravatar() }}\" />\"\n// <img class=\"highlight\" src=\"http://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\" />\n```\n\n## hasChildren()\n\nThe `hasChildren()` function returns true or false, depending if any pages are parented to the entry. This can be used to find out if a page has pages that live under it. This is helpful when using logic to create secondary navigations.\n\n```\n{{ if {page.hasChildren()} }}\n    // subnav code\n{{ end-if }}\n```\n\n## html\\_entity\\_decode()\n\nThe `html_entity_decode` call converts all HTML entities in the provided string to their applicable characters.\n\n```\n<p>{{ page.description.html_entity_decode() }}</p>\n```\n\n## htmlentities()\n\nThe `htmlentities()` call convert all applicable characters to HTML entities. Should be used whenever printing out a get or post variable to prevent Cross-site Scripting and code injection.\n\n```\n{{page.html.htmlentities()}}\n{{ get_var.search.htmlentities() }}\n```\n\n## if\n\nThe `if` statement evaluates conditions using `==`, `!=`, `>=`, `<=`, `<`, and `>`. Within the `if` statement, multiple conditions can be combined using `&&` for and, and `||` for or. If statements can also execute math.\n\n```\n{{ if {page.field} == 1 && {page.price} + 10 > 100 }}\nExample\n{{ end-if }}\n```\n\n## include\n\nThe [`include`](https://zesty.org/services/web-engine/introduction-to-parsley/include) call is a prompt to reference the code in any View which includes views, snippets, and endpoints.\n\n```\n{{ include header }}\n```\n\n## instance.host\\_env\n\nShows the instance's webengine URL. This only works in preview - not on live.\n\n```\n{{ instance.host_env }}\n```\n\n## instance.host\\_live\n\nShows you the instance's first registered domain. This only works in preview - not on live.\n\n```\n{{ instance.host_live }}\n```\n\n## instance.host\\_preview (or instance.host\\_relative)\n\nShows an instance's preview URL. This only works in preview - not on live.\n\n```\n{{ instance.host_preview }}\n{{ instance.host_relative }}\n```\n\n## instance.host\\_protocol\n\nShows the instance's protocol based on its settings. This only works on preview - not on live.\n\n```\n{{ instance.host_protocol }}\n```\n\n## last()\n\nThe `last()` call will access the content available in the last entry of any content model.\n\n```\n{{ articles.last().title }}\n```\n\n## limit\n\nThe `limit` statement is used in an each loop to specify how many content entries will result. The `limit` statement can also be used to skip a number of entries and show the next set if two arguments are provided.\n\n```\n{{ each articles as post where post.featured = 1 sort by post.date desc limit 20 }}\n// entries 1 through 20\n{{ end-each }}\n{{ each articles as post where post.featured = 1 sort by post.date desc limit 10,20 }}\n// entries 11 through 30\n{{ end-each }}\n```\n\n## length()\n\nThe `length` of a given string.\n\n```\n{{this.title.length()}}\n// outputs a number, ex. 11\n\n{{if {this.title.length()} > 5}}\n // do this \n{{end-if}}\n```\n\n## math( statement )\n\nThe `math()` call executes an equation and returns a number.\n\n```\n(** plain output **)\n{{ math( 1 + 2 ) }}\n\n(** in use with a page field **)\n{{ math( round({page.product_cost} * 1.5) ) }}\n\n(** in use with a variable **)\n{{ $my_num = 4 }}\n{{ math( {$my_num} + 2 ) }}\n```\n\n## navigation(number)\n\nThe `navigation()` call will access your Zesty.io Navigation Structure and output it as an HTML list.\n\n```\nsite.navigation(INT depth, BOOL bootstrap, BOOL json)\n\n{{site.navigation()}} // all defaults to html output\n{{site.navigation(1)}}  // depth of the parent child levels\n{{site.navigation(3, false, true)}}  // json output\n```\n\nThe call will mimic the content navigation layout you find in the Zesty.io Content Manager and will ignore pages marked as unlisted. A number argument will specify what level of children to access within the navigation. Blank will list all pages, 1 will only be top level pages, 2 will be top level and subpages, 3 will be top level, subpages and tertiary pages, and so on.\n\n```\n{{ navigation() }}\n\n// Returns:\n<ul id=\"nav\" class=\"nav\">\n     <li><a href=\"...\"></a>\n          <ul>\n              <li><a href=\"...\"></a></li>\n          </ul>\n     </li>\n     <li><a href=\"...\"></a></li>\n</ul>\n```\n\n## number\\_format(number)\n\nThe `number_format()` call returns a number with the specified number of decimals as the argument. Blank will remove any decimals.\n\n```\n{{ $number = 3.14 }}\n\n{{ $number.number_format(1) }} \n\n// Returns: \n3.1\n```\n\n## obfuscate()\n\nThe `obfuscate()` call returns obscure text to web crawlers, like email or phone numbers.\n\n```\n<a href=\"mailto:{{setting.contact-form.sending_email.obfuscate()}}\">{{setting.contact-form.sending_email.obfuscate()}}</a>\n```\n\n## xssProtect()\n\nThe `xssProtect()` call encode, decodes, strips html and turns characters into entities.\n\n```\n{{get_var.search.xssProtect()}}\n```\n\n## page\n\nThe `page` call represents the content entry for the current page. It provides access to the data associated with the page. Any field in the Content Model can be accessed using this method when on the associated page.\n\n```\n{{ page.field_name }}\n```\n\n## paypalStandard(action, product, price, shipping)\n\nQuickly create a Paypal Standard buy, donate, or add to cart button in Parsley. To start using Paypal Standard a Paypal account must be created. The Paypal account information and tax rate are set in the Config Tab, under Settings-> Paypal Standard. These must be set to send money to the appropriate account. Action can be `buy`, `addtocart` and `donate`.\n\n```\n{{ each products as p }}\n    <h1>{{ p.title }}</h1>\n    <p>{{ p.price }}</p>\n    {{ paypalStandard(buy,{p.title},{p.price},{p.shipping}) }}\n {{ end-each }}\n```\n\n## post\\_clean()\n\nThe `post_clean()` call replaces `\\n` `\\r\\n` or `\\` with a blank string.\n\n```\n{{ page.imported_content.post_clean() }}\n```\n\n## post\\_var\n\nThe `post_var` call references data available in the requests post body. A couple common ways data can be added to the request post body is by submitting a form with a `method=\"post\"` or using javascript `POST`. A common practical use for this call is to check is a form has been submitted by checking if the POST variable for the name of a required input is available.\n\n```\n{{ if {post_var.email} }}\nThank you for submitting your form, please check {{ post_var.email }} for a verification email.\n{{ else }}\n// form code\n{{ end-if }}\n```\n\n## preg\\_replace(pattern, replacement)\n\nThe `preg_replace()` call is a regular expression replacement. To learn more about Regular expression go to [http://www.regular-expressions.info/](http://www.regular-expressions.info/)\n\n```\n{{ page.content.preg_replace(/i/,*) }}\n\n//Returns:\nI'm gonna f*x that last joke by tak*ng out all the words and add*ng new ones.\n- M*tch Hedberg\n```\n\n## random()\n\nThe `random()` call is used to reference a random content entry for a content model.\n\n```\n{{ articles.random().title }}\n// \"the 'title' from a random item in 'articles'\"\n```\n\n## replace(pattern, replacement)\n\nThe `replace()` call does a simple replace without any regular expression.\n\n```\n// $description = \"We wrote this blog post\"\n{{ $description.replace(We, I) }}\n// \"I wrote this blog post\"\n```\n\n## request.path()\n\nGets the full path from request **excluding** query parameters, for example lets use the url /store/12345/my-product/\n\n```\n{{ request.path() }} // outputs: /store/12345/my-product/\n```\n\n## request.fullpath()\n\nGets the full path from request **including** query parameters, for example lets use the url /store/12345/my-product/?query=newvalue\n\n```\n{{ request.fullpath() }} // outputs: /store/12345/my-product/?query=newvalue\n```\n\n## request.pathPart(num)\n\nGet the \"parts\" of a url, for example lets use the url /store/12345/my-product/\n\n```\n{{ request.pathPart(1) }} // output: store\n{{ request.pathPart(2) }} // output: 12345\n{{ request.pathPart(3) }} // output: my-product\n{{ request.pathPart(4) }} // output: (empty string)\n```\n\n## request.queryParam(num)\n\nGet the query parameters from url, for example lets use the url /store/12345/my-product/?test=hello\n\n```\n{{ request.queryParam(test) }} // output: hello\n{{ request.queryParam(lala) }} // output: (empty string)\n```\n\n## response.addHeader(name, ...value)\n\nThis call will add a header to the response. This call does not output anything.\n\n```\n{{response.addHeader(ab-test, 4)}}\n\n// adds header to \"ab-test\" with value \"4\"\n\n{{response.addHeader(Cache-Control, max-age=300, public)}}\n\n// adds header to \"Cache-Control\" with value \"max-age=300, public\"\n```\n\n## response.redirect301(url)\n\nThis call will add a redirect the page.\n\n```\n{{response.redirect301(https://www.google.com)}}\n```\n\n## response.redirect302(url)\n\nThis call will add a redirect the page.\n\n```\n{{response.redirect301(https://www.google.com)}}\n```\n\n## response.return404(message)\n\nThis call will response to your default 404 page, if there is no default 404 page, a generic 404 page will display with the \"message\" param as an h1 tag.\n\n```\n{{response.return404(My Default Message)}}\n```\n\n## sectionlinks(number)\n\nThe `sectionlinks()` call looks at the current page and searches up to its top-level parent to create a navigation structure as an HTML list. Depth can be specified by as a numeric argument as `sectionlinks(2)` or you can choose not to display the top level page by passing `sectionlinks(off)`\n\n```\n{{ sectionlinks() }}\n\n// <ul class=\"sectionLinks\" id=\"sectionLinks\">\n      <li><a href=\"/about-us/\" title=\"About Us\">About Us</a>\n         <ul class=\"sectionLinks\">\n         <li><a href=\"/about-us/team/\" title=\"\">Team</a></li>\n         <li><a href=\"/about-us/qualifications/\" title=\"Qualifications\">Qualifications</a></li>\n      </ul>\n    </li>\n</ul>\n```\n\n## seo\\_meta\\_description\n\nUse this call to access an item's meta description.\n\n```\n{{ this.seo_meta_description }}\n```\n\n## seo\\_link\\_title\n\n{% hint style=\"warning\" %}\n**Deprecated:** this functionality is only available to test in preview, it is not available for production websites because they are statically cached.\n{% endhint %}\n\nThis call will access the Navigation Title for an item which is located under an [item's Meta information](https://zesty.org/services/manager-ui/content/meta-fields) in the Content section.\n\nThe `sever_var` call provides access to some of the most common server variables holding information about headers, paths, and script location. Some available variables are:\n\n```\n{{ this.seo_link_title }}\n```\n\n## seo\\_meta\\_title\n\nThis call will access the Meta Title for an item which is located under an [item's Meta information](https://zesty.org/services/manager-ui/content/meta-fields) in the Content section.\n\n```\n{{ this.seo_meta_title }}\n```\n\n## setting\n\nThe `settings` call returns data stored in the Instance Settings in the Config Tab.\n\n```\n<a href=\"{{ setting.social-links.linkedin_link }}\">Zesty on Linkedin</a>\n// <a href=\"https://www.linkedin.com/company/zesty-io/\">Zesty on Linkedin</a>\n```\n\n## toJSON()\n\nA function outputs a JSON string that can be use in inline JavaScript. The function can be called off this, data calls, or loop variables. Parsley REPL Example [https://parsley.zesty.io/turn-any-content-item-to-json/](https://parsley.zesty.io/turn-any-content-item-to-json/)\n\n`{{this.toJSON(depth, showMeta)}}`\n\n* `depth` is an integer for hydration depth, max is 5\n* `showMeta` true or false: `true` gives all meta, routing, and zuid details, and locale details. `false` is just content\n\n```\n{{this.toJSON(3,false)}} \n\n{{model.first().toJSON(2, true)}}\n\n{{each model as item}}\n    {{item.toJSON()}}\n{{end-each}}\n```\n\n{% code title=\"Example Output for {{this.toJSON}} call on zesty.io's homepage\" %}\n```javascript\n{\n    title: \"Your Content, Anywhere\",\n    content: \"<h1>A CONTENT PLATFORM THAT POWERS ENTERPRISE GRADE WEBSITES AND APPLICATIONS</h1>\",\n    image: {\n        type: \"images\",\n        totalItems: 1,\n        data: [\n            {\n                type: \"image\",\n                zuid: \"3-5c58033-eb8cq\",\n                url: \"https://zestyio.media.zestyio.com/Zesty.io---9-5seg.mp4\"\n            }\n        ]\n    },\n    customer_logo_heading: \"Trusted by enterprises, startups, and everyone in between\",\n    main_headline: \"Managing content at scale is difficult.\",\n    main_description: \"<ul><li><p>Security issues, and out of date software</p></li><li><p>Editing the same content in multiple places</p></li><li><p>Developers needed for content updates</p></li></ul><h1>..but it doesn’t have to be</h1><ul><li><p>Centralized content management</p></li><li><p>Automated security and product improvements</p></li><li><p>Easy Distribution at global scale</p></li></ul>\",\n    pagina_nueva: null,\n    og_image: {\n    type: \"images\",\n    totalItems: 1,\n    data: [\n            {\n                type: \"image\",\n                zuid: \"3-a4f5ca6-a25px\",\n                url: \"https://kfg6bckb.media.zestyio.com/zesty-share-image-generic.png\"\n            }\n        ]\n    },\n    meta: {\n        type: \"item\",\n        model_name: \"homepage\",\n        zuid: \"7-31209c-g7qsjg\",\n        createdAt: \"2020-10-01 06:33:30\",\n        updatedAt: \"2020-10-01 06:33:29\",\n        listed: \"1\",\n        version: \"200\",\n        locale: {\n            id: \"1\",\n            name: \"English (United States)\",\n            code: \"en-US\",\n            default: \"1\",\n            active: \"1\",\n            enabled: \"1\"\n        },\n        model: {\n            type: \"model\",\n            zuid: \"6-31079c-vdg69q\",\n            name: \"homepage\",\n            label: \"Homepage\",\n            resourceURI: \"https://www.zesty.io/-/instant/6-31079c-vdg69q.json\"\n        },\n        web: {\n            url: \"https://www.zesty.io/\",\n            uri: \"/\",\n            fragment: \"zesty_home\",\n            canonical_tag_mode: \"1\",\n            sitemap_priority: \"-1.0\",\n            sitemap_last_updated: \"2020-10-01 06:33:29\",\n            canonical_query_param_whitelist: null,\n            canonical_tag_custom_value: null,\n            seo_link_text: \"Homepage\",\n            seo_meta_title: \"Zesty.io: The Headless CMS for Marketers + Developers\",\n            seo_meta_description: \"Built for teams to manage and distribute content to multiple sites, devices, and anywhere else it needs to go.\",\n            seo_meta_keywords: null\n        }\n    }\n}\n```\n{% endcode %}\n\n## \\*\\*\\*\\*\n\n## instance\n\nThe `instance` call returns data specific to the instance, such as the CDN URL and the domain or globally relevant data, such as the current data-time or the current language.\n\n```\n{{ instance.cdn }}\n```\n\n## instance.env\n\nThe `instance.env` call returns `live` for published content and views, and `dev` for versioned preview views and content.\n\n```\n{{ instance.env }}\n```\n\n## instance.date()\n\nThe `instance.date()` call returns the current date time and accepts arguments to modify the date based on the PHP data-time. More information available at [http://php.net/manual/en/function.date.php](http://php.net/manual/en/function.date.php)\n\n```\n{{ instance.date(l jS \\of F Y h:i:s A) }}\n\n//Returns:\nSunday 31st of July 2005 08:45:12 PM\n```\n\n## instance.lorem(number)\n\nThe `instance.lorem()` call auto generates lorem ipsum placeholder content.\n\n```\n{{ instance.lorem(20) }}\n\n// Returns : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam volutpat quam quis erat tristique pretium.\n```\n\n## instance.searchformatted(string,limit)\n\nThe `instance.searchformatted()` call takes a string and a limit as arguments and outputs instance-wide search results based on meta title, meta description, and path.\n\n```\n{{instance.searchformatted({get_var.search},10)}}\n```\n\n## slugify()\n\nThe `slugify()` call will concatenate strings by replacing spaces with dashes (-), lowercasing all letters, and stripping out all punctuation.\n\n```\n// if the page title is the string: My New Homepage!\n\n{{ page.title.slugify() }}\n\n// calling slugify on the page title will return: my-new-homepage\n```\n\n## sort by / order by\n\nThe `sort by` or `order by` statement can be used in an each loop to specify a field of the content model used to sort the content entries and which direction. Multiple fields can be specified using a comma separated list. If no sort is specified, the default is creation date. If no direction is specified ascending is the default.\n\n```\n{{ each articles as post where post.featured = 1 sort by post.date desc, post.title limit 10 }}\n{{ end-each }}\n```\n\n## striptags(start, length)\n\nThe `striptags` call will return a string with HTML tags removed. It also acts as a substring method if a start and length parameter are provided.\n\n```\n// $html = \"Hello <h1>Zesty.io</h1> users\"\n{{ $html.striptags() }}\n// \"Hello Zesty.io users\"\n```\n\n## substr(start, length)\n\nThe `substr()` call takes the text value it is attached to and returns a substring with the desired length. This call takes both positive and negative numbers. Negative numbers, for example, `substr(-5)` will return the last five characters in a string. Does not consider whitespace as part of length.\n\n```\n// $description = \"This is a longer description that needs shortened!\"\n{{ $description.substr(0,9) }}...\n// \"This is a lo...\"\n```\n\n## subWords(number\\_of\\_words)\n\nThe `subWords()` call returns the first specified number of words from a body of text.\n\n```\n{{ page.content.subWords(3) }}\n```\n\n## trim\\_zeros()\n\nThe `trim_zeros()` call with take a number like 8.0000000 and just show 8. It will also trim leading zeros as well so a number like 00800.00 will show 800.\n\n```\n// $num = 8.000000000\n{{ $num.trim_zeros() }}\n// 8\n```\n\n## truepath(zuid)\n\nThe `truepath()` call will determine the web URL to access a content entry based on a [ZUID](https://zesty.org/glossary#zuid). Since one-to-one and internal page fields in Zesty.io store ZUIDs, `truepath()` is a quick way to access the direct url to that content entry without needing to do an each loop or filter call.\n\n```\n{{ truepath({page.link_to_article}) }}\n```\n\n`truepath()` can be used in [each loops](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#each) as well, for example `{{ truepath(this.zuid) }}` or `{{ this.zuid.truepath() }}` and you can assign it to a Parsley variable as well.\n\n```\n{{each articles as art limit 5}}\n    {{art.zuid}} <br>\n    {{art.zuid.truepath()}}<br>\n    {{$var = {truepath({art.zuid})} }}\n    VAR: {{$var}}<hr>\n{{end-each}}\n```\n\n## where\n\nThe `where` statement is used to filter content entries in an each loop. `Where` statements use SQL style conditional statements to determine which entries to pass through the loop. A single each can use multiple conditions using `and` and `or`.\n\n```\n{{ each articles as post where post.featured = 1 or post.category = '{page.featured_category}` sort by post.date desc limit 10 }}\n{{ end-each }}\n```\n","category":"guides","service":"webengine"},{"name":"Parsley AutoLayout","url":"/webengine/guides/web-engine/introduction-to-parsley/parsley-autolayout","objectId":"-MXn0WGE7k9Q1arEp6Za","item":[],"content":"---\ndescription: >-\n  Automagical HTML output of headless content. Instant access to Content Layout\n  output.\n---\n\n# Parsley AutoLayout\n\nParsley AutoLayout (PAL) is a function that generates automatic HTML by looking at the content item's fields. It gets the sort order and each field's type and outputs HTML. PAL can be use on Parsley calls that reference a single content items (this, loop variables, and data calls).&#x20;\n\n**Examples:**\n\n* `{{this.autoLayout()}}`\n* `{{each model as item}} {{item.autoLayout(stacked)}} {{end-each}}`\n* `{{model.first().autoLayout(auto)}}`\n\nAuto Layout takes a single parameter `autoLayout(mode)`. The default mode is `auto` . `auto` `stacked` and `json` the current available options. The type will change the layout behavior of the auto layout and HTML output, but it will not change the content outputted. Auto will also access output from the [Content ](parsley-autolayout.md#content-designer-layout-behavior)[Layout](parsley-autolayout.md#content-designer-layout-behavior) [Designer tool](parsley-autolayout.md#content-designer-layout-behavior).\n\nIf auto layout is called on an illegal parsley reference it will output an error string stating the fact, this error will be suppressed to a comment on live instances.\n\n### Parsley AutoLayout Output Examples\n\nThe Inline option stacks html element on top of one another.\n\n{% code title=\"{{this.autolayout(stacked)}} example\" %}\n```markup\n<div class=\"pal-container\">\n    <h1 class=\"pal-text\">Hello, World</h1>\n    <div class=\"pal-textarea\">This is description text from a textarea input. Description text can be used for many purposes.</div>\n    <div class=\"pal-wysiwyg_basic\"><p>I'm gonna fix that last joke by taking out all the words and adding new ones.<br />- Mitch Hedberg&nbsp;</p></div>\n    <img class=\"pal-image\" src=\"https://9skdl6.media.zestyio.com/photo-by-adrian-drebler.f1cb27a519bdb5b6ed34049a5b86e317.jpg\" alt=\"\">\n    <img class=\"pal-image\" src=\"https://9skdl6.media.zestyio.com/photo-by-adrian-drebler.f1cb27a519bdb5b6ed34049a5b86e317.jpg\" alt=\"\">\n    <div class=\"pal-date\">2013-04-18</div>\n    <div class=\"pal-dropdown\">option_two</div>\n    <!-- number not supported -->\n    <!-- files not supported -->\n    <div class=\"pal-markdown\"></div>\n    <h1 class=\"pal-text\">info@gozesty.com</h1>\n    <div class=\"pal-textarea\">&lt;p&gt;I'm gonna fix that last joke by taking out all the words and adding new ones.&lt;br /&gt;- Mitch Hedberg&amp;nbsp;&lt;/p&gt;</div>\n</div>\n```\n{% endcode %}\n\n### CSS Classes\n\nEach HTML element outputs with a class of \"pal-\\[fieldtype]\" while the encompassing div has the class \"pal-container\". Developer can control PAL to have custom output by targeting these CSS classes in their own code.\n\n### Content Layout Designer Behavior\n\nThe drag n drop Content Layout Designer output will be automatically accessed by default by autoLayout when `auto` or `json` is passed.&#x20;\n\nContent Layout Designer write two files when a save or publish occurs, they follow this format `/z/pvl/[ZUID].json` and `/z/pvl/[ZUID].zhtml` When autoLayout() resolves, it looks to see if the associated content item or content model has a related set of files that match this format, if they do, Content Layout Designer will resolve automatically.&#x20;\n","category":"guides","service":"webengine"},{"name":"Accessing Multi-language in Ajax files","url":"/webengine/guides/web-engine/introduction-to-parsley/accessing-multi-language-in-ajax-files","objectId":"-Lb5NMFzMm4dYPguMG9Z","item":[],"content":"# Accessing Multi-language in Ajax files\n\nFor AJAX \"files\" (served as `/ajax/example`), the language can be specified via a GET query parameter. Example: `/ajax/example?lang=fr-ca`.\n\nA helpful tip for doing this automatically in ajax calls is to use the parsley call for the current language: `{{ site.current_lang }}`.\n","category":"guides","service":"webengine"},{"name":"Accessing Multi-language in Parsley","url":"/webengine/guides/web-engine/introduction-to-parsley/accessing-multi-language-in-parsley","objectId":"-Lb5PDsFibL5HEBWopEa","item":[],"content":"# Accessing Multi-language in Parsley\n\nAccessing content in multiple languages is very simple in Parsley.\n\nYou simply access the properties of the page in the same way (`page.title` for example). Content will automatically be loaded in the correct language based on the current visitors language.\n\n### HTML changes based on language\n\nTo make a html change specific for the current visitor's language code.\n\n```\n\n\n    {{ if {site.current_lang} == 'es' }}\n    Hola!\n    {{ else }}\n    Hello!\n    {{ end-if }}\n\n\n```\n","category":"guides","service":"webengine"},{"name":"Autogenerated Fields","url":"/webengine/guides/web-engine/introduction-to-parsley/autogenerated-fields","objectId":"-Lb4S9b6mAvqZSCaueh8","item":[],"content":"---\ndescription: >-\n  New instances come with a set of default fields for your convenience. Learn\n  how to use these fields for global information, SEO settings, and other\n  important information.\n---\n\n# Autogenerated Fields\n\n### Overview\n\nWhen you create an instance and open the content manager it will load mostly as a blank canvas (unless you load a pre-generated blueprint) with a few preset fields.\n\n### Globals\n\nGlobals (formerly Content Clippings) is a Content Model designed to store content not assigned to any one page or other content entry. Often these content pieces are used site wide or control settings and default behavior.\n\nWhen an instance is initially created, you will land in the Content dashboard. Here you'll be able to navigate through the autogenerated sets and fields. Under Headless, you'll find Globals. Globals is an autogenerated data set with fields intended to be used globally throughout a property. Globals comes default with three fields which are shown in the table below. These fields can be deactivated, renamed, reordered, or otherwise edited via the Schema section. They are not required.\n\n| Display Name | Reference Name | Field Type |\n| ------------ | -------------- | ---------- |\n| Site Name    | site\\_name     | text       |\n| Site Logo    | logo           | image      |\n| Footer Text  | footer\\_text   | text       |\n\n### Referencing in Parsley\n\nTo reference a field in Globals use `{{ globals.field_name }}` where `field_name` is replaced with the reference name to the field you want to access.\n\n### Pages\n\nInstances will autogenerate a Homepage. This is a Single Page component in the Content Structure. It can also be edited or removed under the Schema section.\\\n**Note:** To remove a homepage, another page must first be assigned as the new homepage before it can be deleted.\n\nThe default fields for Homepage are as follows:\n\n| Display Name  | Reference Name | Field Type |\n| ------------- | -------------- | ---------- |\n| Lead in Title | site\\_name     | text       |\n| Intro Text    | intro\\_text    | wysiwyg    |\n| Main Image    | main\\_image    | image      |\n\n### Page Settings\n\nAll pages (including page groups) are loaded with editable Meta and SEO settings as described in [Parsley Page Call](https://github.com/zesty-io/docs/wiki/Parsley-Page-Call). The entries for these settings can be edited in the Content section within the page itself by clicking the gray Open Settings button.\n\n### ZUID\n\nZUIDs are autogenerated unique identifier strings for all content set entries in Zesty.io including Pages, Page Groups and Data Sets. As described in [Parsley Content Calls](https://github.com/zesty-io/docs/wiki/Parsley-Content-Calls) where content sets are created on tables with each field as a column and each entry as a row, the ZUID is created for each row.\n\nTo call the ZUID of a page while editing that page's view in the Editor, you can use the following code snippet:\n\n```\n{{ page.zuid }}\n```\n\nTo call the ZUID of a collection, you can use the following code snippet:\n\n```\n{{ collection.first().set_zuid }}\n```\n\nRelationships in Zesty.io are connected by their ZUID.\n","category":"guides","service":"webengine"},{"name":"Common Parsley Errors","url":"/webengine/guides/web-engine/introduction-to-parsley/common-parsley-errors","objectId":"-LrKFwG44SSWs5D62HlQ","item":[],"content":"---\ndescription: >-\n  Find a list of common Parsley errors below to help you troubleshoot your\n  error.\n---\n\n# Common Parsley Errors\n\n## Working with Errors\n\nErrors are designed to help the developer write proper Parsley to achieve consistent results. Errors are  only outputted in stage/preview rendering of Web Engine. Production/live WebEngine urls do not output errors.&#x20;\n\n**Errors can be suppressed in stage/preview in 3 ways:**\n\n1. **! Ignore:** Suppress errors on individual calls by prepending it with a bang (`!`) like so `{{!this.asdasdsad}}`.  This is especially useful when using the loader or similar files for checking content model fields. Another common technique is using an if-conditional:  `{{if {!this.myfield} }} ...code... {{end-if}}` to check for a field. Using a bang in such if-conditionals allows you to globally check for null fields without triggering an error.&#x20;\n2.  **Bypass:** Ignore all errors on a page for a single page load by appending the query parameter `_bypassError` to the end of any URL in stage/preview Web Engine\n\n    For example:`hash-dev.preview.zestyio.com/?_bypassError=true`.&#x20;\n3. **Instance Settings:** In the Zesty.io manager navigate to you instance's Settings section, and then select Developer from the right-hand sidebar. Look for a setting called \"Use Parsley Debugger\" and select it, then save to ignore all errors.\n\n## Common Error List\n\n{% hint style=\"warning\" %}\n### If you do not see your error here please report it to us at [chat.zesty.io](http://chat.zesty.io/)\n{% endhint %}\n\n### **Invalid numeric literal**\n\n### **Syntax error, unexpected \\***\n\nThis error results from missing quotes around a string or missing curly brackets in an if-conditional. Resolve it by adding quotes around the string and ensuring the comparative operator is double equal sign (`==`) and add missing curly brackets around inner conditionals; for example `{{ if this.field }}` becomes `{{ if {this.field} }}`.\n\n### **Syntax error, unexpected /**\n\nThis results from empty values in a Parsley `Math()` statement. Resolve this by ensuring that there are values around your operators. For example `Math( / 100 * 2)` becomes `Math( 200 / 100 * 2)`.\n\n### Syntax Error, Unexpected '{'\n\nCommonly refers to a Parsley statement that is not properly closed. Look for missing closing brackets `}` or `}}` to resolve the error.\n\n### The field \\* __ does not exist _\\*_ on the content model\n\nA field does not exist on specific model. This results from an unidentified field in the following calls `{{ this.something }}` and `{{ if {this.something} }}`\n\n### The content model \\* cannot be found.&#x20;\n\nThis error results from a missing or mis-named content model. Resolve this error by navigating to your instance's Schema section and ensuring that its reference name is correct and creating it if it doesn't exist.\n\n### Unknown or ambiguous field \\* in \\* on the \\* content model.\n\nOften results from calling a field in an Each Loop without scope properly declared.\n\n### **Your filter statement is missing opening or closing ' ' (quotes for strings) or {} (curly brackets for parsley references)**\n\n'Filter statements' refer to statements using the following calls: `.filter()`, `.first()`, and `.last()`. To resolve this error add quotes around strings, for example `{ page.parent_zuid }` becomes `'{ page.parent_zuid }'`; if single brackets are missing, add them. For example `page.parent_zuid` becomes `{ page.parent_zuid }`.\n\n### zuid is ambiguous needs to be qualified as z.zuid\n\nResults from a malformed filter call. `filter(zuid = '{...}')` **** call needs to be qualified as  with z.zuid `filter(z.zuid = '{...}')`\n","category":"guides","service":"webengine"},{"name":"Each Loop","url":"/webengine/guides/web-engine/introduction-to-parsley/each-loop-deep-dive","objectId":"-Lar8tU4FrJg9B_Bgr8I","item":[],"content":"---\ndescription: >-\n  Learn how to iterate through Headless and Group with View content models with\n  a Parsley Each Loop.\n---\n\n# Each Loop\n\n### Each Loop Basics\n\nDevelopers can iterate over a collection in Parsley using the `{{each}}` expression.&#x20;\n\n_If you're looking for information on how to loop through multiple images in a single field refer to the_ [_Image Modifiers article_](https://zesty.org/services/web-engine/introduction-to-parsley/image-modifiers#looping-through-multiple-images-in-a-media-field)_._&#x20;\n\n#### Simple Iteration\n\nOne of the most basic examples of iteration is looping over a Zesty.io data set. This example shows a list of product names being generated from a data set named Products. [Work with a live example](https://parsley.zesty.io/looping-and-each-statements/).\n\n```\n<ul class=\"product-list\">  \n{{ each products as product }}\n    <li class=\"product\">{{ product.name }}</li>\n{{ end-each }}\n</ul>\n```\n\n#### Limit\n\nWhen iterating a collection you can limit the number of iterations with `limit`. This example shows how to retrieve only the 5 latest blog posts from a content set called Posts.\n\n```\n{{ each posts as post limit 5 }}\n    <article>\n        <h1>{{ post.title }}</h1>\n        <p>{{ post.description }}</p>\n        <a hreft=\"{{ truepath(post.zid) }}\">Read More</a>\n    </article>\n{{ end-each }}\n```\n\n#### Sorting\n\nYou can sort your entries by a string or integer value in which case it will sort alphabetically ascending (A-Z or 0-9) which is coded as`asc`, by default. To sort in descending order you must specify descending (Z-A or 9-0) which is coded as`desc` .\n\nExample Code\n\n```\n// Alphabetical Sort\n{{ each members as member sort by name }}\n    <aside>\n        <h1>{{ member.name }}</h1>\n        <p>{{ member.bio }}</p>\n    </aside>\n{{ end-each }}\n\n// Numerical Descending Sort\n{{ each posts as post sort by date DESC }}\n    <a href=\"truepath({{post.zid}})\">{{ post.title }}</a>\n\nWhen sorting by multiple columns only the first sort parameter requires the dot notation. All other parameters can be comma separated values.\n\n// Sorting by Multiple Columns\n{{ each set as var sort by var.field_1, field_2, field_3 desc }}\n{{ end-each }}\n```\n\n#### Returning unique items with `group` &#x20;\n\nAn each loop can output a unique list of items by grouping them based on a single [field](https://zesty.org/services/manager-ui/schema/fields#table-of-field-types) using the keyword `group`. In other words, using `group` will return items based on how many unique items are listed in a field. \\\nFor example, if you had a list of products, but only wanted to print out items with unique barcodes, you could group your products by barcode, shown in the example below. If there are duplicates, only the most recent entry will be outputted.\n\n```\n{{ each products as product_group group group barcode }}\n...loop content...\n{{ end-each }}\n```\n\n#### Comparing similarity with `like`\n\nAn each loop can use the comparison `like` to find similar items. The code below shows an example of the syntax being used to search through a content set called Events where the event's zip code that matches a get variable in the URL. For example if your URL is `http://mysite.com/location-search/?zip_search=92101` the `get_var` is named `zip_search` and its value is `92101`.\n\n```\n{{ each events as event where zip LIKE '{get_var.zip_search}%' }}    \n    {{ event.title }}<br>{{ event.zip }}\n{{ end-each }}\n```\n\n#### Using `where` to your results\n\nThe `where` statement in the each loop essentially helps you filter the data you're looking through to target the exact pieces of data that you're looking to return. The following example shows how to use a `where` statement to narrow down your results to a 3 month date range. The below code is looping through a content set called Events and looking for items where the event's date is greater than now at an interval of 3 months.\n\n```\n{{ each events as event WHERE date > DATE_ADD(NOW(),INTERVAL -3 MONTH) ORDER BY date ASC LIMIT 0,4 }}\n\n    <h1>{{ event.title }}</h1>\n    <p>{{ event.date }}</p>\n\n{{ end-each }}\n```\n\n### Advanced Techniques\n\nLet's take a look at specific each loop iterations.\n\n#### Setup\n\nYou can think of an each statement as being made up of 4 sections. These are the: 1. declaration 2. where 3. sort 4. limit The declaration comes first but the other three sections can be in any order. However, for the sake of continuity we recommend ordering those sections as shown in the above list. The \"where\" is by far the most nuanced and will be what we focus most of this article on. First we’ll knock out the other three sections and then come back to the \"where\" filter.\n\nHere is an example of an each loop with some more complex items. Content in parentheses is placeholder content.\n\n```\n{{ each (set_refrence_name) as (variable) where (field) = (value) and (other_field) != ‘{(page.field)}’ or (field) like “%(value)%” sort by (sort) desc limit (number to skip),(number to show) }}\nloop content...\n{{ end-each }}\n```\n\n#### Declaration\n\nThe declaration always comes first and has the least complexity. It will always be \"each reference\\_name as variable\" The reference name must match a page group or data set reference name of an existing set on that Zesty.io instance. The variable must be a string with no spaces or special characters.\n\n```\n{{ each articles as art }}\nloop content...\n{{ end-each }}\n```\n\n#### Sort\n\nThe sort section is written as “sort by variable.field asc/desc” where asc or desc represent ascending or descending. Ascending is assumed if no direction is specified. As a warning, if you reference a field that doesn’t exist to sort by, the page will break. Please note that if you want to sort by more than one field, only the first field requires the form \"variable.field\", subsequent fields can be directly referenced by their name.\n\n```\n{{ each articles as art sort by sort_order, date DESC }}\nloop content...\n{{ end-each }}\n```\n\n#### Limit\n\nLimit is written as “limit 4” or “limit 2,10”. If limit is written with a single number that’s the total number of items that will show. If limit is written with two numbers comma separated, the first number is how many entries to skip and the second number is how many entries to run through the loop. Another way to think about this is “limit 4” is the same thing as “limit 0,4” - either way would show you 4 entries, beginning with the first one.\n\n```\n{{ each articles as art limit 10 }}\nloop content...\n{{ end-each }}\n```\n\n#### “where” basics\n\nThe where is written as “where something compared to something” and if that condition is true the loop will execute. One of the most common uses would be checking if entries belong on a category page, which might look something like this:\n\n```markup\n{{ each articles as art where parent_zuid = '{page.zuid}' }}\nloop content...\n{{ end-each }}\n```\n\nThis loop would execute if the article's parent page was set to the current page being viewed.\n\n#### The Where - Comparison Types\n\nThere are several comparison values you can use to generate the each loop with the results you need. They are =, !=, >, >=, <, <=, and \"like\".\n\n**Where - and and or**\n\nYou can set up multiple comparisons on a single each loop by separating them with “and” or “or” or both. The following example is looping through a content set called Events. It's looping through featured events and looking for today's events or future events by comparing today's date against the event's date in the content set. One thing to note is that you can’t use the variable.field notation for fields after an \"and\" or an \"or,\" you just reference the field name directly. The only exceptions to this are the Zesty.io auto-included data like “zuid” and \"parent\\_zuid\" which must be referenced as “z.zuid” after an “and” or an “or” modifier.\n\n```\n{{ each events as eve where date > {site.date()} and featured = 1 or date = {site.date} }}\nloop content...\n{{ end-each }}\n```\n\n**Where - find\\_in\\_set()**\n\nOne of the more complex items you can write in an each loop is using a find\\_in\\_set filter. This is used almost exclusively with the one-to-many field type. The syntax is “where find\\_in\\_set(target\\_number, set\\_of\\_numbers)” For example a blog article might have many tags associated with it. On the blog page, the loop would look like this:\n\n```\n{{ each tags as tag where find_in_set(z.zuid, ‘{page.tags}’) }}\nloop content...\n{{ end-each }}\n```\n\nThis is how you would write the loop on the tags page to find related articles.\n\n####\n\n```\n\n\n{{ each articles as art where find_in_set('{page.zuid}', tags ) }}\nloop content...\n{{ end-each }}\n\n```\n\n#### Where - Syntax notes\n\nWhen referencing any external variable, including references to parsley variables, { page.field } variables, { site.item } variables, or variables established in surrounding each loops, use single curly brackets around them. If you are expecting a string, you must wrap the variable in single quotes. Additionally the syntax for multiple checks in a where statement is use “variable.field\\_name” for the first check and just “field\\_name” for additional clauses. The only exceptions to this are the Zesty.io auto-included data like “zuid” use “z.zuid” for additional clauses.\n\n```\n{{ each tags as tag where tag.featured = 1 and find_in_set(z.zuid, '{page.tags}' ) }}\nloop content...\n{{ end-each }}\n```\n\n### Eaching through Media\n\nWhen you have a content item that has a media field that has more than one media reference, you can loop through them with an each loop like so. In this example, our media reference is \\{{this.multiple\\_images\\}}\n\n```\n{{ each media.{this.multiple_images} as image}}\n    <img alt=\"{{image._length}} {{image._num}}\" src=\"{{ image.image.getImage(960,460,crop) }}\">\n{{ end-each }}\n```\n","category":"guides","service":"webengine"},{"name":"If Conditionals","url":"/webengine/guides/web-engine/introduction-to-parsley/if-conditionals","objectId":"-Lb4Sr_emxzTU5oJek3c","item":[],"content":"---\ndescription: Learn the fundamentals on how to write if statements in Parsley.\n---\n\n# If Conditionals\n\nParsley provides `{{if}}` conditional statements for logic flow.\n\n### Checking Equality\n\nWhen writing if conditionals you can check equality with a single equals character; `==`. Equality can also be inverted with a bang; `!=`.\n\nIf you're evaluating another Parsley expression including [autogenerated fields](https://app.gitbook.com/zesty-io/docs/wiki/Zesty-Autogenerated-Fields) inside of an if conditional use single curly brackets to wrap your expression. If you are expecting this variable to be a string (this includes ZUIDs) be sure to wrap it in quotes.\n\n```markup\n(** Inner Parsley expression **)\n{{ if {this.title} == 'Hello, World' }}\n    It works!\n{{end-if}}\n\n\n(** Inverted equality **)\n{{if {item.zuid} != {this.item_page} }}\n   <a href=\"/\" class=\"home\"><img src=\"...\" /></a>\n{{end-if}}\n\n(** checking if a value exists on a content item **)\n{{if {this.image} }}\n<img src=\"{{this.image.getImage()}}\" alt=\"{{this.image_text}}\">\n{{end-if}}\n\n```\n\n### If / Else\n\nWhen writing an if conditional you can also specify an else condition.\n\n```\n{{ if {page.path_part} == 'special-page' }}\n    This is the special page!\n{{else}}\n    This is not the special page!\n{{end-if}}\n```\n\n### If / Else If / Else\n\nYou may have multiple conditionals using else if\n\n```\n{{ if {page.path_part} == 'special-page' }}\n    This is the special page!\n{{else if {page.path_path} == 'another-path' }}\n    This is another page {{include another-snippet}}\n{{else}}\n    This is neither pages :(\n{{end-if}}\n```\n","category":"guides","service":"webengine"},{"name":"Image Modifiers","url":"/webengine/guides/web-engine/introduction-to-parsley/image-modifiers","objectId":"-LbZ5SRmmz6l6apHfjoS","item":[],"content":"---\ndescription: >-\n  Learn how to use Parsley image modifiers including resizing, and accessing\n  image attributes such as image file name, title, and more.\n---\n\n# Image Modifiers\n\n### Overview\n\nAll of the following Parsley calls represent a way to modify images. When the modification is first done the media service will return a temporary token URL which will resolve to the new image once the modification is complete. Afterwards the image will have its final static URL. This ensures page requests continue to resolve while images are being generated.\n\n### Looping through multiple images in a Media field\n\nUsers can upload multiple images to a single Media field as shown in the example below.\n\n![Multiple images in a single Media field.](../../../../.gitbook/assets/multiple-images-in-field-example.png)\n\n\\\nTo access these images you'll need to loop through them with the following code:&#x20;\n\n```\n{{each media.{this.images} as media }}\n\t<img src=\"{{media.image.getImage()}}\"/>\n{{end-each}}\n```\n\nIn this example, `images` is the field's reference name.\n\n{% hint style=\"info\" %}\n&#x20;**** `media.`is a keyword for defining the scope of the call. It is not a variable name or reference to a model. \\\n\\\nReplace the`{this.images}`code with a reference to your model's specific field.   \\\n&#x20;\\\nThe order of the images is determined by the order that they appear in in the content model.&#x20;\n{% endhint %}\n\nWhen wrapping this special each loop with an [if-conditional](https://zesty.org/services/web-engine/introduction-to-parsley/if-conditionals) be sure to use the media field's reference name to in the if-conditional. For example, if the reference name for your field is `images`  and you're checking for an empty field then your if-conditional will look like this:&#x20;\n\n`{{ if {this.images} != '' }}`\n\n### .getImage(width, height, type)\n\nFunction takes a width, height, and an optional type (fit or crop) parameter and returns a URL of the resampled image. There are many ways to utilize this function. Fit is the default type and does not need to be explicitly declared. Crop type requires 2 parameters and explicit declaration. The list below shows examples of these calls. Learn how crop and fit work with [this video](https://www.youtube.com/watch?v=gin0sTwN6U4\\&t=).\n\n```\n// .getImage(W, H, fit or crop)\n<img src=\"{{ thispage.photo.getImage() }}\" />\n<img src=\"{{ thispage.photo.getImage(100) }}\" />\n<img src=\"{{ thispage.photo.getImage(,100,fit) }}\" /> \n<img src=\"{{ thispage.photo.getImage(100,,fit) }}\" />\n<img src=\"{{ thispage.photo.getImage(100,100,fit) }}\" />\n<img src=\"{{ thispage.photo.getImage(100,100,crop) }}\" />\n```\n\n### .getImageFileName()\n\nWhen called on an image reference, returns the image file name.\n\n```\n{{ page.image.getImageFileName() }}\n```\n\n### .getImageTitle()\n\nWhen called on an image reference, returns the image title.\n\n```\n{{ page.image.getImageTitle() }}\n```\n\n### .getMediaURL()\n\nFunction does not take parameters and returns the original URL to that file. This is how to access files stored in media that are not images, such as PDFs and MP4s. You can also use this call to access the original file of an image that has not been optimized or altered by Zesty.io.\n\n```\n<a href=\"{{ page.download_file.getMediaURL() }}\" >Download</a>\n// <a href=\"https://domain.com/file.pdf\" >Download</a>\n```\n\n### .gravatar(email)\n\nFunction takes a user's email and requests an image from the Gravatar API.\n\n```\n<img src=\"{{ thispage.author_email.gravatar() }}\" />\n// <img src=\"http://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\" />\n```\n\n### Responsive Images with `srcset`\n\nIn addition to Parsley you can use `srcset` to create responsive images. Learn more about `srcset` with [this MDN article](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia\\_and\\_embedding/Responsive\\_images).&#x20;\n\nThis is an example of how `srcset` can be used with Parsley:\n\n```\n<picture>\n\t\t\t<source media=\"(max-width: 700px)\" sizes=\"(max-width: 500px) 50vw, 10vw\"\n\t\t\tsrcset=\"{{this.hero_image_mobile.getImage()}} 138w, {{this.hero_image_mobile.getImage()}} 138w\">\n\t\t\t\n\t\t\t<source media=\"(max-width: 1400px)\" sizes=\"(max-width: 1000px) 100vw, 50vw\"\n\t\t\tsrcset=\"{{this.hero_image.getImage()}} 416w, {{this.hero_image.getImage()}} 416w\">\n\t\t\t\n\t\t\t<img src=\"{{this.hero_image.getImage()}}\" alt=\"Hero\">\n</picture>\n```\n","category":"guides","service":"webengine"},{"name":"Include Syntax","url":"/webengine/guides/web-engine/introduction-to-parsley/include","objectId":"-LbZ6CkXe4K0j_nbp7eh","item":[],"content":"---\ndescription: >-\n  Learn more about how use Parsley's {{ include }} syntax which allows you\n  insert a snippet within the view you are in.\n---\n\n# Include Syntax\n\n``[`{{ include }}`](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#include) allows you to insert snippets and endpoints within the [view](https://zesty.org/services/web-engine/view-templating#what-are-views) you are in.\n\n## Globally Available Views, Snippets, and Endpoints\n\nWhen you [create a snippet](https://zesty.org/guides/using-snippets#creating-snippets) in the [Web IDE](https://zesty.org/services/manager-ui/editor), whether it be an HTML snippet, HTML Ajax, or JSON Ajax, these snippets are available globally. To insert this snippet, you'll need to use the `{{ include }}` Parsley call and the name of your snippet.\n\n```\n{{ include my-snippet }}\n```\n\nWhile the `{{ include }}` prompt is commonly used for [snippets](https://zesty.org/glossary#snippet), users can also use the `{{ include }}` prompt for including view files within one another. For example, if you have a view with a [Reference Name](https://zesty.org/glossary#parsley-reference-name) of _contact\\_us_ the `{{ include }}` prompt would take the form of `{{ include contact_us }}`.\n\n```\n{{ include reference_name }}\n```\n\nIf the piece of code that's being included is an endpoint be sure to use the full name of the endpoint.\n\n```\n{{ include  /my/file.html }}\n```\n\n### Common Usage\n\nOne common use of snippets is to create a globally available header and footer. In the example below we have two separate HTML snippets: one called **header** and the other called **footer**. We want these to load in every page of our instance therefore we add them to the Loader file. In the Loader file, we add calls for the header and footer snippet calls as follows:\n\n```\n{{ include header }]\n{{ current_view }}\n{{ include footer }}\n```\n\nGet a full walk-through for how to do this with the **Using Snippets** guide that's linked below.\n\n{% content-ref url=\"../../../../instances/guides/how-tos/using-snippets.md\" %}\n[using-snippets.md](../../../../instances/guides/how-tos/using-snippets.md)\n{% endcontent-ref %}\n\n### Working with Remote Files\n\n`{{ include }}` can also pull in text from a remote file. The file must be accessible _without_ authentication. There is a 3 second timeout for every request, if your remote file takes longer than 3 seconds to return, you will get a blank string. `{{ include }}` will grab the remote string and parse it with Parsley. You can use Parsley code in your remote text as well.\n\n```\n{{ include https://parsley.zesty.io/test/remoteinclude.parsley }}\n```\n\n### Using Dynamic Values in Includes\n\nIncludes make use dynamic reference to globals, settings, query parameters, path parts, post values, and `this` content values. The scope is limited to just those values because include are processes before parsley starts its rendering process.\n\n{% hint style=\"warning\" %}\n**Note:** Includes are part of Parsley, but are processed before Parsley starts to render, therefore developers are limited to the scope of the values listed below.\n{% endhint %}\n\n* **Settings** are accessed like `{settings.general.site_protocol}`\n* **Content** item values are accessed like `{this.my_title}`\n* **Globals** are accessed like `{globals.site_name}`\n* **Query Params** are accessed like **** `{query_param.key}` or `{get_var.key}`\n* **Path Parts** accessed like **** `{path_part.0}`  e.g. `/first/part/  {path_part.0} returns 'first'`\n* **Multiple** like this `\"my page is {this.title} from {globals.site_name}\"`\n\n```\n{{ include https://parsley.zesty.io/testers/hello/?testMe={get_var.testParam}&testPathPart={path_part.0} }}\n{{ include {get_var.testParam} }}\n```\n","category":"guides","service":"webengine"},{"name":"Access a Content Item (this)","url":"/webengine/guides/web-engine/introduction-to-parsley/parsley-page-call","objectId":"-Lave3Q__kcAGqQtTYN2","item":[],"content":"---\ndescription: >-\n  The Parsley this call is used to reference content which resolves from\n  requesting a specific URL relative to a content item's meta url.\n---\n\n# Access a Content Item (this)\n\n### Overview\n\nA Parsley Standard call uses dot notation to access a specific piece of content stored in the Zesty.io Instance database.\n\nIf we think of all the content entered into a Zesty.io instance as living on tables where each content set is a table, each field is a column, and each content entry is a row, then a standard Parsley call provides instructions for which table, which row, and which column to go to to grab a specific content item.\n\nFor example, consider we have a Content Collection called `articles` with a field called `title`. Every time we add an article to this Collection, we add a Row to the table were the title of the article is stored in the `title` column. To access the title of the most recently added article we can use the parsley call `{{ articles.last().title }}` which is effectively describing the `table.row.column` where the content we want can be found. The table is the `articles` table, the row is the last row, and the column is the `title` column.\n\nOne of the most common Parsley calls is `{{ this.field_name }}`. This call will use the content stored for the specified field for the current item which the url resolves for. For example, we'll say I have a `homepage` collection which has a `welcome_title` field, and I store the content \"Welcome to my website!\" in that field. I can use this Parsley:\n\n```\n<h1>{{ this.welcome_title }}</h1>\n\nto generate this output:\n\n<h1>Welcome to my website!</h1>\n```\n\n### Auto-created This Fields\n\nEvery content item with a view that is created in Zesty.io has default fields for settings and SEO. All of these fields are available for developer use and include:\n\n* `zuid` - the unique identifier for the content item.\n* `getUrl` - the relative URL path to the content item's meta url.\n* `path_part` - the portion of the URL path specific to the content item.\n* `seo_link_title` - the title used in Parsley Auto-navigation calls.\n* `seo_meta_title` - the title used as the title in the head.\n* `seo_meta_description` - used for the meta description in the head.\n* `seo_meta_keywords` - not used by default\n* `set_zuid` - the unique identifier for the content model which the resolved content item belongs to.\n* `parent_zuid` - the unique identifier of the immediate parent content item, it only returns if the current content item is a child of another.\n* `updated_at` - returns the latest version's save date.&#x20;\n\n### How it works\n\ncomment: <> (In the case of `{{ this.field_name }}` we are still using the table, row, and column instructions we described in the Parsley Content Calls overview article, but we get to use a short cut.) When `{{ this.field_name }}` is rendered on a website, Zesty.io is able to look up which Content Model and which Entry is being referenced based on the URL, then uses which ever field is requested to get the correct data. The 'this.' specifies both the table the current content model, the row as the content entry being viewed, while the field referenced after the `this` is the column.\n","category":"guides","service":"webengine"},{"name":"Instance Functions","url":"/webengine/guides/web-engine/introduction-to-parsley/parsley-instance-functions","objectId":"-M9P8ROp4CgA8uhwT12t","item":[],"content":"---\ndescription: >-\n  Learn how to use all of Parsley's instance functions to access instance\n  variables.\n---\n\n# Instance Functions\n\n## instance.cdn\n\nAccess the full url to the Satellite™ CDN.\n\n```\n{{ instance.cdn }}\n```\n\n## instance.date()\n\nAccess the date from the Satellite. [Additional formatting options](https://developer.zesty.io/parsley-templating/dates/).\n\n{% hint style=\"info\" %}\nPlease note that this Parsley call outputs the current date in GMT time zone.\n{% endhint %}\n\n```\n{{ instance.date() }}\n```\n\n## instance.host\\_env\n\nShows the instance's webengine URL. This only works in preview - not on live.\n\n```\n{{ instance.host_env }}\n```\n\n## instance.host\\_live\n\nShows you the instance's first registered domain. This only works in preview - not on live.\n\n```\n{{ instance.host_live }}\n```\n\n## instance.host\\_preview (or instance.host\\_relative)\n\nShows an instance's preview URL. This only works in preview - not on live.\n\n```\n{{ instance.host_preview }}\n{{ instance.host_relative }}\n```\n\n## instance.host\\_protocol\n\nShows the instance's protocol based on its settings. This only works on preview - not on live.\n\n```\n{{ instance.host_protocol }}\n```\n\n## instance.searchformatted(search\\_term)\n\nSearch a Satellite's meta titles and descriptions.\n\nReturns search results in this format:\n\n```\n<ol class=\"search-formatted\">\n    <li onclick=\"window.location='/menu-sweet/'\">\n        <a href=\"/menu-sweet/\">Sweet Menu</a>Meta Page description\n    </li>\n</ol>\n```\n\nParsley code used to return the the search results:\n\n```\n{{ instance.searchformatted(my search term) }}\n```\n\n## instance.domain\n\nIf domain is set for the instance, this call will return it.\n\n```\n{{ instance.domain }}\n```\n\n## instance.lorem(number)\n\nGenerate lorem ipsum placeholder text on the fly.\n\n```\n{{ instance.lorem(200) }}\n```\n\n## instance.sendemail(subject, body, to\\_address)\n\nSend an email with a Parsley call. This **requires a verified email** in settings > contact form. Use ,, the ascii code for a comma in place of commas in the subject and body arguments.\n\n```\n{{instance.sendemail(hello stuaaaaaart,You are my biggest&#44; bestest fan, stuart@zesty.io)}}\n```\n\n## instance.subnav()\n\nGenerate a formatted Sub Navigation.\n\n```\n<ul id=\"sub-navigation\" class=\"sub-navigation\">\n    <li>\n        <a class=\"sub-navigation categories\" href=\"/about/categories/\" title=\"The Categories\">The Categories</a>\n    </li>\n</ul>\n```\n\nshow two sub levels and the auto generated header\n\n```\n<h5 class=\"sub-navigationHeader\"><a href=\"/about/\" title=\"About\" class=\" at\">About</a></h5> \n<ul id=\"sub-navigation\" class=\"sub-navigation\">\n    <li>\n        <a class=\"sub-navigation categories\" href=\"/about/categories/\" title=\"The Categories\">The Categories</a>\n    </li>\n</ul>\n```\n\n```\n{{ instance.subnav(false) }} \n\n{{ instance.subnav(true 2) }}\n```\n\n## instance.truepath(ZUID)\n\nTruepath takes in a UUID-like identifier, called a \"ZUID\", which can be located in the the Zesty.io Manager url. Truepath returns a perfect url path to the znode content id. Use true path to ensure links never break.\n\n```\n{{ instance.truepath(501) }}\n```\n","category":"guides","service":"webengine"},{"name":"Variables","url":"/webengine/guides/web-engine/introduction-to-parsley/variables","objectId":"-Lb4Rs8esd-di9SnNdkG","item":[],"content":"---\ndescription: >-\n  Parsley Variables are used to store and access data. You can use variables\n  stored for a single page-load, session variables, cookies, POST variables, and\n  GET variables.\n---\n\n# Variables\n\n## Overview\n\nVariables are a way to store information consistently so that you can access the stored information either further on in the code, or at another time. Variables are also useful for shortening frequently used long pieces of code or eliminating repetitive pieces of code. If this doesn't make sense yet, hopefully the examples will help.\n\n_**Accessing cookies via Parsley does not work for pages statically cached, you'll need to use javascript for that. Our CDN serves a statically processed page, while our Preview mode renders at the server. Parsley is server side, so it only runs in Preview and not in production for statically cached CDN pages.**_\n\nThere are three types of Parsley variables: standard variables, session variables, and cookies. The only difference between them is the length of time the information stays stored with the variable.\n\n## Standard Variables\n\nStandard variables are only stored for the page load. As soon as one clicks to a new page or reloads the site, the information is stored in that variable is forgotten. Below is an example of how to set and call a standard Parsley variable:\n\n{% embed url=\"https://gist.github.com/dustinhorning/7dbf816617611df407e3\" %}\n\nYou can see we set the variable, $myVariable to the phrase \"Hello World\" and then called the variable in an h1 tag. The resulting HTML would look like this:\n\n{% embed url=\"https://gist.github.com/dustinhorning/50f98ca5406796b762db\" %}\n\nThe only HTML that prints out is the H1 tag with whatever is stored in the variable.\n\nIn this next example, we'll show you a common implementation that requires the use of a standard variable. We will create a dynamic number of columns, one for each item in a content set.\n\nWe are going to write two identical Parsley each loops. In the first loop we will set a variable equal to the index. (If you have questions about each loops or index, review those sections first). The second loop will be the information that we would want to show for each content set entry. The initial each loop will run through all the items and then reset the variable to the index each time. The last item in the content set will set the variable equal to the total number of items in the content set. Once we know the total number of items, we can use that variable to set the column class denominator in the second each loop. See the code below:\n\n{% embed url=\"https://gist.github.com/dustinhorning/1e94ba42b8b7488bac27\" %}\n\nYou can see in the code we **set** the variable `$count` on line 2 and **call** it on line 7. The result is that $count will be equal to the number of \"articles\" and the row will have a number of columns equal to the number of articles. Each article will always take up one column, no matter if articles are added or deleted.\n\nFor example if there were three articles, `$count` would be set to 3 and each article would be one-third of the row. If a fourth article was added or one was removed, the code would automatically update to adjust to keep each article the same while filling up the row.\n\n## Session Variables\n\nSession variables last as long as the browser session. To put it another way, as long as the browser window stays open and the device keeps internet access. You can set and call session variables the same as standard variables. The only difference is that standard variables require an underscore after the dollar sign. See below:\n\n{% embed url=\"https://gist.github.com/dustinhorning/ba300a7bfae206fc4ae0\" %}\n\nSame as before, we set the variable `$_mySessionVar` to the phrase \"Hello Globe\" and then call the variable in an H1 tag. The resulting HTML would look like this:\n\n{% embed url=\"https://gist.github.com/dustinhorning/98ee637264c64bc71eed\" %}\n\nThe only HTML that prints out is the H1 with whatever is stored in the variable.\n\nSession variables can be particularly useful when you want something to only show once per visit to an instance. In the following example we use a Parsley if-statement to check if a session variable is set. If it's not yet set, we know that this is the first time a user has loaded this page in this session. So we add our code for what we want to happen on the first load and then set our session variable so the code doesn't run again during this session.\n\n{% embed url=\"https://gist.github.com/dustinhorning/621694b12397f7c5acff\" %}\n\nSince the session variable is set to `1` within the if-statement we know the script will only load the first time for each session. For each time after that, the session variable will fail the if-check and will not add the script.\n\n## Cookie Variables\n\n{% hint style=\"warning\" %}\nParsley access to cookies should not be used on statically cached pages. Note cookies should be used carefully and should not expose sensitive information.\n{% endhint %}\n\nCookie variables are almost the same as session variables except that they last for 30 days. These work by storing information to the browser of the visit. So if the visitor uses a different device or a different browser or manually clears their cookies, then all the Parsley cookies would be reset.\n\nSimilar to standard variables and session variables, Parsley cookies are set and called the same way, however the syntax is slightly different. To set a cookie we use the `@` symbol instead of a dollar sign. See below:\n\n{% embed url=\"https://gist.github.com/dustinhorning/e56f37f8d2a1f5c0e894\" %}\n\nAnd again, we get the same H1 result:\n\n{% embed url=\"https://gist.github.com/dustinhorning/ea0c1d6bd1f7e66a6ad5\" %}\n\nCookies are most useful for sites where visitors can select preferences or use a log in system. Cookies allow the code to remember the user's selection so that the user doesn't have to enter it as often.\n\nIn the example below, we check the result of a form submission to see if a user has signed in. If a sign-in has happened we set a cookie variable equal to their user name, if not, we check to see if a cookie has already been set. If a sign-in has happened or a cookie was already set then we show a welcome message, if neither of those are true we show a sign-in form. This way, a user only has to sign in once every 30 days.\n\n* Note: In this example, we reference post variables. Post variables are variables created by a field from a submitted form with the post method. Post variables are not covered in this tutorial.&#x20;\n\n## Conclusion\n\nParsley variables are a tool for storing information we need to access later on in the page or at a later time. We can set a variable by opening a Parsley tag, using the correct variable prefix (either $, $\\_, or @) followed by the variable name, setting it equal to the information we need stored, followed by a closing Parsley tag. Each variable prefix represents a different amount of time that the variable will be stored.\n\n**Standard Variable's prefix is \"$\" and will store the data for a single page load.**\n\n**Session Variable's prefix is \"$\\_\" and will store the data until the browser session ends.**\n\n**Cookie Variable's prefix is \"@\" and will store the data for 30 days or until the browser clears the cookies.**\n\n## POST Variables\n\nPlease see an example of the syntax for Post variables below.\n\nZesty.io expects FormData which can be sent [following these docs](https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using\\_FormData\\_Objects) or using a JQuery Post.\n\n```\n<h1>{{ post_var.name }}</h1>\n```\n\n## GET Variables\n\nPlease see the syntax for Get variables below.\n\n```\n<h1>{{ get_var.name }}</h1>\n```\n","category":"guides","service":"webengine"},{"name":"Remote Integrations","url":"/webengine/guides/web-engine/introduction-to-parsley/remote-integrations","objectId":"-MBIIh3d5nrGhNci1Hc3","item":[],"content":"---\ndescription: Parsley can make web requests to remote data for server side rendering.\n---\n\n# Remote Integrations\n\n## JSON Iteration with Parsley\n\n```markup\n{{each api.json.get(https://www.zesty.io/-/gql/about.json) as obj}}\n\n<h1>{{obj.title}}</h1>\n\n{{end-each}}\n```\n\nThe above code is an example of pulling remote JSON data (this can be from any source, Zesty.io just happens to be the example). The JSON you are accessing has to be in a specific structure which is one of two options.\n\n{% hint style=\"info\" %}\nParsley will add `_index` `_length` and `_num`to each object, if you have references to those fields in your JSON object, they will be overwritten. You can use \\{{obj.num\\}}, \\{{obj.\\_index\\}} or \\{{obj.\\_length\\}} to aid in your logic. index starts at 0, num starts at 1.\n{% endhint %}\n\n{% hint style=\"warning\" %}\nNote that the \"limit\" clause in an each loop does not apply to remote endpoint iterations.\n{% endhint %}\n\n### JSON Formatting Options\n\n#### Remote JSON Format Option 1: Single Flat Object\n\n```javascript\n{\n    \"title\": \"Hello, World\"\n}\n```\n\n#### Remote JSON Format Option 2: An Array of Flat Objects\n\n```javascript\n[\n    {\"title\": \"Hello, World\"},\n    {\"title\": \"FooBar\"}\n]\n```\n\n### Handling Errors\n\nWhen an error occurs (for example: a timeout or bad JSON formatting) the each loop will return over a single flat error object. You can handle this by first looking for an error object field name `error` or by simply ignoring it by writing a single if statement that looks for a value from your object.\n\n**Handling Errors Method 1: Check for error object**\n\n```markup\n{{each api.json.get(https://www.zesty.io/-/gql/about.json) as obj}}\n\n    {{if {obj.error} }}\n\n    (** output an error message if desired **)\n    <span style=\"color:red\">{{obj.error}}</span>\n\n    {{else}}\n\n    (** put actual presentation here)\n    <h1>{{obj.title}}</h1>\n\n    {{end-if}}\n\n{{end-each}}\n```\n\n**Handling Errors Method 2: Check for a field on your custom object**\n\n```markup\n{{each api.json.get(https://www.zesty.io/-/gql/about.json) as obj}}\n\n    {{if {obj.title} }}\n\n    <h1>{{obj.title}}</h1>\n\n    {{end-if}}\n\n\n{{end-each}}\n```\n\n{% hint style=\"warning\" %}\n**Timeout:** There is a 3 second timeout on all remote requests. If the request does not return in 3 seconds, and error will be thrown and nothing will be returned.\n{% endhint %}\n\n## Including a Remote File\n\nYou can also include a remote file for Parsley execution. This is useful for single-source templating or integrating pre-rendered javascript like React modules. Click ahead to the include documentation to learn how to _include_ a remote file into your Parsley execution.\n\n{% content-ref url=\"include.md\" %}\n[include.md](include.md)\n{% endcontent-ref %}\n\n## GroupBy (GBi) eCommerce Search\n\nGroupBy is a smart eCommerce search tool that can reference millions of rich product data points in seconds. Zesty.io integrates with GroupBy in these ways: search, product lookup, personalized navigation, and personalized product refinement lookups. The GroupBy integration into the Zesty.io's Server Side Rendering language Parsley can be used to produce statically cached, search engine rich, product pages, category pages, search pages, and home pages.\n\nThis integration requires an api from GroupBy, and three settings in Zesty. The settings are:\n\n* **\\[groupby]\\[client-key]** // (optional) unique client key\n* **\\[groupby]\\[url]**  // _api endpoint_\n* **\\[groupby]\\[collection]** _// the default groupby collection_\n\n### Working in Parsley\n\nIn Parsley each loops can be used to iterate over search, product, refinements, or navigation data from GroupBy.\n\n## Searching GroupBy (api.gbi.search)\n\nThis method allows you to run a string based search to your GroupBy API\n\n```markup\n{{each api.gbi.search(collection, area, search, limit) as result}}\n    <h1>{{result.title}}</h1>\n    <img src=\"{{result.visualVariants:0:productImage}}\" alt=\"{{result.title}} Image\">\n    <textarea>{{result._json}}</textarea>\n{{end-each}}\n```\n\n### Parameter Breakdown of api.gbi.search()\n\n* **collection:** The collection name from GroupBy _e.g. products_\n* **area:** The area name from GroupBy _e.g. Storefront_\n* **search:** Search query _e.g. Red Dress_\n* **limit**: Maximum results to return and each through _e.g. 20 (defaults to 10)_\n\n### Accessing Nested Data\n\nGroupBy results are custom tailored per each customer implementation, because of that, zesty flattens the returned object so Parsley can access it like `{{result.visualVariants:0:productImage}}`the use of the semicolons is in place of `.` , so treat it as you were accessing a JSON (javascript object notation) object.\n\n### Working with JSON output\n\nYou may output a full JSON string from the result to view the object to know paths like `{{result.visualVariants:0:productImage}}`or as a shortcut to work with dynamic javascript rendering. It is done like this:\n\n```markup\n<p>View the JSON string</p>\n<textarea>\n    {{result._json}}\n</textarea>\n\n<p>Access the object with javascript</p>\n<script>\n    let myobj = {{result._json}}; // this will auto create the javascript object\n    console.log(myobj);\n</script>\n```\n\n## Accessing a Product from GroupBy (api.gbi.product)\n\nParsley can be used to server side render product pages by accessing GroupBy. The result is search engine rich and fast loading statically cached pages.\n\n```markup\n{{each api.gbi.product(collection, area, productId) as product}}\n    <h1>{{product.title}}</h1>\n    <img src=\"{{product.visualVariants:0:productImage}}\" alt=\"{{product.title}} Image\">\n    <textarea>{{product._json}}</textarea>\n    <!-- this gets the first naviigation refinement available -->\n    <p>Refinements count: {{navitem._refinementCount}}</p>\n    <p>Refinements String: {{navitem._refinements}}</p>\n{{end-each}}\n```\n\n## Accessing a Rich Navigation from GroupBy (api.gbi.navigation)\n\n```markup\n<ul>\n{{each api.gbi.navigation(collection, area, search) as navitem}}\n    <li><strong>{{navitem.navItem}}</strong>\n    <p>Refinements count: {{navitem._refinementCount}}</p>\n    <p>Refinements String: {{navitem._refinements}}</p>\n    </li>\n{{end-each}}\n</ul>\n```\n\n## Accessing a Search with Refinements from GroupBy (api.gbi.searchWithRefinements)\n\nA very powerful feature of GroupBy is to make searches, but with relative refinements based on the product being browsed.\n\n```markup\n<ul>\n{{each api.gbi.navigation(collection, area, search, refinements, limit) as refinedSearchItem}}\n    <h1>{{refinedSearchItem.title}}</h1>\n    <img src=\"{{refinedSearchItem.visualVariants:0:productImage}}\" alt=\"{{result.title}} Image\">\n    <textarea>{{refinedSearchItem._json}}</textarea>\n{{end-each}}\n</ul>\n```\n\nThis functionality can be used in conjunction with search or product navigation output to produce results that output similar to how Amazon.com generates. Parsley conveniently generates a string that can be passed to achieve these results.\n\n```markup\n<!-- Custom Related Items Below the Product -->\n\n{{each api.gbi.navigation(products, Storefront, productID, 5) as relatedNavItem}}\n<h1>{{relatedNavItem.displayName}}</h1>\n<h2>Total Refinements: {{navitems._refinementCount}}</h2>\n<!-- this store a string for later access -->\n{{$refinements = {navitem._refinements} }}\n    <ul>\n    {{each api.gbi.searchWithRefinements(products, Storefront, ,{$refinements},10) as refined }}\n    <li>{{refined.title}}</li>\n    {{end-each}}\n    </ul>\n<hr>\n{{end-each}}\n```\n\n**How the Refinements String Works**\n\nParsley needs strings passed to it, therefore a custom string output was made to handle what is normally a JSON array of objects posted to a GroupBy endpoint. Here is an example the string needed for Zesty:\n\n`categories*1:Value:Jewelry Watches|categories*1:Value:Women|categories*1:Value:Bed Bath|categories*1:Value:Men|categories*1:Value:Fine China|categories*1:Value:Handbags Accessories|categories*1:Value:Plus Sizes|categories*1:Value:Dining Entertaining|categories*1:Value:Bath Rugs Bath Mats|categories*1:Value:Shower Curtains`\n\nIt's a delimited string. Here is how it works if you need to generate your own string. `*` represents `.`, colons `:` act like CSV, `|` are the delimiter.\n","category":"guides","service":"webengine"}],"content":"---\ndescription: This index collects all Parsley syntax and methods.\n---\n\n# Parsley Index\n\n## \\_index\n\nWhen looping through a content model with an each loop, you can use `variable_name._index` to get the current count of how many times you have run through the each loop. \\_index begins counting from 0. To start counting at 1 use `_num` instead.\n\n```\n<div class=\"row\">\n{{ each team_members as member }}\n{{ if {member._index} % 3 == 0 }} (** Checks for every third loop, can be used to end and stop rows when using fixed width columns in a grid  **)\n</div><div class=\"row\">\n{{ end-if }}\n<div class=\"column\">\n<p>{{ member.name }}</p>\n<p>{{ member._index }}</p>\n</div>\n{{ end-each }}\n</div>\n```\n\n## \\_length\n\nWhen looping through a content model with an each loop, you can call `{{ variable_name._length }}` to get the total number of times the loop will run.\n\n```\n<div class=\"article-tags\">\n{{ each article_tag as tag }}\n<p>{{ tag.name }}{{ if {tag._num} != {tag._length} }}, {{ end-if }}</p>\n{{ end-each }}\n</div>\n(** As long as the loop's num does not equal its length a comma will be appended to the list of tags **)\n```\n\n## \\_num\n\nWhen looping through a content model with an each loop, you can use `variable_name._num` to get the current count of how many times you have run through the each loop. `_num` begins counting from 1. To start counting at 0 use `_index` instead.\n\n```\n<div class=\"article-tags\">\n{{ each article_tag as tag }}\n<p>{{if {tag._num} == 1 }}This is the first item{{ end-if }}</p>\n{{ end-each }}\n</div>\n(** As long as the loop's num does not equal its length a comma will be appended to the list of tags **)\n```\n\n## activate\\_links()\n\nConverts plain text URLS into anchor tags [URL](https://github.com/zesty-io/zesty-org/tree/3418a808274fc82af3fe7dbbfeb55591b527edaf/services/web-engine/introduction-to-parsley/URL/README.md). Useful for content where text comes in with HTML stripped.\n\n```\n{{ page.textarea.activate_links() }}\n```\n\n## api.dribbble\n\n```\n{{ each api.dribbble.getShots(USER_NAME) as shot }}\n    <img src=\"{{ shot.image_teaser_url }}\" alt=\"{{ shot.title} }\" />\n{{ end-each }}\n```\n\n## breadcrumbs\n\nThe `breadcrumbs` call outputs an automated breadcrumb trail of links, listing the parent pages assigned to the current page. If there are no available links, then an empty span is outputted.\n\n```\n{{ breadcrumbs }}\n\nExample Output:\n<span itemprop=\"breadcrumb\">\n    <span class=\"crumb\"><a href=\"/blog/\">Blog</a></span> \n    <span class=\"sep\">»</span>\n    <span class=\"crumb\"><a href=\"/blog/example-category/\">Example Category</a></span>\n    <span class=\"sep\">»</span>\n    <span class=\"crumb\">Example Post</span>\n</span>\n```\n\n## clippings (see Globals)\n\n## Comments (\\*\\* **\\*\\***)\n\nUse these comments to prevent Parsley or other code from processing in HTML and Endpoint files. Anything within these comments are server side comments and will not render out to the source code.\n\n```\n(** old code  **)\n(** \n< h1>{{ page.title }}</h1>\n**)\n(** new code **)\n<h3>{{ page.new_title }}</h3>\n```\n\n## current\\_view\n\nThe `{{ current_view }}` call is a unique Zesty.io statement that will load the Page View associated with the current website url. `{{ current_view }}` is used once in the `loader` snippet. This allows a website to have consistent template elements above and below the unique aspect of each page.\n\n```\n{{ include header }}\n<div class=\"content\">\n      {{ current_view }}\n</div>\n{{ include footer }}\n```\n\n## date(format)\n\nUses the [php date](https://www.php.net/manual/en/datetime.format.php) format to create the date string shown to the user.\n\n```\n<em>{{ page.published_date.date(l, F jS, Y \\a\\t g:ia) }}</em> \n// <em>Sunday, January 1st, 2011 at 10:50pm</em>\n```\n\n## dateDiffForHumans()\n\nThis method creates an expression of duration comparing the date and time from a content field to the current date and time.\n\n```\n{{ page.date.dateDiffForHumans() }}\n<br/>\nReturns:\n<br/>\n[x time] ago\n```\n\n## each\n\nThe Parsley Each statements, also known as loops, allow you to iterate (loop) through each entry of a content model.\n\n```\n{{ each team_members as member }}\n<p>{{ member.name }}</p>\n{{ end-each }}\n```\n\n## else\n\nThe `else` statement allows for a a final case if none of the defined conditions in the `if` statement have been met.\n\n```\n{{ if {page.field} == 1 }}\nExample where first condition is met\n{{ else-if {page.field} == 2 }}\nExample where second condition is met\n{{ else }}\nExample where no condition is met\n{{ end-if }}\n```\n\n## else-if\n\nThe `else-if` statement is used for the defining alternate conditions, if the original if condition is not met. There can be as many `else-if` statements as needed after the opening `if` statement and before the `end-if`.\n\n```\n{{ if {page.field} == 1 }}\nExample where first condition is met\n{{ else-if {page.field} == 2 }}\nExample where second condition is met\n{{ else }}\nExample where no condition is met\n{{ end-if }}\n```\n\n## end-each\n\nRequired to close `each` loops.\n\n```\n{{ each team_members as member }}\n<p>{{ member.name }}</p>\n{{ end-each }}\n```\n\n## end-if\n\nRequired to close an `if` statement.\n\n```\n{{ if {page.field} == 1 }}\nExample where first condition is met\n{{ else-if {page.field} == 2 }}\nExample where second condition is met\n{{ else }}\nExample where no condition is met\n{{ end-if }}\n```\n\n## escapeForJs()\n\nThe `escapeForJs()` call returns text with all the characters that could break a Javascript or JSON string escaped with `\\`.\n\n```\n[\n {\n \"title\": \"{{ page.title.escapeForJs() }}\"\n }\n]\n```\n\n## filter()\n\nThe `.filter()` call can be used to access specific data based on the scope.\n\n```\n{{ scope.filter(z.zuid = '{this.one-to-one-field}').scope-field }}\n\n{{ another-set.filter(z.zuid = '{this.one-to-one}').page_title }}\n```\n\n## find\\_in\\_set\n\nThe `find_in_set` query allows for looking for a specific number or string in a comma separated list. `find_in_set` is always used to filter a Content Model related with a One-to\\_Many relational field.\n\n```\n{{ each tags as tag where find_in_set(tag.zuid, '{this.tags}') }}\n<span>{{ tag.title }}</span>\n{{ end-each }}\n```\n\n## first()\n\nThe `first()` call will access the content available in the first entry of any content model.\n\n```\n{{ content_model.first().title }}\n// \"This is the title for the first entry of a content model\"\n```\n\n## format\\_currency()\n\nThe `format_currency()` call transforms a float number from a content field to the format $XX.XX.\n\n```\n{{ each products as product }}\n    {{ product.price.format_currency() }}\n{{ end-each }}\n```\n\n## get\\_var\n\nThe `get_var` call returns the value of any query parameter in the current URL by referencing the key. When printing out any query parameter using `get_var`, be sure to use `htmlentities()` to prevent Cross-site Scripts and code injections.\n\n```\n// at the page /blog/?category=news\n\n{{ get_var.category.htmlentities() }}\n```\n\n## getfeedurl()\n\nEvery content model in Zesty (single page, page groups or datasets) can access a public RSS feed. It will always be `content_model_refrence_name-feed.rss/`\n\n```\n{{ content_model.getfeedurl() }}\n```\n\n## getImage(width, height, type)\n\nThe `getImage()` function takes optional arguments for width, height, and type (`fit` or `crop`) and returns a URL to that image. Fit is the default and does not need to be explicitly declared. Crop type requires all 3 arguments declared. Fit is similar to the css style \"contain\" and crop is similar to the css style \"cover\".\n\n```\n<img src=\"{{ page.photo.getImage() }}\" />\n<img src=\"{{ page.photo.getImage(100) }}\" />\n<img src=\"{{ page.photo.getImage(,100,fit) }}\" /> \n<img src=\"{{ page.photo.getImage(100,,fit) }}\" />\n<img src=\"{{ page.photo.getImage(100,100,fit) }}\" />\n<img src=\"{{ page.photo.getImage(100,100,crop) }}\" />\n```\n\n## getImageTitle()\n\nThe `getImageTitle()` call returns the image title set in the Media Tab.\n\n```\n{{ page.image.getImageTitle() }}\n```\n\n## getMediaURL()\n\nThe `getMediaURL()` call returns the original URL to that file. This is how to access files stored in the Media Tab that are not images, such as PDFs and MP4s. You can also use this call to access the original file of an image without the default optimization provided by Zesty.io.\n\n```\n<a href=\"{{ page.download_file.getMediaURL() }}\" >Download</a>\n// <a href=\"https://domain.com/file.pdf\" >Download</a>\n```\n\n```\n// If looping through an image field with multiple images use this call\n{{ my-var.image.getmediaurl() }}\n```\n\n## getNextURL(number)\n\nThe `getNextURL()` call returns the current page url with a query parameter `p` increased by the number specified. If there is no query parameter `p`, it will set it equal to the number specified. If no number is provided, the default is 10. This can be used with `get_var.p` to do pagination with an each loop.\n\n```\n{{ page.getNextURL(10) }}\n// blog/?p=10\n```\n\n## getPreviousURL(number)\n\nThe `getPreviousURL()` call returns the current page url with a query parameter `p` decreased by the number specified. If there is no query parameter `p`, it will set it equal to 0. If no number is provided as an argument, the default is 10. This can be used with `get_var.p` to do pagination with an each loop.\n\n```\n// on the page /blog/?p=30\n{{ page.getPreviousURL(10) }}\n// /blog/?p=20\n```\n\n## getUrl()\n\nThe `getUrl()` call returns the relative path to the entry.\n\n```\n<a href=\"{{ blog.first().getUrl() }}\">Link</a>\n// <a href=\"/blog/\">Link</a>\n```\n\n## globals\n\nThe `globals` call is used to access content stored in the Globals (formerly Content Clippings) set.\n\n```\n{{ globals.phone }}\n\n// Returns: \n555-555-5555\n```\n\n## Google Analytics\n\nParsley provides a short cut to creating google analytics tag. The advantage of using this Parsley call is that as Google Analytics updates their syntax, it will be automatically updated on your website.\n\nThis call `{{gaEvent(eventCategory,eventAction,eventLabel,eventValue)}}` will trigger an event to your Google Analytics integration.\n\n**eventCategory:** _text_ required Typically the object that was interacted with (e.g. 'Video')\n\neventAction:_text_ required The type of interaction (e.g. 'play')\n\n**eventLabel:\\***text\\* optional Useful for categorizing events (e.g. 'Fall Campaign')\n\n**eventValue:\\***integer\\* optional A numeric value associated with the event (e.g. 42)\n\nRead the spec for GA Events [here](https://developers.google.com/analytics/devguides/collection/analyticsjs/events%3E)\n\n```\n<pre><a href=\"https://vimeo.com/144792991\" {{gaEvent(Vimeo, Opened-video)}}>My Video</a></pre>\n\n// returns \n<pre><a href=\"https://vimeo.com/144792991\" onclick=\"ga('send','event', 'Vimeo', ' Opened-video', ' ',undefined,'{'nonInteraction': 1}');\">My Video</a></pre>\n```\n\n## gravatar()\n\nThe `gravatar()` function takes an email address and requests an image from the Gravatar API.\n\n```\n\"<img class=\"highlight\" src=\"{{ page.author_email.gravatar() }}\" />\"\n// <img class=\"highlight\" src=\"http://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\" />\n```\n\n## hasChildren()\n\nThe `hasChildren()` function returns true or false, depending if any pages are parented to the entry. This can be used to find out if a page has pages that live under it. This is helpful when using logic to create secondary navigations.\n\n```\n{{ if {page.hasChildren()} }}\n    // subnav code\n{{ end-if }}\n```\n\n## html\\_entity\\_decode()\n\nThe `html_entity_decode` call converts all HTML entities in the provided string to their applicable characters.\n\n```\n<p>{{ page.description.html_entity_decode() }}</p>\n```\n\n## htmlentities()\n\nThe `htmlentities()` call convert all applicable characters to HTML entities. Should be used whenever printing out a get or post variable to prevent Cross-site Scripting and code injection.\n\n```\n{{page.html.htmlentities()}}\n{{ get_var.search.htmlentities() }}\n```\n\n## if\n\nThe `if` statement evaluates conditions using `==`, `!=`, `>=`, `<=`, `<`, and `>`. Within the `if` statement, multiple conditions can be combined using `&&` for and, and `||` for or. If statements can also execute math.\n\n```\n{{ if {page.field} == 1 && {page.price} + 10 > 100 }}\nExample\n{{ end-if }}\n```\n\n## include\n\nThe [`include`](https://zesty.org/services/web-engine/introduction-to-parsley/include) call is a prompt to reference the code in any View which includes views, snippets, and endpoints.\n\n```\n{{ include header }}\n```\n\n## instance.host\\_env\n\nShows the instance's webengine URL. This only works in preview - not on live.\n\n```\n{{ instance.host_env }}\n```\n\n## instance.host\\_live\n\nShows you the instance's first registered domain. This only works in preview - not on live.\n\n```\n{{ instance.host_live }}\n```\n\n## instance.host\\_preview (or instance.host\\_relative)\n\nShows an instance's preview URL. This only works in preview - not on live.\n\n```\n{{ instance.host_preview }}\n{{ instance.host_relative }}\n```\n\n## instance.host\\_protocol\n\nShows the instance's protocol based on its settings. This only works on preview - not on live.\n\n```\n{{ instance.host_protocol }}\n```\n\n## last()\n\nThe `last()` call will access the content available in the last entry of any content model.\n\n```\n{{ articles.last().title }}\n```\n\n## limit\n\nThe `limit` statement is used in an each loop to specify how many content entries will result. The `limit` statement can also be used to skip a number of entries and show the next set if two arguments are provided.\n\n```\n{{ each articles as post where post.featured = 1 sort by post.date desc limit 20 }}\n// entries 1 through 20\n{{ end-each }}\n{{ each articles as post where post.featured = 1 sort by post.date desc limit 10,20 }}\n// entries 11 through 30\n{{ end-each }}\n```\n\n## length()\n\nThe `length` of a given string.\n\n```\n{{this.title.length()}}\n// outputs a number, ex. 11\n\n{{if {this.title.length()} > 5}}\n // do this \n{{end-if}}\n```\n\n## math( statement )\n\nThe `math()` call executes an equation and returns a number.\n\n```\n(** plain output **)\n{{ math( 1 + 2 ) }}\n\n(** in use with a page field **)\n{{ math( round({page.product_cost} * 1.5) ) }}\n\n(** in use with a variable **)\n{{ $my_num = 4 }}\n{{ math( {$my_num} + 2 ) }}\n```\n\n## navigation(number)\n\nThe `navigation()` call will access your Zesty.io Navigation Structure and output it as an HTML list.\n\n```\nsite.navigation(INT depth, BOOL bootstrap, BOOL json)\n\n{{site.navigation()}} // all defaults to html output\n{{site.navigation(1)}}  // depth of the parent child levels\n{{site.navigation(3, false, true)}}  // json output\n```\n\nThe call will mimic the content navigation layout you find in the Zesty.io Content Manager and will ignore pages marked as unlisted. A number argument will specify what level of children to access within the navigation. Blank will list all pages, 1 will only be top level pages, 2 will be top level and subpages, 3 will be top level, subpages and tertiary pages, and so on.\n\n```\n{{ navigation() }}\n\n// Returns:\n<ul id=\"nav\" class=\"nav\">\n     <li><a href=\"...\"></a>\n          <ul>\n              <li><a href=\"...\"></a></li>\n          </ul>\n     </li>\n     <li><a href=\"...\"></a></li>\n</ul>\n```\n\n## number\\_format(number)\n\nThe `number_format()` call returns a number with the specified number of decimals as the argument. Blank will remove any decimals.\n\n```\n{{ $number = 3.14 }}\n\n{{ $number.number_format(1) }} \n\n// Returns: \n3.1\n```\n\n## obfuscate()\n\nThe `obfuscate()` call returns obscure text to web crawlers, like email or phone numbers.\n\n```\n<a href=\"mailto:{{setting.contact-form.sending_email.obfuscate()}}\">{{setting.contact-form.sending_email.obfuscate()}}</a>\n```\n\n## xssProtect()\n\nThe `xssProtect()` call encode, decodes, strips html and turns characters into entities.\n\n```\n{{get_var.search.xssProtect()}}\n```\n\n## page\n\nThe `page` call represents the content entry for the current page. It provides access to the data associated with the page. Any field in the Content Model can be accessed using this method when on the associated page.\n\n```\n{{ page.field_name }}\n```\n\n## paypalStandard(action, product, price, shipping)\n\nQuickly create a Paypal Standard buy, donate, or add to cart button in Parsley. To start using Paypal Standard a Paypal account must be created. The Paypal account information and tax rate are set in the Config Tab, under Settings-> Paypal Standard. These must be set to send money to the appropriate account. Action can be `buy`, `addtocart` and `donate`.\n\n```\n{{ each products as p }}\n    <h1>{{ p.title }}</h1>\n    <p>{{ p.price }}</p>\n    {{ paypalStandard(buy,{p.title},{p.price},{p.shipping}) }}\n {{ end-each }}\n```\n\n## post\\_clean()\n\nThe `post_clean()` call replaces `\\n` `\\r\\n` or `\\` with a blank string.\n\n```\n{{ page.imported_content.post_clean() }}\n```\n\n## post\\_var\n\nThe `post_var` call references data available in the requests post body. A couple common ways data can be added to the request post body is by submitting a form with a `method=\"post\"` or using javascript `POST`. A common practical use for this call is to check is a form has been submitted by checking if the POST variable for the name of a required input is available.\n\n```\n{{ if {post_var.email} }}\nThank you for submitting your form, please check {{ post_var.email }} for a verification email.\n{{ else }}\n// form code\n{{ end-if }}\n```\n\n## preg\\_replace(pattern, replacement)\n\nThe `preg_replace()` call is a regular expression replacement. To learn more about Regular expression go to [http://www.regular-expressions.info/](http://www.regular-expressions.info/)\n\n```\n{{ page.content.preg_replace(/i/,*) }}\n\n//Returns:\nI'm gonna f*x that last joke by tak*ng out all the words and add*ng new ones.\n- M*tch Hedberg\n```\n\n## random()\n\nThe `random()` call is used to reference a random content entry for a content model.\n\n```\n{{ articles.random().title }}\n// \"the 'title' from a random item in 'articles'\"\n```\n\n## replace(pattern, replacement)\n\nThe `replace()` call does a simple replace without any regular expression.\n\n```\n// $description = \"We wrote this blog post\"\n{{ $description.replace(We, I) }}\n// \"I wrote this blog post\"\n```\n\n## request.path()\n\nGets the full path from request **excluding** query parameters, for example lets use the url /store/12345/my-product/\n\n```\n{{ request.path() }} // outputs: /store/12345/my-product/\n```\n\n## request.fullpath()\n\nGets the full path from request **including** query parameters, for example lets use the url /store/12345/my-product/?query=newvalue\n\n```\n{{ request.fullpath() }} // outputs: /store/12345/my-product/?query=newvalue\n```\n\n## request.pathPart(num)\n\nGet the \"parts\" of a url, for example lets use the url /store/12345/my-product/\n\n```\n{{ request.pathPart(1) }} // output: store\n{{ request.pathPart(2) }} // output: 12345\n{{ request.pathPart(3) }} // output: my-product\n{{ request.pathPart(4) }} // output: (empty string)\n```\n\n## request.queryParam(num)\n\nGet the query parameters from url, for example lets use the url /store/12345/my-product/?test=hello\n\n```\n{{ request.queryParam(test) }} // output: hello\n{{ request.queryParam(lala) }} // output: (empty string)\n```\n\n## response.addHeader(name, ...value)\n\nThis call will add a header to the response. This call does not output anything.\n\n```\n{{response.addHeader(ab-test, 4)}}\n\n// adds header to \"ab-test\" with value \"4\"\n\n{{response.addHeader(Cache-Control, max-age=300, public)}}\n\n// adds header to \"Cache-Control\" with value \"max-age=300, public\"\n```\n\n## response.redirect301(url)\n\nThis call will add a redirect the page.\n\n```\n{{response.redirect301(https://www.google.com)}}\n```\n\n## response.redirect302(url)\n\nThis call will add a redirect the page.\n\n```\n{{response.redirect301(https://www.google.com)}}\n```\n\n## response.return404(message)\n\nThis call will response to your default 404 page, if there is no default 404 page, a generic 404 page will display with the \"message\" param as an h1 tag.\n\n```\n{{response.return404(My Default Message)}}\n```\n\n## sectionlinks(number)\n\nThe `sectionlinks()` call looks at the current page and searches up to its top-level parent to create a navigation structure as an HTML list. Depth can be specified by as a numeric argument as `sectionlinks(2)` or you can choose not to display the top level page by passing `sectionlinks(off)`\n\n```\n{{ sectionlinks() }}\n\n// <ul class=\"sectionLinks\" id=\"sectionLinks\">\n      <li><a href=\"/about-us/\" title=\"About Us\">About Us</a>\n         <ul class=\"sectionLinks\">\n         <li><a href=\"/about-us/team/\" title=\"\">Team</a></li>\n         <li><a href=\"/about-us/qualifications/\" title=\"Qualifications\">Qualifications</a></li>\n      </ul>\n    </li>\n</ul>\n```\n\n## seo\\_meta\\_description\n\nUse this call to access an item's meta description.\n\n```\n{{ this.seo_meta_description }}\n```\n\n## seo\\_link\\_title\n\n{% hint style=\"warning\" %}\n**Deprecated:** this functionality is only available to test in preview, it is not available for production websites because they are statically cached.\n{% endhint %}\n\nThis call will access the Navigation Title for an item which is located under an [item's Meta information](https://zesty.org/services/manager-ui/content/meta-fields) in the Content section.\n\nThe `sever_var` call provides access to some of the most common server variables holding information about headers, paths, and script location. Some available variables are:\n\n```\n{{ this.seo_link_title }}\n```\n\n## seo\\_meta\\_title\n\nThis call will access the Meta Title for an item which is located under an [item's Meta information](https://zesty.org/services/manager-ui/content/meta-fields) in the Content section.\n\n```\n{{ this.seo_meta_title }}\n```\n\n## setting\n\nThe `settings` call returns data stored in the Instance Settings in the Config Tab.\n\n```\n<a href=\"{{ setting.social-links.linkedin_link }}\">Zesty on Linkedin</a>\n// <a href=\"https://www.linkedin.com/company/zesty-io/\">Zesty on Linkedin</a>\n```\n\n## toJSON()\n\nA function outputs a JSON string that can be use in inline JavaScript. The function can be called off this, data calls, or loop variables. Parsley REPL Example [https://parsley.zesty.io/turn-any-content-item-to-json/](https://parsley.zesty.io/turn-any-content-item-to-json/)\n\n`{{this.toJSON(depth, showMeta)}}`\n\n* `depth` is an integer for hydration depth, max is 5\n* `showMeta` true or false: `true` gives all meta, routing, and zuid details, and locale details. `false` is just content\n\n```\n{{this.toJSON(3,false)}} \n\n{{model.first().toJSON(2, true)}}\n\n{{each model as item}}\n    {{item.toJSON()}}\n{{end-each}}\n```\n\n{% code title=\"Example Output for {{this.toJSON}} call on zesty.io's homepage\" %}\n```javascript\n{\n    title: \"Your Content, Anywhere\",\n    content: \"<h1>A CONTENT PLATFORM THAT POWERS ENTERPRISE GRADE WEBSITES AND APPLICATIONS</h1>\",\n    image: {\n        type: \"images\",\n        totalItems: 1,\n        data: [\n            {\n                type: \"image\",\n                zuid: \"3-5c58033-eb8cq\",\n                url: \"https://zestyio.media.zestyio.com/Zesty.io---9-5seg.mp4\"\n            }\n        ]\n    },\n    customer_logo_heading: \"Trusted by enterprises, startups, and everyone in between\",\n    main_headline: \"Managing content at scale is difficult.\",\n    main_description: \"<ul><li><p>Security issues, and out of date software</p></li><li><p>Editing the same content in multiple places</p></li><li><p>Developers needed for content updates</p></li></ul><h1>..but it doesn’t have to be</h1><ul><li><p>Centralized content management</p></li><li><p>Automated security and product improvements</p></li><li><p>Easy Distribution at global scale</p></li></ul>\",\n    pagina_nueva: null,\n    og_image: {\n    type: \"images\",\n    totalItems: 1,\n    data: [\n            {\n                type: \"image\",\n                zuid: \"3-a4f5ca6-a25px\",\n                url: \"https://kfg6bckb.media.zestyio.com/zesty-share-image-generic.png\"\n            }\n        ]\n    },\n    meta: {\n        type: \"item\",\n        model_name: \"homepage\",\n        zuid: \"7-31209c-g7qsjg\",\n        createdAt: \"2020-10-01 06:33:30\",\n        updatedAt: \"2020-10-01 06:33:29\",\n        listed: \"1\",\n        version: \"200\",\n        locale: {\n            id: \"1\",\n            name: \"English (United States)\",\n            code: \"en-US\",\n            default: \"1\",\n            active: \"1\",\n            enabled: \"1\"\n        },\n        model: {\n            type: \"model\",\n            zuid: \"6-31079c-vdg69q\",\n            name: \"homepage\",\n            label: \"Homepage\",\n            resourceURI: \"https://www.zesty.io/-/instant/6-31079c-vdg69q.json\"\n        },\n        web: {\n            url: \"https://www.zesty.io/\",\n            uri: \"/\",\n            fragment: \"zesty_home\",\n            canonical_tag_mode: \"1\",\n            sitemap_priority: \"-1.0\",\n            sitemap_last_updated: \"2020-10-01 06:33:29\",\n            canonical_query_param_whitelist: null,\n            canonical_tag_custom_value: null,\n            seo_link_text: \"Homepage\",\n            seo_meta_title: \"Zesty.io: The Headless CMS for Marketers + Developers\",\n            seo_meta_description: \"Built for teams to manage and distribute content to multiple sites, devices, and anywhere else it needs to go.\",\n            seo_meta_keywords: null\n        }\n    }\n}\n```\n{% endcode %}\n\n## \\*\\*\\*\\*\n\n## instance\n\nThe `instance` call returns data specific to the instance, such as the CDN URL and the domain or globally relevant data, such as the current data-time or the current language.\n\n```\n{{ instance.cdn }}\n```\n\n## instance.env\n\nThe `instance.env` call returns `live` for published content and views, and `dev` for versioned preview views and content.\n\n```\n{{ instance.env }}\n```\n\n## instance.date()\n\nThe `instance.date()` call returns the current date time and accepts arguments to modify the date based on the PHP data-time. More information available at [http://php.net/manual/en/function.date.php](http://php.net/manual/en/function.date.php)\n\n```\n{{ instance.date(l jS \\of F Y h:i:s A) }}\n\n//Returns:\nSunday 31st of July 2005 08:45:12 PM\n```\n\n## instance.lorem(number)\n\nThe `instance.lorem()` call auto generates lorem ipsum placeholder content.\n\n```\n{{ instance.lorem(20) }}\n\n// Returns : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam volutpat quam quis erat tristique pretium.\n```\n\n## instance.searchformatted(string,limit)\n\nThe `instance.searchformatted()` call takes a string and a limit as arguments and outputs instance-wide search results based on meta title, meta description, and path.\n\n```\n{{instance.searchformatted({get_var.search},10)}}\n```\n\n## slugify()\n\nThe `slugify()` call will concatenate strings by replacing spaces with dashes (-), lowercasing all letters, and stripping out all punctuation.\n\n```\n// if the page title is the string: My New Homepage!\n\n{{ page.title.slugify() }}\n\n// calling slugify on the page title will return: my-new-homepage\n```\n\n## sort by / order by\n\nThe `sort by` or `order by` statement can be used in an each loop to specify a field of the content model used to sort the content entries and which direction. Multiple fields can be specified using a comma separated list. If no sort is specified, the default is creation date. If no direction is specified ascending is the default.\n\n```\n{{ each articles as post where post.featured = 1 sort by post.date desc, post.title limit 10 }}\n{{ end-each }}\n```\n\n## striptags(start, length)\n\nThe `striptags` call will return a string with HTML tags removed. It also acts as a substring method if a start and length parameter are provided.\n\n```\n// $html = \"Hello <h1>Zesty.io</h1> users\"\n{{ $html.striptags() }}\n// \"Hello Zesty.io users\"\n```\n\n## substr(start, length)\n\nThe `substr()` call takes the text value it is attached to and returns a substring with the desired length. This call takes both positive and negative numbers. Negative numbers, for example, `substr(-5)` will return the last five characters in a string. Does not consider whitespace as part of length.\n\n```\n// $description = \"This is a longer description that needs shortened!\"\n{{ $description.substr(0,9) }}...\n// \"This is a lo...\"\n```\n\n## subWords(number\\_of\\_words)\n\nThe `subWords()` call returns the first specified number of words from a body of text.\n\n```\n{{ page.content.subWords(3) }}\n```\n\n## trim\\_zeros()\n\nThe `trim_zeros()` call with take a number like 8.0000000 and just show 8. It will also trim leading zeros as well so a number like 00800.00 will show 800.\n\n```\n// $num = 8.000000000\n{{ $num.trim_zeros() }}\n// 8\n```\n\n## truepath(zuid)\n\nThe `truepath()` call will determine the web URL to access a content entry based on a [ZUID](https://zesty.org/glossary#zuid). Since one-to-one and internal page fields in Zesty.io store ZUIDs, `truepath()` is a quick way to access the direct url to that content entry without needing to do an each loop or filter call.\n\n```\n{{ truepath({page.link_to_article}) }}\n```\n\n`truepath()` can be used in [each loops](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#each) as well, for example `{{ truepath(this.zuid) }}` or `{{ this.zuid.truepath() }}` and you can assign it to a Parsley variable as well.\n\n```\n{{each articles as art limit 5}}\n    {{art.zuid}} <br>\n    {{art.zuid.truepath()}}<br>\n    {{$var = {truepath({art.zuid})} }}\n    VAR: {{$var}}<hr>\n{{end-each}}\n```\n\n## where\n\nThe `where` statement is used to filter content entries in an each loop. `Where` statements use SQL style conditional statements to determine which entries to pass through the loop. A single each can use multiple conditions using `and` and `or`.\n\n```\n{{ each articles as post where post.featured = 1 or post.category = '{page.featured_category}` sort by post.date desc limit 10 }}\n{{ end-each }}\n```\n","category":"guides","service":"webengine"},{"name":"CSS & JS Processing Flow","url":"/webengine/guides/web-engine/css-processing-flow","objectId":"-L_8WplWNdWsJV5ginZK","item":[],"content":"---\ndescription: >-\n  Zesty.io runs CSS pre-processers on save and publish of SASS, SC SS, LESS, and\n  CSS files. We also concatenate JS files.\n---\n\n# CSS & JS Processing Flow\n\nZesty.io’s Code Editor supports [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS), [LESS](http://lesscss.org/), and [SCSS/SASS](https://sass-lang.com/). Every save of a stylesheet will combine, compile, and minify all stylesheet files into a single CSS file `/site.css`. That file is automatically linked to in your page \\<head>. If more than one style of stylesheet is used, they will compile and concat into a single file. The order of concatenation:\n\n1. **CSS**\n2. **LESS**\n3. **SCSS/SASS**\n\n****\n\n![](https://docs.google.com/a/zesty.io/drawings/d/srvGtbLDWqNiHQ83TwuBrZg/image?w=624\\&h=287\\&rev=390\\&ac=1\\&parent=1XwoNkMZD2S8bfQOfOWKOBvbknhJT\\_vH6yKsWaDqZfUM)\n\n### **Compilers and Minifiers**\n\nAll files are concatenated based on their type then by their order set in the editor interface of the Zesty.io manager. Each stylesheet type has its own compiler or minifier explained below.\n\n### **CSS**\n\nAll CSS with the exception of any file named ‘ie8.css’ is concatenated and run through a minification process. The repository used for CSS minification: [https://github.com/fmarcia/uglifycss](https://github.com/fmarcia/uglifycss)\n\n### **LESS**\n\nAll LESS files are concatenated based on their order in the editor interface and then run through the LESSC compiler with the compressed flag. The repository we use to compile:  [https://github.com/less/less.js](https://github.com/less/less.js)\n\nErrors are returned for broken LESS at compile time.\n\n### **SCSS/SASS**\n\nAll SCSS files are concatenated based on their order in the editor and run through the SASSC compiler with the flags ‘ --style compressed --stdin’, that behavior is hard coded and cannot be changed. The repository used for compiling SASS: [https://github.com/sass/sassc](https://github.com/sass/sassc)\n\nThe command to compile SCSS to CSS is \\`sassc --stdin --style compressed\\`\n\nThe command to compile SASS to CSS is \\`sassc --stdin --sass --style compressed\\`\n\nErrors are returned for broken SASS at compile time.\n\n### **Special Rules and Files**\n\n**Asset Directory Settings**\n\nA special setting with the values `category: general` `key:base_directory` may be set to a base have your `site.css` and `site.js` files load from a specific directory like `/my/directory/site.js` this is useful for launching sub directory specific website instances. &#x20;\n\n#### **ie8.css**\n\nIf a file is given the name ie8.css, it will be ignored by the minification process and be included in its own href link in the header after the main minified CSS file is added.\n\n#### **Auto Added Stylesheet Files**\n\nZesty.io auto appends stylesheets to specific templates (mostly legacy). If you experience added CSS and it is a problem please reach out to support on the Zesty.io developer slack channel. Support engineers can remove the base CSS files.\n\n{% hint style=\"warning\" %}\nComments in Style files can err on compilation especially if they are single-line comments noted by `//` and at the top or bottom of the file. To mitigate  this ensure that comments are noted using the multi-line `/* */` syntax.\n{% endhint %}\n\n### Managing Stylesheets Using the API\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets/\" method=\"post\" summary=\"Create Stylesheet\" %}\n{% swagger-description %}\nCreates a single stylesheet with two versions: dev and live\n{% endswagger-description %}\n\n{% swagger-parameter in=\"body\" name=\"type\" type=\"string\" %}\ntype must be one of the following options:\n\n\\\n\n\n\\- text/less\n\n\\\n\n\n\\- text/sass\n\n\\\n\n\n\\- text/scss\n\n\\\n\n\n\\- text/css\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"filename\" type=\"string\" %}\nfilename must include a file extension. Valid file extensions are:\n\n\\\n\n\n\\- .less\n\n\\\n\n\n\\- .sass\n\n\\\n\n\n\\- .scss\n\n\\\n\n\n\\- .css\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"code\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```javascript\n{\n  \"_meta\": {\n    \"timestamp\": \"2019-09-04T20:43:09.6201781Z\",\n    \"totalResults\": 1,\n    \"start\": 0,\n    \"offset\": 0,\n    \"limit\": 1\n  },\n  \"data\": {\n    \"ZUID\": \"10-a08bb28483-clr72r\",\n    \"status\": \"live\",\n    \"type\": \"text/less\",\n    \"fileName\": \"styles.less\",\n    \"code\": \"@pale-green-color: #4D926F;#header {color: @pale-green-color;}h2{color: @pale-green-color;}\",\n    \"lastEditedID\": 21474570,\n    \"template\": 1,\n    \"module\": 0,\n    \"plugin\": 0,\n    \"version\": 1,\n    \"createdAt\": \"2019-09-04T20:43:08.6159035Z\",\n    \"updatedAt\": \"2019-09-04T20:43:08.6159349Z\"\n  }\n}\n\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets/:stylesheet_zuid\" method=\"get\" summary=\"Get Single Stylesheet\" %}\n{% swagger-description %}\nRetrieve a single stylesheet using its ZUID\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"stylesheet_zuid\" type=\"string\" %}\nunique id assigned to a given stylesheet\n\n\\\n\n\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```javascript\n{\n    \"_meta\": {\n        \"timestamp\": \"2019-09-05T18:39:54.3312411Z\",\n        \"totalResults\": 1,\n        \"start\": 0,\n        \"offset\": 0,\n        \"limit\": 1\n    },\n    \"data\": {\n        \"ZUID\": \"10-d2a3bed586-xtgzj9\",\n        \"status\": \"dev\",\n        \"type\": \"text/less\",\n        \"fileName\": \"derp.less\",\n        \"code\": \"@pale-green-color: #4D926A;#header {color: @pale-green-color;}h2{color: @pale-green-color;}\",\n        \"lastEditedID\": 21474570,\n        \"template\": 1,\n        \"module\": 0,\n        \"plugin\": 0,\n        \"version\": 2,\n        \"createdAt\": \"2019-09-04T11:16:31Z\",\n        \"updatedAt\": \"2019-09-04T18:17:40Z\"\n    }\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets\" method=\"get\" summary=\"Get Multiple Stylesheets\" %}\n{% swagger-description %}\nRetrieves multiple stylesheets\n{% endswagger-description %}\n\n{% swagger-parameter in=\"query\" name=\"status\" type=\"string\" %}\nA stylesheet's status. Valid options are:\n\n\\\n\n\n\\- dev\n\n\\\n\n\n\\- live\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```javascript\n{\n  \"_meta\": {\n    \"timestamp\": \"2019-09-05T18:31:23.9959161Z\",\n    \"totalResults\": 2,\n    \"start\": 0,\n    \"offset\": 0,\n    \"limit\": 2\n  },\n  \"data\": [\n    {\n      \"ZUID\": \"10-2c4b18-84jpqk\",\n      \"status\": \"dev\",\n      \"type\": \"text/css\",\n      \"fileName\": \"main.css\",\n      \"code\": \"/*\\nYou can write more css here\\nor add additional files.\\n\\nLearn more here: https://developer.zesty.io/docs/code-editor/css-and-less/\\n*/\\n\",\n      \"lastEditedID\": null,\n      \"template\": 1,\n      \"module\": 0,\n      \"plugin\": 0,\n      \"version\": null,\n      \"createdAt\": \"2019-08-20T22:22:21Z\",\n      \"updatedAt\": \"2019-08-20T22:22:21Z\"\n    },\n    {\n      \"ZUID\": \"10-d2a3bed586-xtgzj9\",\n      \"status\": \"dev\",\n      \"type\": \"text/less\",\n      \"fileName\": \"derp.less\",\n      \"code\": \"@pale-green-color: #4D926A;#header {color: @pale-green-color;}h2{color: @pale-green-color;}\",\n      \"lastEditedID\": 21474570,\n      \"template\": 1,\n      \"module\": 0,\n      \"plugin\": 0,\n      \"version\": 2,\n      \"createdAt\": \"2019-09-04T11:16:31Z\",\n      \"updatedAt\": \"2019-09-04T18:17:40Z\"\n    }\n  ]\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets/:stylesheet_zuid\" method=\"put\" summary=\"Update Stylesheet\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"stylesheet_zuid\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"code\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets/:stylesheet_zuid\" method=\"put\" summary=\"Update Stylesheet and Publish \" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"stylesheet_zuid\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"purge_cache\" type=\"boolean\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets/:stylesheet_zuid\" method=\"delete\" summary=\"Delete Stylesheet\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"stylesheet_zuid\" type=\"string\" %}\n\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"purge_cache\" type=\"boolean\" %}\nDefault value is true. This value is only checked when you wish to publish\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"action\" type=\"string\" %}\nSet action=publish if you wish to publish\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://8-xyz-xyzxyz.api.zesty.io\" path=\"/v1/web/stylesheets/:stylesheet_zuid/versions/:version\" method=\"post\" summary=\"Publish Stylesheet\" %}\n{% swagger-description %}\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\"version\" type=\"number\" %}\nSpecify the version of the resource you wish to publish\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"query\" name=\"purge_cache\" type=\"boolean\" %}\nDefault value is true\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n### JavaScript\n\nZesty.io combines all script files into a single concatenated `/site.js` file, this file automatically links in the head via script tag, and can optionally be omitted in developer settings on the instance.\n","category":"guides","service":"webengine"},{"name":"Head & Meta Tags","url":"/webengine/guides/web-engine/meta-tags","objectId":"-LLJ1WAfUR2POljxJ_Qy","item":[],"content":"# Head & Meta Tags\n\nMeta tags are automatically generated in Zesty.io. Some may be overwritten by content fields. This document will explain which meta tags can be affected by the user, and which are hard written into the Zesty.io Website Engine.\n\n## Automated Meta tags\n\n### Basic SEO Meta Tags\n\nAll content items with a view and URL route in Zesty.io will have a title, description, and keywords associated with them. The tags produced in the header that are affected by content items are:\n\n```markup\n<title>{seo_meta_title}</title>\n<meta name=\"description\" content=\"{seo_meta_description}\">\n<meta name=\"keywords\" content=\"{seo_meta_keywords}\">\n```\n\n### Default Environment Meta Tags\n\nThese tags are always generated, and are not editable.\n\n```markup\n<meta  http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0\">\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n```\n\n### Social Media Tags (Twitter Card and Open Graph Meta Tags)\n\nThese tags are always auto-generated to help with sharing on social media platforms. The two social media tags automated are Open Graph (Facebook) and Twitter Cards (Twitter). The content of these tags are copied from the meta title and meta description tags.\n\n{% content-ref url=\"open-graph-twitter-card-meta-tags.md\" %}\n[open-graph-twitter-card-meta-tags.md](open-graph-twitter-card-meta-tags.md)\n{% endcontent-ref %}\n","category":"guides","service":"webengine"},{"name":"meta-tags","url":"/webengine/guides/web-engine/meta-tags","item":[{"name":"Custom Head Overwrite","url":"/webengine/guides/web-engine/meta-tags/custom-head-overwrite","objectId":"-LzJwj_eo5klGPgFYlJh","item":[],"content":"---\ndescription: >-\n  Developer option to overwrite the automated meta, title, and og:tags <head>\n  tags with a Parsley snippet file.\n---\n\n# Custom Head Overwrite\n\n## What is an Automated Head?\n\nZesty.io automates the creation \\<head> tags, which include \\<title> \\<meta> and \\<og:title> like tags to automate the optimization of search engine indexing. There are times when you may want to customize these tags and not rely on Zesty.io to produce them. If you want to overwrite the automated head tags, follow this tutorial.\n\n### How to Setup a Custom Head File and Overwrite the Automated Meta\n\nFour steps to overwrite the head:\n\n1. Create a **text** setting in the category **developer** with the key **overwrite\\_head (**[**see API Docs**](https://instances-api.zesty.org/?version=latest#588eccb2-8f3a-482d-b2dd-cfc9a2be93e9)**)**\n2. In the code editor, create a new _snippet_ file , lets call it \"**custom\\_head**\" (you can call it anything)\n3. In settings, change the new setting's (overwrite\\_head) value to **\"custom\\_head**\", save the setting. \\\n   **This turns on the overwrite.**\n4. In the code editor, add your custom tags to the \"**custom\\_head**\" snippet you created in step 2,  and then save and publish it.\n\n{% hint style=\"warning\" %}\n**Important:** add a value to the **developer.head\\_overwrite** will immediately switch your WebEngine pages renders over to using a custom head. You can prepare the snippet before editing your setting**.** Once setup, overwriting automated head tags lets you control this portion of the \\<head> through a versioned view snippet, this means you need to publish the snippet to see changes to a production site.\n{% endhint %}\n\n### Example Custom Head File\n\nCustom head files give you access to Parsley logic and data access, this allows for a dynamic custom head per page.\n\n```markup\n<title>{{this._meta_title}}</title>\n\n<meta name=\"description\" content=\"{{this._meta_description}}\">\n<meta property=\"og:title\" content=\"{{this._meta_title}}\">\n<meta property=\"og:description\" content=\"{{this._meta_description}}\">\n\n(** setup an if check to use an og image if available, else default to brand image **)\n{{if {!this.og_image} }}\n<meta property=\"og:image\" content=\"{{this.og_image.getImage()}}\">\n{{else}}\n<meta property=\"og:image\" content=\"https://www.example.com/default-share-image.png\">\n{{end-if}}\n\n<link rel=\"icon\" type=\"image/png\" href=\"{{globals.site_icon.getImage()}}\">\n\n```\n\n### What Does this Overwrite?\n\nZesty.io automates the following tags in the head:\n\n* \\<title> My Title \\</title>\n* \\<meta name=\"description\" content=\"my description\">\n* \\<meta name=\"keywords\" content=\"my, keywords\"> (typically omitted)\n* \\<link rel=\"icon\" href=\"/path/to/favicon.png\">\n* Apple oriented icons: apple-touch-icon-precomposed .. sizes=\"72x72\",144x144\",\"114x114\"\n* Open Graph and Twitter Card Tags (when content is available)\n  * \\<meta property=\"og:title\" content=\"\">\n  * \\<meta name=\"twitter:title\" content=\"\">\n  * \\<meta name=\"twitter:site\" content=\"\">\n  * \\<meta name=\"twitter:creator\" content=\"\">\n  * \\<meta property=\"og:description\" content=\"\">\n  * \\<meta name=\"twitter:description\" content=\"\">\n  * \\<meta property=\"og:url\" content=\"\">\n  * \\<meta property=\"og:site\\_name\" content=\"\">\n  * \\<meta property=\"og:image\" content=\"\"> (if an image is available)\n  * \\<meta property=\"twitter:image:src\" content=\"\"> (if an image is available)\n\n### What is Still Automated?\n\nEven when overwriting, Zesty.io will still automate the following tags:\n\n* Language specific tags that point to alternate locales of content\n* main.css link to the auto transpiled css file (settings can overwrite this)\n* main.js link to the auto transpiled javascript file (settings can overwrite this)\n* Single head tags resources specific to the page scope [https://zesty.org/services/web-engine/meta-tags/custom-head-tags](https://zesty.org/services/web-engine/meta-tags/custom-head-tags)\n* RSS feed links\n* Google analytics script tags\n* UI selected Google Fonts\n* HTML Doc Types and Encodings\n\n\n\n****\\\n****\n\n","category":"guides","service":"webengine"},{"name":"Custom Head Tags","url":"/webengine/guides/web-engine/meta-tags/custom-head-tags","objectId":"-Lexp_wlFCKmA3zXKWox","item":[],"content":"---\ndescription: How to add custom head tags to more resources in Web Engine.\n---\n\n# Custom Head Tags\n\nHead tags can be added to content models, views, the instance (global), or content items. They can be used to set facebook open graph tags, twitter cards, script links, css links, favicons, etc.. This document will explain how they works, what they are for, and how to create them with the API.\n\n**There are 5 different types of head tags available in Zesty.io.** \\\n****Here is a list of each one with example output:\n\n1. **Meta** e.g. _\\<meta name=\"description\" content=\"my page description\" />_\n2. **Link** e.g. _\\<link rel=\"stylesheet\" type=\"text/css\" href=\"/site.css\" />_\n3. **Script** e.g. _\\<script type=\"text/javascript\" src=\"/site.js?v=43\">\\</script>_\n4. **Title** e.g. _\\<title>My Page Title\\</title>_\n5. **Style** e.g. _\\<style>body { background: orange } \\</style>_\n\nWe are going to go through each one, with a couple example output and how to create them with the API POST calls to the API.\n\n## Dynamic Values in Head Tags\n\nMeta, Title, Script, and Link tags may use dynamic reference to globals, settings, and content values.\n\n{% hint style=\"warning\" %}\nEven though values shown below use curly braces { } these are **not** Parsley references.\n{% endhint %}\n\n* **Settings** are accessed like `{settings.general.site_protocol}`\n* **Content** item values are accessed like `{this.my_title}`\n* **Globals** are accessed like `{globals.site_name}`\n* **Query Params** are accessed like **** `{query_param.key}` or `{get_var.key}`\n* **Path Parts** accessed like **** `{path_part.0}`  e.g. `/first/part/  {path_part.0} returns 'first'`\n* **Multiple** like this `\"my page is {this.title} from {globals.site_name}\"`\n\n**Examples**\n\n```markup\n<meta name=\"og:price\" content=\"${this.price}\">\n<link rel=\"stylesheet\" href=\"{settings.developer.bulma_cdn_link}\">\n<meta name=\"custom_verify\" href=\"{settings.yahoo.verify_hash}\">\n<meta name=\"foobar\" href=\"{globals.site_name}: {this.seo_meta_description}\">\n```\n\n### Custom Head Tag Loading\n\nCustom head tags load based on their resource type in this order:\n\n1. Instance Level\n2. View Level\n3. Model Level\n4. Item Level\n\nAt each level they ordered in ascending order by their `sort_order`\n\n### Bad Tag References\n\nIf a bad tag reference is used, a reference to a global, setting, or content item that doesn't exist, then a warning `(#bad reference {this.ref} #)` will be output in preview in the tag, on production sites an empty string will be returned.\n\n## Creating a Head Tag with the Rest API\n\nA simple post request to your instances REST API will create a head tag.\n\n{% swagger baseUrl=\"https://8-XyZ123-123xYz.api.zesty.io\" path=\"/v1/web/headtags\" method=\"post\" summary=\"Head Tag Creation\" %}\n{% swagger-description %}\nPost a Request with a raw JSON body. The JSON body requires 3 fields type (meta|link|script|style|title), attributes (key value object), and sortOder (integer). JSON body example given to create meta tag. More specific ones are available under each tag type.\n\n\\\n\n\n\n\n\\\n\n\nThis call adds a head tag immediately to Web Engine. A cache refresh in Web Engine is needed to see this the head tag appear. \n\n\\\n\n\n\n\n\\\n\n\nWhen added head tags to view resources, the tag needs to be added to each version of the view, production and stage. This is necessary for views like 404 pages, but content model views, apply the head tag to the resource ZUID of the content model.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" %}\nBearer XXXXXX (APP_SID Token)\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"raw\" type=\"object\" %}\n{ \n\n\\\n\n\n    \"type\": \"meta\",\n\n\\\n\n\n    \"resourceZUID\": \"8-XyZ-XyZ\"\n\n\\\n\n\n     \"attributes\": { \n\n\\\n\n\n           \"name\": \"description\",\n\n\\\n\n\n           \"content\": \"my page description\"\n\n\\\n\n\n     }, \n\n\\\n\n\n    \"sort\": 1 \n\n\\\n\n\n}\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## Working with Meta Tags\n\nMeta tags are for search engines, social media, browser compatibilities, viewport info, etc. \"Meta\" tags are essentially became a catch all for all sorts of configuration information. Zesty.io has no restriction on what type of meta tags you can add. Zesty.io also auto generates meta tags for social sharing and search engines based on your content, [learn more about that here.](./#automated-meta-tags)\n\n{% code title=\"A few meta tag output examples\" %}\n```markup\n<meta name=\"description\" content=\"my page description\" />\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<meta property=\"og:description\" content=\"Hello World Description\" />\n<meta name=\"viewport\" content=\"width=device-width, height=device-height\"/>\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"orange\" />\n```\n{% endcode %}\n\nAs you can see in the example, meta tags are versatile, everything from search engine info to hidden configurations for iPhone rendering. Meta tags are hidden and are low weight so they minimally affect page load time.\n\n#### Meta Tag Post Body Examples for the Rest API\n\nAttributes are open ended for meta tags, so any key:value pair can be added. Here are a few post body example to create a few of the examples above.\n\n{% code title=\"API Post body example for a Description Meta Tag\" %}\n```markup\n{\n\t\"type\": \"meta\",\n\t\"attributes\": {\n\t\t\"name\": \"description\",\n\t\t\"content\": \"This is my page description\"\n\t},\n\t\"sort\": 3,\n\t\"resourceZUID\": \"7-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n{% code title=\"API Post body example for an open graph description\" %}\n```markup\n{\n\t\"type\": \"meta\",\n\t\"attributes\": {\n\t\t\"property\": \"og:description\",\n\t\t\"content\": \"This is my page description\"\n\t},\n\t\"sort\": 2,\n\t\"resourceZUID\": \"7-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n{% code title=\"API Post body example for a Viewport Meta Tag\" %}\n```markup\n{\n\t\"type\": \"meta\",\n\t\"attributes\": {\n\t\t\"name\": \"viewport\",\n\t\t\"content\": \"width=device-width, height=device-height\"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"7-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n## Working with Script Head Tags\n\nScript tags a used to load javascript files on page. Since head tags can be applied to content models, views, items, or globally, this enables you as the developer to optimize what you load per page.&#x20;\n\n**Example Head Output**\n\n```markup\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js\"></script>\n```\n\n**Example Post Body to create script head tags with the Rest API**\n\n{% code title=\"API Post body example for a Javascript Script Link\" %}\n```markup\n{\n\t\"type\": \"script\",\n\t\"attributes\": {\n\t\t\"type\": \"text/javascript\",\n\t\t\"src\": \"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js\"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"8-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n## Working with Link Head Tags\n\nLink head tags a used to load CSS files, Icons,  Alternate Language URLs, etc.. Like general meta tags, link tags feel like open ended configuration tags, as shown in the example head output. Since head tags can be applied to content models, views, items, or globally, this enables you as the developer to set specific link tags to configure page differently and optimize them for search engines and mobile rendering.&#x20;\n\n**Example Head Output**\n\n```markup\n<link type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-grid.css\" />\n<link rel=\"canonical\" href=\"https://www.example.com/\" />\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"https://www.example.com/favicon.png\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://www.example.com/feed.xml\" title=\"RSS Feed\" />\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Font+Name\">\n```\n\n**Example Post Body to Create Links with the Rest API**\n\nAttributes are open ended for link tags, so any can be added. Here are a few post body example to create a few of the examples above.\n\n{% code title=\"API Post body example for Link Tag for a CSS File\" %}\n```markup\n{\n\t\"type\": \"link\",\n\t\"attributes\": {\n\t\t\"rel\": \"stylesheet\",\n\t\t\"href\": \"https://fonts.googleapis.com/css?family=Font+Name\"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"8-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n{% code title=\"API Post body example for Link Tag for a CSS File\" %}\n```markup\n{\n\t\"type\": \"link\",\n\t\"attributes\": {\n\t\t\"type\": \"text/css\",\n\t\t\"href\": \"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-grid.css\"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"8-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n{% code title=\"API Post body example for a Link Tag for an Icon\" %}\n```markup\n{\n\t\"type\": \"link\",\n\t\"attributes\": {\n\t\t\"rel\": \"apple-touch-icon-precomposed\",\n\t\t\"sizes\": \"114x114\",\n\t\t\"href\": \"https://www.example.com/favicon.png\"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"8-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n## Working with Title Head Tags\n\nTitle tags are linear, and offer one type. Title tags only accept one key value attribute \"value\".\n\n**Example Head Output**\n\n```markup\n<title>My Page Title</title>\n```\n\n**Example Post Body to create a head tags with the Rest API**\n\n{% code title=\"API Post body example for a creating a Title Tag\" %}\n```markup\n{\n\t\"type\": \"title\",\n\t\"attributes\": {\n\t\t\"value\": \"My Page Title\"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"7-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n## Working with Style Head Tags\n\nStyle tags are linear, and offer one type and way to use them. Style tags only accept one key value attribute \"value\".\n\n**Example Head Output**\n\n```markup\n<style>\n    body {\n        background: orange;\n    }\n</style>\n```\n\n**Example Post Body to create a style tag with the Rest API**\n\n{% code title=\"API Post body example for a creating a Title Tag\" %}\n```markup\n{\n\t\"type\": \"style\",\n\t\"attributes\": {\n\t\t\"value\": \" body { background: orange;} \"\n\t},\n\t\"sort\": 1,\n\t\"resourceZUID\": \"7-XyZ-Xyz\"\n}\n```\n{% endcode %}\n\n##\n\n## How to See all the Head Tags on a Content Instance\n\nTo see all the head tags on a content instance, make a Get request to the REST API endpoint `/v1/web/headtags`\n\n{% swagger baseUrl=\"https://8-XyZ123-123xYz.api.zesty.io\" path=\"/v1/web/headtags\" method=\"get\" summary=\"Get Head Tags\" %}\n{% swagger-description %}\nThis endpoint allows you to view all the head tags you have on a content instance. Note, if you are logged into Zesty.io you can navigate to this get endpoint in your browser. Replace \n\n`8-XyZ123-123xYz`\n\nwith your Instance ZUID.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" %}\nBearer XXXXXXXX (User Session Token)\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Cake successfully retrieved.\" %}\n```javascript\n{\n    _meta: {\n        timestamp: \"2019-05-15T23:36:07.065882486Z\",\n        totalResults: 1,\n        start: 0,\n        offset: 0,\n        limit: 1\n    },\n    data: [\n    {\n        ZUID: \"21-xYz123-123XyZ\",\n        type: \"meta\",\n        attributes: {\n            content: \"This is my custom title!\",\n            name: \"og:title\"\n        },\n        resourceZUID: \"7-xYz123-xYz123\", // Model|Instance|View|Item \n        sort: 0,\n        createdByUserZUID: \"5-xYz123-xYz123\",\n        updatedByUserZUID: \"5-xYz123-xYz123\",\n        createdAt: \"2019-05-13T21:12:13Z\",\n        updatedAt: \"2019-05-13T21:12:36Z\"\n    }]\n}\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## Updating a Head Tag\n\nTo get a head tag ZUID, call the get endpoint to see all the head tags and their ZUIDs.&#x20;\n\n{% swagger baseUrl=\"https://8-XyZ123-123xYz.api.zesty.io\" path=\"/v1/web/headtags/:headTagZUID\" method=\"put\" summary=\"Put Head Tag\" %}\n{% swagger-description %}\nPut updates the head tag in Web Engine immediately. A cache refresh in Web Engine is needed to see an update. Put will replace all attributes with the attributes you pass.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\":headTagZUID\" type=\"string\" %}\nuse the Get All Head Tags call to find the ZUID of the tag you wish to delete.\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" %}\nBearer XXXXXXX (user session token)\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"raw\" type=\"string\" %}\n{\n\n\\\n\n\n  \"type\": \"meta\",\n\n\\\n\n\n  \"sort\" : 2,\n\n\\\n\n\n  \"attributes\" : {\n\n\\\n\n\n     \"name\" : \"description\",\n\n\\\n\n\n     \"content\" : \" hello world\"\n\n\\\n\n\n  }\n\n\\\n\n\n }\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n\n{% swagger-response status=\"500\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n\n## Deleting a Head Tag\n\n{% swagger baseUrl=\"https://8-XyZ123-123xYz.api.zesty.io\" path=\"/v1/web/headtags/:headTagZUID\" method=\"delete\" summary=\"Delete Head Tag\" %}\n{% swagger-description %}\nRemoves a head tag immediately from Web Engine. A cache refresh in Web Engine is needed to see this update.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"path\" name=\":headTagZUID\" type=\"string\" %}\nuse the Get All Head Tags call to find the ZUID of the tag you wish to delete.\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" %}\nBearer XXXXXXX (user session token)\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n","category":"guides","service":"webengine"},{"name":"Open Graph and Twitter Card Meta Tags","url":"/webengine/guides/web-engine/meta-tags/open-graph-twitter-card-meta-tags","objectId":"-LLJ2ESxZqnk5izHQXJ7","item":[],"content":"# Open Graph and Twitter Card Meta Tags\n\n## Open Graph and Twitter\n\n### Open Graph (Facebook) and Twitter Card Meta tags\n\nOpen graph and Twitter Cards are automatically generated in Zesty.io. This document will explain how they load automatically and how you can override them.\n\n### Automated tags\n\nAll content items with a view and URL route in Zesty.io will have a title, description, and keywords associated with them. The tags produced in the header by these are:\n\n```markup\n<title>{seo_meta_title}</title>\n<meta name=\"description\" content=\"{seo_meta_title}\">\n<meta name=\"keywords\" content=\"{seo_meta_keywords}\">\n```\n\nThese value will be used to auto fill in Open Graph and Twitter Cards tags.\n\n**Facebook Open Graph Tags**\n\n```markup\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"{seo_meta_title}\">\n<meta property=\"og:description\" content=\"{seo_meta_description}\">\n<meta property=\"og:url\" content=\"[fully_qualified_url:automated]\">\n<meta property=\"og:site_name\" content=\"{clippings:site_name}\">\n```\n\n**Facebook Open Graph Tags when an Image exists**\n\n```markup\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"{seo_meta_title}\">\n<meta property=\"og:description\" content=\"{seo_meta_description}\">\n<meta property=\"og:url\" content=\"[fully_qualified_url:automated]\">\n<meta property=\"og:image\" content=\"[default_image:automated]\">\n<meta property=\"og:image:width\" content=\"1200\">\n<meta property=\"og:image:height\" content=\"630\">\n<meta property=\"og:site_name\" content=\"{clippings:site_name}\">\n```\n\n**Twitter Card Tags**\n\n```markup\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:creator\" content=\"{settings_twitter_handle}\">\n<meta name=\"twitter:title\" content=\"{seo_meta_title}\">\n<meta property=\"twitter:description\" content=\"{seo_meta_description}\">\n```\n\n**Twitter Card Tags when an Image exists**\n\n```markup\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:creator\" content=\"{settings_twitter_handle}\">\n<meta name=\"twitter:title\" content=\"{seo_meta_title}\">\n<meta property=\"twitter:description\" content=\"{seo_meta_description}\">\n<meta name=\"twitter:card\" content=\"summary_large_image\">\n<meta property=\"twitter:image:src\" content=\"[default_image:automated]\">\n<meta property=\"twitter:image:width\" content=\"1200\">\n<meta property=\"twitter:image:height\" content=\"630\">\n```\n\n**How** `[default_image:automated]` **is Derived**\n\nZesty.io will look for the first created content field that has a reference name that includes the string `image` or `img`. For example, a content field with the reference name `hero_image` would be a candidate. When there are multiple references with `image` or `img` in the name, Zesty.io will pick the first one created.\n\nImages auto resize (cropped) to work with a 1200 pixel width and a 630 pixel height per Facebook's recommendation [https://developers.facebook.com/docs/sharing/webmasters/images/](https://developers.facebook.com/docs/sharing/webmasters/images/).\n\n### How to Override Open Graph and Twitter Card Tags\n\nYou may override an Open Graph or Twitter Card meta tag on content models items by adding specific content fields to the model.\n\n#### OG/Twitter Title\n\nIf you add a `content field` to a `model` named `og_title`, it will use that as the default for for the Open Graph meta title, and Twitter Card meta title. If a customer does not, it will default to the models `meta title`, which exists for every `model` with a view and route. If the customer wants a specific Twitter Card meta title, they can create a `content field` named `tc_title` on the `model`. NOTE: this will only apply to Twitter card, and will not default to Open Graph. If only `tc_title` exists, the Open Graph title will still default to the `meta_title`.\n\n```markup\n<meta name=\"og:title\" content=\"{og_title|seo_meta_title}\">\n<meta name=\"twitter:title\" content=\"{tc_title|og_title|seo_meta_title}\">\n```\n\n#### OG/Twitter Description\n\nThe same applies for the Open Graph description and Twitter Card description, which can be overridden with `og_description` and `tc_description`.\n\n```markup\n<meta name=\"og:description\" content=\"{og_description|seo_meta_description}\">\n<meta name=\"twitter:description\" content=\"{tc_description|og_description|seo_meta_description}\">\n```\n\n#### OG/Twitter Images\n\nFor Open Graph and Twitter Card images, it follows the same fallback logic and uses `og_image` and `tc_image` as the custom name. For images, if there is not `og_image` or `tc_image` tag, it will default to the first created content field with `image` or `img` in its reference name.\n\n```markup\n<meta name=\"og:image\" content=\"{og_image|[default_image:automated]}\">\n<meta name=\"twitter:img:src\" content=\"{tc_image|og_image|[default_image:automated]}\">\n```\n","category":"guides","service":"webengine"}],"content":"---\ndescription: >-\n  Developer option to overwrite the automated meta, title, and og:tags <head>\n  tags with a Parsley snippet file.\n---\n\n# Custom Head Overwrite\n\n## What is an Automated Head?\n\nZesty.io automates the creation \\<head> tags, which include \\<title> \\<meta> and \\<og:title> like tags to automate the optimization of search engine indexing. There are times when you may want to customize these tags and not rely on Zesty.io to produce them. If you want to overwrite the automated head tags, follow this tutorial.\n\n### How to Setup a Custom Head File and Overwrite the Automated Meta\n\nFour steps to overwrite the head:\n\n1. Create a **text** setting in the category **developer** with the key **overwrite\\_head (**[**see API Docs**](https://instances-api.zesty.org/?version=latest#588eccb2-8f3a-482d-b2dd-cfc9a2be93e9)**)**\n2. In the code editor, create a new _snippet_ file , lets call it \"**custom\\_head**\" (you can call it anything)\n3. In settings, change the new setting's (overwrite\\_head) value to **\"custom\\_head**\", save the setting. \\\n   **This turns on the overwrite.**\n4. In the code editor, add your custom tags to the \"**custom\\_head**\" snippet you created in step 2,  and then save and publish it.\n\n{% hint style=\"warning\" %}\n**Important:** add a value to the **developer.head\\_overwrite** will immediately switch your WebEngine pages renders over to using a custom head. You can prepare the snippet before editing your setting**.** Once setup, overwriting automated head tags lets you control this portion of the \\<head> through a versioned view snippet, this means you need to publish the snippet to see changes to a production site.\n{% endhint %}\n\n### Example Custom Head File\n\nCustom head files give you access to Parsley logic and data access, this allows for a dynamic custom head per page.\n\n```markup\n<title>{{this._meta_title}}</title>\n\n<meta name=\"description\" content=\"{{this._meta_description}}\">\n<meta property=\"og:title\" content=\"{{this._meta_title}}\">\n<meta property=\"og:description\" content=\"{{this._meta_description}}\">\n\n(** setup an if check to use an og image if available, else default to brand image **)\n{{if {!this.og_image} }}\n<meta property=\"og:image\" content=\"{{this.og_image.getImage()}}\">\n{{else}}\n<meta property=\"og:image\" content=\"https://www.example.com/default-share-image.png\">\n{{end-if}}\n\n<link rel=\"icon\" type=\"image/png\" href=\"{{globals.site_icon.getImage()}}\">\n\n```\n\n### What Does this Overwrite?\n\nZesty.io automates the following tags in the head:\n\n* \\<title> My Title \\</title>\n* \\<meta name=\"description\" content=\"my description\">\n* \\<meta name=\"keywords\" content=\"my, keywords\"> (typically omitted)\n* \\<link rel=\"icon\" href=\"/path/to/favicon.png\">\n* Apple oriented icons: apple-touch-icon-precomposed .. sizes=\"72x72\",144x144\",\"114x114\"\n* Open Graph and Twitter Card Tags (when content is available)\n  * \\<meta property=\"og:title\" content=\"\">\n  * \\<meta name=\"twitter:title\" content=\"\">\n  * \\<meta name=\"twitter:site\" content=\"\">\n  * \\<meta name=\"twitter:creator\" content=\"\">\n  * \\<meta property=\"og:description\" content=\"\">\n  * \\<meta name=\"twitter:description\" content=\"\">\n  * \\<meta property=\"og:url\" content=\"\">\n  * \\<meta property=\"og:site\\_name\" content=\"\">\n  * \\<meta property=\"og:image\" content=\"\"> (if an image is available)\n  * \\<meta property=\"twitter:image:src\" content=\"\"> (if an image is available)\n\n### What is Still Automated?\n\nEven when overwriting, Zesty.io will still automate the following tags:\n\n* Language specific tags that point to alternate locales of content\n* main.css link to the auto transpiled css file (settings can overwrite this)\n* main.js link to the auto transpiled javascript file (settings can overwrite this)\n* Single head tags resources specific to the page scope [https://zesty.org/services/web-engine/meta-tags/custom-head-tags](https://zesty.org/services/web-engine/meta-tags/custom-head-tags)\n* RSS feed links\n* Google analytics script tags\n* UI selected Google Fonts\n* HTML Doc Types and Encodings\n\n\n\n****\\\n****\n\n","category":"guides","service":"webengine"},{"name":"30X Redirects","url":"/webengine/guides/web-engine/30x-redirects","objectId":"-LMdkh8bFw28T8ttZkWP","item":[],"content":"# 30X Redirects\n\n## How Do Redirects work on Zesty.io Web Engine?\n\nRedirects are created and managed inside the Content Manager. In the Manager's  SEO section, you can add and maintain 301 and 302 redirects.\n\nRediects are especially helpful when you've changed the URL of a page or resource. When URLs are changed users might still have links to those old URLs. When accessed those old URLs will 404 if a redirect is not in place. When a redirect has been created the browser will automatically send the user to the new page (instead of terminating at the 404 page).\n\nNew redirects are created in the Manager's `/seo` section. First in the From field enter the relative path that you want to redirect from, then select the redirect type: 301 (permanent move) or 302 (temporary move), lastly select the target or To URL from the dropdown. Once your fields are filled out click the green Create Redirect button.\n\n![Interface for creating rediects.](../../../.gitbook/assets/redirect-form.png)\n\n### Redirect Formats\n\n| Type                    | Example: Old Path => New Path                 |\n| ----------------------- | --------------------------------------------- |\n| Path                    | `/this/` => `/that/`                          |\n| Path _(with wildcards)_ | `/old/path/*/*/` => `/new/$1/$2/path`         |\n| Page (zuid)             | `/old-about/` => `7-xyz-x1y2z3`               |\n| External                | `/redirect-away/` => `https://www.google.com` |\n\n{% hint style=\"info\" %}\n_All redirects will pass query parameters. For example_: _ `/this/?hello=world` will becomes `/that/?hello-world`_\n{% endhint %}\n\n### Path Redirects\n\nA basic path redirect is a statically typed path to another statically typed path. For example:\n\n{% code title=\"redirect:path\" %}\n```elixir\n/old/path/\n```\n{% endcode %}\n\n{% code title=\"redirect:target\" %}\n```erlang\n/my/new/path/?a=1&b=2\n```\n{% endcode %}\n\nAny request to `/old/path/` will redirect to `/my/new/path/?a=1&b=2`\n\n**API Documentation for path redirects:**\\\n****[https://instances-api.zesty.org/#38bf3fb8-44b1-4b22-a743-376c42fda624](https://instances-api.zesty.org/#38bf3fb8-44b1-4b22-a743-376c42fda624)\n\n### Path Redirects with Wildcards\n\nA path redirect with wildcards is a statically typed path with an asterisk(s) which can catch any path and pass it forward into a new dynamically built path. For Example:\n\n{% code title=\"redirect:path\" %}\n```elixir\n/old/*/*/\n```\n{% endcode %}\n\n{% code title=\"redirect:target\" %}\n```erlang\n/new/$1/$2/\n```\n{% endcode %}\n\n**Example Redirect Results Table**\n\n| Incoming Request Path  | Redirect Path          |\n| ---------------------- | ---------------------- |\n| `/old/foo/bar/`        | `/new/foo/bar/`        |\n| `/old/apples/oranges/` | `/new/apples/oranges/` |\n\nAnother path building example with Wildcard Paths\n\n{% code title=\"redirect:path\" %}\n```erlang\n/old/*/*/\n```\n{% endcode %}\n\n{% code title=\"redirect:target\" %}\n```erlang\n/$1-$2/\n```\n{% endcode %}\n\n**Example Results Table**\n\n| Incoming Request Path | Redirect Path |\n| --------------------- | ------------- |\n| /old/hello/world/     | /hello-world/ |\n| /old/foo/bar/         | /foo-bar/     |\n\n**Other ideas for redirects**\n\n| **Path Examples** | Target Examples |\n| ----------------- | --------------- |\n| /old/\\*/\\*/       | /search/?q=$2   |\n| /\\*/\\*/\\*/        | /$2-$1-$3/      |\n\n**API Documentation for wild card path redirects:** \\\n[https://instances-api.zesty.org/#4e35194e-ce30-43a0-bfe2-91bc76e5a627](https://instances-api.zesty.org/#4e35194e-ce30-43a0-bfe2-91bc76e5a627)\n\n### Page Redirects\n\nPage redirects take in a static string string for the path like `/my/old/path` and a content ZUID as the target. The static path will always redirect to whatever the content ZUIDs current path is, even if the content ZUID referenced has its path change through version, the redirect will always follow it.\n\n**API documentation for page redirects:** \\\n[https://instances-api.zesty.org/#9dbf6a75-cb3e-4292-850b-1e78979bd035](https://instances-api.zesty.org/#9dbf6a75-cb3e-4292-850b-1e78979bd035)\n\n### External Redirects\n\nPage redirects take in a static string string for the path like `/my/old/path` and a content ZUID as the target. The static path will always redirect to whatever the content ZUIDs current path is, even if the content ZUID referenced has its path change through version, the redirect will always follow it.\n\n**API Docs for External Redirect:** \\\n[https://instances-api.zesty.org/#0e1a4940-3d7f-4e59-bd3d-9b06be44d9a3](https://instances-api.zesty.org/#0e1a4940-3d7f-4e59-bd3d-9b06be44d9a3)\n\n### Redirects API Documentation\n\nSee how to create the 4 types of redirect from our REST documentation  [https://instances-api.zesty.org/#1fdabbe3-e977-4ea5-8a4b-81ce29598263](https://instances-api.zesty.org/#1fdabbe3-e977-4ea5-8a4b-81ce29598263)&#x20;\n","category":"guides","service":"webengine"},{"name":"Security","url":"/webengine/guides/web-engine/security","objectId":"-MQDMxJ9dpferFQdKO2S","item":[],"content":"---\ndescription: >-\n  Authentication headers and Preview Lock protects your preview URL from being\n  freely accessed and misused.\n---\n\n# Security\n\n## Stage Preview Lock Protection\n\nThe WebEngine preview URL is locked from public consumption. As such it will only render if:\n\n1. &#x20;The user is logged in _and_ has access to that instance.&#x20;\n2. A valid password has been provided. This password is set by via the [Settings](https://zesty.org/services/manager-ui/settings)  under `security` , a user may enter the password to start a verified session.\n\n{% hint style=\"info\" %}\n**Any instance created on or after Jan 1, 2021 is automatically locked.** If your instance is older and you would like Preview Lock Protection, please reach out to support.&#x20;\n{% endhint %}\n\nOnce a user is verified by (via password or their user login session), a unique device imprint cookie _ZVerified_ is created and is used to quickly bypass the preview lock for every network request.\n\nPreview Lock Protection exists to protect your un-published changes and to prevent users from using the preview URL in production.\n\n#### Preview Lock Protection Password\n\nFor Instances created before Jan 1, 2021, contact your account manager, as you will need a setting  added to your instance. Once the Preview Lock Password text field has been added your preview URL will be password protected.\n\n![](../../../.gitbook/assets/preview-lock-password.png)\n\n#### Setting a Preview Lock Protection Password\n\nWhen the preview URL is being accessed by non-authenticated Zesty users, you may set a Preview Lock Password which prompts an unauthenticated user to enter a password. They may try 5 times before being locked out.&#x20;\n\n#### **Linking with a Password**\n\nIf the ability to pass the preview lock password as a get parameter is required for internal sharing or for internal authenticated workflow (Jira, Private Github, Etc), then a password can be passed with the `zpw` query param like:\n\n`https://HASH-dev.webengine.zesty.io/?zpw=12345`\n\nwhere `12345` is whatever the preview lock password is. The user that opens that link will be authenticated for their browsing session, and will be able to free view the site without entering a password.\n\nThis also works for headless testing against the preview environment.&#x20;\n\n## Production Authentication Headers\n\n&#x20;Production sites can be blocked by forcing an authorization header to be added to each request like`Authorization: bearer [SECRET KEY]` . Authorization headers can be edited in manager ui > settings > security\n\n**Headless Authorization** will be applied to Instant, Headless, and GQL APIs.\n\n**Full WebEngine Authorization** will be applied to every request. This setting will collide with Headless Authorization, therefore, headless authorization needs to be removed when using Full WebEngine authorization.\n\n{% hint style=\"warning\" %}\nAdding authorization secret key reflect immediately in production site and will block public access. Pages that are already cached will need to be [purged ](environment-states-and-caching-behaviors.md#ways-to-purge-refresh-the-cache-of-your-instance)for required authentication to take effect.\n{% endhint %}\n\n![Editable in manager ui > settings > security](<../../../.gitbook/assets/image (87).png>)\n\n","category":"guides","service":"webengine"},{"name":"Caching","url":"/webengine/guides/web-engine/caching","objectId":"LEnNWrbgnaBq96e1Suth","item":[],"content":"---\ndescription: 'Zesty.io: Caching Document which describes the details of caching web requests'\n---\n\n# Caching\n\n**Note**: For a general overview of caching we recommend starting with the [MDN HTTP caching ](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching)article.\n\n![](https://lh6.googleusercontent.com/HtF0LS2OJcOrwgOuWiyS1ioAZr0vLbNVbnal3kH57SBdtEIY32cM7KaoFiZ0GL9abrCLgdfnJXxVX3A\\_1Yuh-oTN94RnDWxAdRxctfMcHlyRT3fBbG3PcV1lTtb0w6sw7dBxtRw)\n\n## Caching Instructions&#x20;\n\nWhen responding to a web request HTTP headers are used as instructions to any caches within the request chain on how they should behave with regards to whether they should cache the response and for how long. Here are the primary headers to be aware of when considering caching.\n\n### Cache-Control&#x20;\n\n[**Cache-Control - HTTP | MDN**](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)\n\nCurrently the standard header to use when instruction caches on how they should behave. Cache-Control uses \"directives\" which are the specific values that instruct the caches. Read [April King — Cache-Control Recommendations](https://grayduck.mn/2021/09/13/cache-control-recommendations/) for more information on Cache-Control directives.\n\n### Pragma - Deprecated&#x20;\n\n[**Pragma - HTTP | MDN**](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma)\n\nPragma provides backward compatibility to HTTP 1.0. Cache-Control should be preferred when possible.\n\n## Caching Layers&#x20;\n\nWhen fulfilling web requests there are many locations at which the request can be cached. In this document we attempt to make an exhaustive list of locations to keep in mind when thinking through request chains and where/when they are cached.\n\n### Query Caching&#x20;\n\nZesty.io WebEngine is an origin service for web traffic. In order to keep this service performant we back it with an in-memory cache. When WebEngine fulfills a request it needs to resolve the requested pages data. These resolved queries are kept in the Query Cache. This is an important detail as it means whenever we need to invalidate a cache object we need to also invalidate the related Query Cache. This ensures that when that cache object is requested next the latest data is returned vs the potentially stale cache data.\n\n### Intermediates&#x20;\n\nFrom the Zesty.io Cloud CDN to our origin we are aware of all the intermediary caches but may not necessarily control them. For example, we host WebEngine on GAE: Google App Engine which contains a cache which is enacted whenever responses contain a Cache-Control header. We do not have any control over the behavior of this cache beyond what the Cache-Control instructions are.\n\nBeyond the infrastructure within our control it is possible for there to be other intermediaries. Especially with customers running private infrastructure in front of the origin. It's important to understand this fact as when we debug caching issues any caches in between can be the cause of unknown behaviors.\n\n### **CDN:** Content Delivery Network&#x20;\n\nAs designed, CDNs cache responses to request they service. While we have control over the CDN we manage, we often will need to coordinate with customers to ensure their CDN is configured correctly to ensure proper caching behavior.\n\n#### Zesty.io Cloud&#x20;\n\nThis offering is our out-of-the-box solution for customers. It contains all the necessary components of our architecture already configured and running.\n\nThis infrastructure is what powers our \\*.zesty.dev vanity domains. Meaning it is present and used by customers whether they operate a Private Cloud or not.\n\n#### Zesty.io Private Cloud&#x20;\n\nThis offering is for customers who want to maintain control over the data in transit and at rest for their web properties.\n\n### Browser&#x20;\n\nBrowsers usually provide a cache as well. These are typically informed by the headers on responses. This is a layer which can often be overlooked.\n\n## Cache Time-to-Live (TTL)&#x20;\n\nTTL: time-to-live is the concept of how long a particular response should remain a cache object before the cache invalidates it and fetches the latest. Regardless of if it was explicitly purged. Learn more about TTL in the [Fastly Cache freshness and TTLs | Fastly Developer Hub](https://developer.fastly.com/learning/concepts/cache-freshness/) support article.\n\nOne important aspect when determining what TTL value should be set is thinking about the type of data being returned. Most often the primary concern is how likely is the data to change over time.\n\nFor example; the data which makes the image [https://brand.zesty.io/zesty-io-logo-vertical.png](https://brand.zesty.io/zesty-io-logo-vertical.png) is unlikely to change overtime. Therefore a long TTL, e.g. 1 year, would be appropriate.\n\nBut the data for the URL [https://www.zesty.io/sitemap.xml](https://www.zesty.io/sitemap.xml) may change often. As we can imagine new articles being published and altering the sitemap. Therefore a short TTL would be more appropriate, e.g. 24 hours.\n\nSome URLs should never be cached. For example; [https://\\{{instance\\_zuid\\}}.api.zesty.io/v1/content/models/\\{{content\\_model\\_zuid\\}}/items](https://\\{{instance\\_zuid\\}}.api.zesty.io/v1/content/models/%7B%7Bcontent\\_model\\_zuid%7D%7D/items) is an API responses which can change often, sometimes hourly.\n\n## Cache Destruction\n\n&#x20;When a change is desired to be public it needs to be published. Publishing involves the process of telling all pertinent caches that the prior cache object is no longer valid and the next time the data is requested it should re-fetch the latest.\n\nThere are typically two events which start this process;\n\n### Publish&#x20;\n\nThe most common event for triggering cache destruction. It is an action which immediately communicates to caches telling them the specified cache object is no longer valid.\n\n### Schedule&#x20;\n\nScheduling is just a delayed publish. This event adds additional layers of architecture to achieve this. We operate a Scheduler which takes a job to be run at a specific time. The job being the specific publish event we want to occur.\n","category":"guides","service":"webengine"},{"name":"Hybrid CDN Setup","url":"/webengine/guides/web-engine/hybrid-cdn-setup","objectId":"-MBp7GLDbpT_FrQvR1_K","item":[],"content":"---\ndescription: Setup your Zesty.io content instance to load through your CDN.\n---\n\n# Hybrid CDN Setup\n\nThis guide will cover setting up your content instance domain, your CDN to route to a Zesty.io origin, and testing cache purging. Note this is an enterprise feature and needs to be configured by the Zesty.io team for purging to work properly.  &#x20;\n\n## 1.) Setting Up Your Domain\n\nFollow the link below to setup your [Content Instance's domain](../../../instances/guides/how-tos/how-to-launch-an-instance.md#1-set-a-custom-domain-name).\n\n{% content-ref url=\"../../../instances/guides/how-tos/how-to-launch-an-instance.md\" %}\n[how-to-launch-an-instance.md](../../../instances/guides/how-tos/how-to-launch-an-instance.md)\n{% endcontent-ref %}\n\n## 2.) Accessing Your WebEngine Origin\n\nThe WebEngine origin is a special domain that routes  Zesty.io WebEngine which renders published content, code, and API endpoints.  You provide this domain to your CDN configuration.&#x20;\n\nOnce your domain is setup in step 1, you will use that domain to find your custom origin url. For example, if you setup `mydomain.com`, your origin would be `mydomain-com.webengine.origin.zesty.zone`\n\n## 3.) Configuring your CDN\n\nUse your `mydomain-com.webengine.origin.zesty.zone`equivalent as the origin or host in your property settings. You may access this origin in https or http. Be sure to use the correct protocol based on if you are serving TLS.\n\n**Cache Headers:** Configure the CDN property rule to respect cache headers for the specific Zesty.io origin. If you are setting it to a specific path (subdirectory like /blog/) and have multiple rules on a property, ensure that only that specific rule. If you are setting up Zesty.io on a sub-directory be sure to test that you are not chancing caching for your other sud-directory properties before deploying.\n\n**HTTPS Setup:** When requesting HTTPS, you need to reference the public CA (certificate authority) bundle into your configuration. Some services like Akamai will have a button to pull the origin CA automatically. For other services, you make need to request\n\n**HTTPS Redirect:** For HTTPS redirect, set a rule in your property configuration for 301 redirect with query parameters to the https version. (for example http://mydomain.com/?utm\\_campaign=12345 redirects to https://mydomain.com/?utm\\_campaign=12345)&#x20;\n\n**WWW Redirect:** If you are servicing an apex domain like https://mydomain.com as http://www.mydomain.com, you will need to set a rule to 301 redirect with the query string (for example https://mydomain.com/?utm\\_campaign=12345) to the www version of the domain or the non-www version, whatever your preference is. Whatever version of the domain you chose, you can set the www behavior in manager ui > settings > general. This will ensure your canonical tags match your desired domain.&#x20;\n\n### Hybrid CDN data flow visualization\n\n![](<../../../.gitbook/assets/Screen Shot 2021-06-09 at 9.07.31 PM.png>)\n\n## 4.) Configure Purging\n\nFor Zesty.io to custom purge your CDN service, you will need to provide the Zesty.io EcoSystem which your content instance is associated with a purge url. That purge URL need to accept a POST request with a JSON raw body payload that looks like:\n\n```javascript\n{\n      \"objects\": [\n          \"CACHE-KEY\",\n          \"ZUID\"\n     ]\n}\n```\n\nA simple payload is an array of strings, which are often ZUIDs in Zesty.io. Page resources that WebEngine renders are tagged with ZUIDs in header tags for CDNs to located them directly.\n\nTo secure this endpoint from being called, you may optional setup a secret key, which zesty will post as the header `X-Auth` that value can be saved to Zesty.io along with your purge url endpoint.\n\n```\n--header 'X-Auth: xxxxx'\n```\n\n### Akamai Purge\n\nZesty.io automatically adds [ZUIDs](../../../introduction/guides/getting-started/zuids.md) to headers that are recognized by Akamai. Akamai refers to them as `edge-cache-tags.` Learn more about Edge Cache Tags from [Akamai's documentation](https://learn.akamai.com/en-us/webhelp/fast-purge/fast-purge/GUID-64272BAE-BCB0-4F84-BA5A-8A21549A347D.html).&#x20;\n\nSetup API tokens with administrator access. This will be needed to run a purge\n\nZesty.io has an open-source project for Akamai purge which you can use with your own API keys. Deploy a Google Cloud function with this [https://github.com/zesty-io/akamai-tag-Americapurge](https://github.com/zesty-io/akamai-tag-purge)\n\n### Fastly Purge\n\nZesty.io automatically adds [ZUIDs](../../../introduction/guides/getting-started/zuids.md) to headers that are recognized by Fastly. Fastly refers to them as `surrogate-keys.` Learn more about Purging Surrogate keys from [Fastly's documentation](https://developer.fastly.com/reference/api/purging/).&#x20;\n\nSetup an API token with purge access. This will be needed to run a purge on your custom endpoint.\n\n### Need Help?\n\nHybrid is an enterprise offering from Zesty.io, please reach out to support for help or clarification.\n\n## 5.) Updating Zesty.io to Send the Purge Request\n\nWhen you have a purge function deployed and have tested that you can post a payload to it to trigger a cache purge, you will then want to update Zesty.io to know about the URL and the x-auth key. Rest API documentation can be found here [https://accounts-api.zesty.org/?version=latest#d1864580-86f7-4ff4-afdd-edea5563992a](https://accounts-api.zesty.org/?version=latest#d1864580-86f7-4ff4-afdd-edea5563992a)\n\nOnce added, code and content updates will automatically run your purge request.\n\n{% hint style=\"info\" %}\nNote that clicking the Clear Cache buttons in the Manager UI will ultimately trigger a cache purge in your configured CDN\n{% endhint %}\n\n{% swagger baseUrl=\"https://accounts.api.zesty.io/v1/ecosystems/35-xyz-xyzxyz?action=updateCDNDefaults\" path=\"\" method=\"post\" summary=\"Update EcoSystem to run a remote Purge URL\" %}\n{% swagger-description %}\nYour Post Body looks like: \n\n\\\n\n\n\n\n`{`\n\n \n\n\\\n\n\n  \n\n`\"defaultCDNType\": \"AKAMAI\",`\n\n \n\n\\\n\n\n  \n\n`\"defaultCDNPurgeURL\": \"https://location-of-cloud-purge-function.com\",`\n\n \n\n\\\n\n\n  \n\n`\"defaultCDNPurgeAuth\": \"SECRET_KEY\"`\n\n\\\n\n\n`}`\n\n\\\n\n\n\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Authorization\" type=\"string\" %}\nBearer XXXXX\n{% endswagger-parameter %}\n\n{% swagger-parameter in=\"body\" name=\"Raw Body\" type=\"string\" %}\nPass a body as described in the description above.\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"\" %}\n```\n```\n{% endswagger-response %}\n{% endswagger %}\n","category":"guides","service":"webengine"},{"name":"Zesty URLs & Their Functionality","url":"/webengine/guides/web-engine/zesty-urls-and-their-functionality","objectId":"fMHbjYnYNmZzsv3CHa5G","item":[],"content":"---\ndescription: Zesty URLs return preview or production content based on environment.\n---\n\n# Zesty URLs & Their Functionality\n\nThere are several URLs at your disposal for each of your instances. These can be used in a variety of circumstances specific to the environment's needs, for example, production versus development.\\\n\\\nAll domains are added to an Instance in the Accounts interface. As part of the URLs features, Zesty offers the creation of domains that utilize the top-level domain: `zesty.dev`. This allows for the creation of dev environment domains at the point initialization of an instance. All domains added to an Instance that **do not** utilize the Zesty top-level domain will need to have their DNS configured and will need to be a valid owned, domain in order to be applied.\\\n\n\n![URL Sections with Zesty vanity top-level domain](<../../../.gitbook/assets/Url Sections.png>)\n\n## Types of URLs <a href=\"#types_of_urls\" id=\"types_of_urls\"></a>\n\nThere are different types of URLs, that deliver different content based on environment. Below will cover each type and use case.\n\n1. **Webengine Preview URL** - Dev Branch\n2. **Produciton URL** - Live Branch\n3. **Origin URLs** - Hybrid CDN setup, Live Branch\n\n### Webengine Preview URL <a href=\"#webengine_preview_url\" id=\"webengine_preview_url\"></a>\n\nThe Webengine Preview URL was designed to provide a preview of current published content along with any saved drafts of content that is not yet live. This provides a detailed look at what publishing the latest drafts will render on the live site. \\\n\\\nWith every Instance created an initial preview URL is provided. It can be accessed in Manager by clicking any of the Preview links provided throughout the instance, including inside the Content Items' details panel, the Code App files' footer bucket, and Manager's dropdown menu. Users can create additional Preview URLs by adding domains in the Account Manager of an Instance. When doing so, the user will need to select the `dev` Branch in order to establish the new domain as a Preview URL. This will provide the same output as the autogenerated Webengine Preview URL.&#x20;\n\nWhen creating additional preview URLs, Zesty users have the option to use the vanity `zesty.dev` top-level domain. For example: `mypreviewdomain.zesty.dev`. This feature is built into every Instance and allows the user to create domains immediately after creating an instance.\\\n\\\nPreview URLs are **not** intended for production and live site use. Due to the fact that these URLs provide a preview of drafted unpublished content, users run the risk of unapproved content rendered in production when these URLs are used in production. Additionally, content accessed through a preview URL is not cached, when used in production the preview URL will hit the server for each request rather than the CDN. \\\n\n\n![Webengine Preview URL Breakdown](<../../../.gitbook/assets/Url Sections - Webengine Preview URL.png>)\n\n### Production URLs <a href=\"#production_urls\" id=\"production_urls\"></a>\n\nProduction URLs will only display **live published** content. These should be utilized for production sites to avoid unpublished or unapproved drafts rendering on live sites. These URLs are established as Production by selecting the `live` Branch when adding the domain in the Instance's Account Manager. \\\n\\\nWhen adding these domains to the instance the user has two options:\n\n1. Create a domain using zesty.dev top-level domain and assign it to the Live branch\n2. Add a user-owned, DNS configured domain and assign it to the Live branch\\\n\n\nAfter assigning the domain to the Live branch, the user can view the differences in rendering between the Preview URL and the Production URL. \\\n\\\n**Production URLs:**\n\n![Production URL with Zesty vanity must be added to the Live Branch](<../../../.gitbook/assets/Url Sections - Production URL with Zesty vanity must be added to the Live Branch.png>)\n\n![Production URL without Zesty vanity must be added to the Live Branch](<../../../.gitbook/assets/Url Sections - Production URL without Zesty vanity must be added to the Live Branch.png>)\n\n### Webengine Origin URLs <a href=\"#webengine_origin_urls\" id=\"webengine_origin_urls\"></a>\n\nThe Webengine Origin URL is utilized when the user's content is configured on a Hybrid CDN setup. Detailed information on the Hybrid setup can be found [here](hybrid-cdn-setup.md) and Hybrid Webengine Mode and other available Webengine Modes [here](modes.md). This URL was specifically designed to route the user's CDN to a Zersty.io origin.  Origin domains request content directly from Zesty.io servers, with Webengine rendering published content, code, and API endpoints. This URL should be provided to the user's CDN configuration. The origin URL is similar to a Production URL, in that it only delivers live published content, removing the risk of draft and/or unapproved content displaying on the production site. \\\n\\\nAfter setting up the Live domain, with DNS configured, it will be used to configure the origin URL. When adding the Live domain that will be used for the origin, it is not necessary to include the `www` subdomain. For example, `mydomain.com` is sufficient to complete the origin URL. \\\n\\\nTo configure the domain remove any periods in the domain and replace them with hyphens. After doing so, connect `.webengine.origin.zesty.zone` to the end of the domain.&#x20;\n\nFor example, `mydomain.com` will appear as:\\\n`mydomain-com.webengine.origin.zesty.zone`\n\n\\\nThe origin URL does not need to be registered to your Instance because it utilizes a Production URL from your Instance. It is available to use immediately after registering the Production URL that it is configured from. Subdirectory paths can be appended to the origin URL just as you would with your Production or Preview URLs.\n\n![Webengine Origin URL](<../../../.gitbook/assets/Url Sections - Webengine Origin URL.png>)\n","category":"guides","service":"webengine"},{"name":"File Proxy","url":"/webengine/guides/web-engine/file-proxy","objectId":"-MS54wuvhJGx7UiF8Xah","item":[],"content":"# File Proxy\n\n### Integrating external files and sources with Zesty\n\nFile Proxying allows you to implement your external cloud bucket with Zesty. You can seamlessly integrate your external files via Zesty's proxy setting which will direct WebEngine to initially search through your cloud bucket and finally search through Zesty's resources to match the path part of a linked source. All external files are served via proxy so you will see a clean url structure with all your bucket files.\n\n### Integrating an external cloud bucket with a Zesty Instance\n\nGo to instance settings in Manager UI. Look for the Proxy subsection and find the two text fields where the file proxy url structure will be added. Notice that two fields are provided: one for production and one for development. If the same proxy url structure is used for both development and production, add the same url to both fields.\n\n{% hint style=\"warning\" %}\nIf you do not see these settings options, please contact Zesty support to have the Proxy subsection added to the instance settings.\n{% endhint %}\n\n![Instance Settings Proxy Fields](<../../../.gitbook/assets/Screenshot (3).png>)\n\n### Referencing proxy files\n\nTo call your external bucket resources, simply use their path part in your WebIDE code files. WebEngine will use the configured proxy url to concatenate the path parts with the cloud bucket url. If no resources are found in the bucket, WebEngine will move on to resolve with the instance's with the instance's domain in production or preview url in development. If there are no matching resources with the instance, the resource with 404.\n\n![Notice the images sources have a path part as their reference](<../../../.gitbook/assets/Screenshot (4).png>)\n\n### View proxy files rendered with content\n\nWhether it's in dev/preview or in live/production environments, see external resources from the configured cloud bucket render seamlessly with Zesty files.\n\n![](<../../../.gitbook/assets/Screenshot (5).png>)\n","category":"guides","service":"webengine"}],"content":"---\ndescription: >-\n  WebEngine has three options for rendering output to work with different data\n  access styles, which are called modes. Modes only affect WebEngine.\n---\n\n# Modes\n\n#### Modes give teams the ultimate flexibility to work in the style of their implementation target. Mode change the output behavior of WebEngine from only serving JSON to rendering full HTML pages.&#x20;\n\n{% hint style=\"info\" %}\nModes do not affect the Read/Write APIs (Instances API, Accounts API, or Media API)\n{% endhint %}\n\n### Traditional Mode `traditional`_\\[default]_\n\nIf you are building HTML experiences solely on Zesty.io and want to guard against people accessing your content outside of the HTML document, traditional is right. GET APIs that expose content need to be turned on manually, giving teams the options to turn on some items but not others. Custom JSON or other data format endpoints made with Parsley can still be made without an affect on access.&#x20;\n\n| Key Aspect         | How it work in **Traditional Mode**                                                                                                                                                                                                                         |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **HTML Rendering** | All Views render with Parsley by default, HTML document body is auto generated.                                                                                                                                                                             |\n| **Content APIs**   | Instant and GraphQL (gql) APIs must be installed and explicitly turned toggled on through settings, CORS rejects remote client requests outside of the serving domain unless explicitly told otherwise through settings. Headless routing is not available. |\n| **JSON Access**    | Routes (View Rendering) does not have access `/?toJSON`, custom made JSON views are accessible.                                                                                                                                                             |\n| **SEO**            | SEO is automated on page from user input on each content item.                                                                                                                                                                                              |\n\n### Headless Mode  `headless`\n\nMode is best for team who's engineers work fully outside of Zesty.io, example technologies, but not limited to, would be NextJS, NuxtJS, or Angular. When headless mode is on, all routes render as JavaScript object notation (JSON). &#x20;\n\n| Key Aspect         | How it behaves in **Headless Mode**                                                                                                                    |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **HTML Rendering** | Off. Routes to content items render Hydrated JSON. Custom HTML endpoints are still available.                                                          |\n| **Content APIs**   | Instant and GraphQL (gql) APIs are on, CORS is `*` allowing client requests from any domain. Headless routing is available from `/-/headless/`         |\n| **JSON Access**    | Routes automatically render JSON. The `/?toJSON`is available to return routes with meta data, using `/?toJSON=nometa`                                  |\n| **SEO**            | SEO is available on content items with routes, and from the key \\[meta] off the JSON object, and is also available from the`/-/headless/routing.json`  |\n\n### Hybrid Mode `hybrid`\n\nHybrid is best of both worlds. Pages still render HTML at their routes, but they can also render JSON with a simple get parameter. For example `/about/` would return HTML, but `/about/?toJSON` would return a fully hydrated JSON object of the about page.&#x20;\n\n| Key Aspect         | How it work in **Hybrid Mode**                                                                                                                                |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **HTML Rendering** | All Views render with Parsley by default, HTML document body is auto generated.                                                                               |\n| **Content APIs**   | Instant and GraphQL (gql) APIs are on, CORS is `*` allowing client requests from any domain. Headless routing is available from `/-/headless/`                |\n| **JSON Access**    | Routes can render JSON with by using a `/?toJSON`, query parameter at the end of any route.  Custom made JSON views and other datatypes are also accessible.  |\n| **SEO**            | SEO is automated on page from user input on each content item, and is also available from toJSON calls or the `/headless/routing.json` endpoint               |\n\n{% hint style=\"warning\" %}\nChanging a mode will instantly modify the output behavior of WebEngine&#x20;\n{% endhint %}\n\n### Change WebEngine Mode\n\nMode is controlled by a setting that can be found in the Manager UI under General. The default mode is always \"traditional\".&#x20;\n\n![Setting editable under \"general\" ](<../../../.gitbook/assets/image (48).png>)\n","category":"guides","service":"webengine"},{"name":"JSON Endpoints","url":"/webengine/guides/json-endpoints","objectId":"NjSeEMP8YU7Atlqlr0rI","item":[],"content":"---\ndescription: Zesty provides multiple endpoints that return a JSON objects.\n---\n\n# JSON Endpoints\n\nEquipped in every Instance is the ability to utilize JSON objects of the users' stored content. A portion of the JSON objects are accessible directly in the Manager UI, while others can be customized to suit the users' needs via View files.\n\n### JSON Endpoint Types\n\nThe types of JSON endpoints can be broken down into two categories:\n\n1. Zesty provided:\n   * `/-/headless/` **Headless**: available in _Headless_ _and_ _Hybrid WebEngine Modes_\n   * `/-/headless/routing.json` **Routing**: available in _Headless_ _and_ _Hybrid WebEngine Modes_\n   * `/?toJSON` **toJSON**: available in _Headless and Hybrid WebEngine Modes_\n   * `/-/gql/` **GraphQL**: available in _Headless and Hybrid WebEngine Modes_\n   * `/-/instant/` **Instant API**: available in _Developer Settings_\n2. User created:\n   * Using the Parsley call \\{{ this.toJSON() \\}}, users are able to output a fully hydrated JSON object for models and content items.\n   * Using Parsley, users can create endpoints that output a JSON object of the content defined by the users' parsley call.\n\n### Accessing Headless/Hybrid JSON Endpoints\n\nSeveral of the Zesty provided endpoints are only accessible in **Headless** or **Hybrid WebEngine Mode.** To initiate a WebEngine Mode Change, access the Settings App. Listed under General settings, WebEngine Mode will be presented with the following three dropdown selections: **Traditional**, **Headless**, or **Hybrid**.\n\n![](../../../.gitbook/assets/webengine\\_mode\\_setting.png)\n\nWith **Headless** or **Hybrid** selected, the user will have access to the Headless, toJSON, and GraphQL endpoints.&#x20;\n\n{% hint style=\"danger\" %}\n**Warning:** Switching from either Traditional or Hybrid WebEngine Mode to Headless WebEngine Mode will cause WebEngine not to render Views stored in Zesty.\n{% endhint %}\n\n#### Headless\n\nThe Headless endpoint options can be viewed from the Manager as well as when utilizing the `/-/headless/` endpoint in the browser. In each content item there is a Headless section. When selected it will provide formatted links to the following:\n\n* URL to JSON: using the `/?toJSON` endpoint to output the item in JSON\n* Instant JSON API: `/-/instant/` endpoint provides the same read only Instant API JSON the Manager provides in models and items\n* GraphQL API: `/-/gql/` formatted URLs output flat objects ideal for feeding to GraphQL servers\n* Instances Rest API: provides the formatted API call using the Instances API. Additional information on our Instances API can be found [here](../../../instances/guides/instances-api.md).&#x20;\n* Custom Endpoints: this section houses quick access to the Code App to create custom endpoints utilizing Parsley\n\nThe toJSON, Instant JSON API, and GraphQL endpoints are also provided when accessing the `/-/headless/` endpoint. This can be achieved by adding the endpoint to your Instances live domain. For example:\n\n`https://www.mydomain.com/-/headless/`\n\nThe trailing forward slash is necessary to access the JSON output. The object returned will provide additional endpoint linking and preformatted URLs to the Instance's available JSON endpoints. For example:&#x20;\n\n![Example of the Headless endpoint JSON output](../../../.gitbook/assets/headless\\_JSON.png)\n\n#### Routing\n\nThe Routing endpoint is provided through the Headless JSON object. It renders an array of objects that correspond to each Content Item stored within the Instance. Each item object will contain details on a item, including: item ZUID, item title, description, URI, item path part, item URL and the Hybrid JSON URL constructred with the use of the `/?toJSON` endpoint.\n\n![Routing Item object and associated information.](../../../.gitbook/assets/routing\\_item.png)\n\n#### toJSON\n\nThe `/?toJSON` endpoint can be added to the end of any view route established in the users' Instance. Once applied the route will automatically render a JSON output of that view. Additional parameters can be applied to remove the meta data from the output. For example:\n\n`https://www.mydomain.com/blog/?toJSON=nometa`\n\n#### GraphQL\n\nThe GraphQL endpoint returns a flat object consumable by GraphQL servers. The formatting of these URLs using the `/-/gql/` is slightly different from other JSON options. The addition to the URL is attached to the end of the Instance's domain, followed by the model's name. For example:\n\n`https://www.mydomain.com/-/gql/blog.json`\n\nThe object returned will include the model's Items, fields, stored content, language variants, and meta data. Additional information on our GraphQL endpoints can be found [here](../graphql.md).\n\n### Accessing Instant API (Read Only)\n\nThe Instant API endpoints can be accessed in the Manager. To enable the endpoints within the Manager, the **Instant JSON API** setting, in Developer Settings, will need to be switched on.&#x20;\n\n![Inside the Settings App, under Developer, users scan access the Instant JSON API switch ](../../../.gitbook/assets/instant\\_api\\_setting.png)\n\nOnce the setting has been activated, inside the details panel of both Models and Content Items, there will be an Instant API link that will direct the user to the associated JSON output.&#x20;\n\nFor both Models and Content Items, the API link will be available in the details panel. In a model, the link will appear in the Model Info section. For a content item, the link will appear in the Links portion of the details panel.\n\n![Model Instant API Link](../../../.gitbook/assets/instant\\_api\\_model.png) ![Content Item Instant API Link](../../../.gitbook/assets/instant\\_api\\_item.png)\n\n### User Created JSON Endpoints\n\nThe two options available for custom endpoints allow the user to create the desired URL routing and during the creation of the object, Pasley enables the user to integrate content from multiple content items. &#x20;\n\nWith the Parsley method `toJSON()` there are some limitations to incorporating multiple content items in one object. However, it is ideal for creating a fully hydrated JSON object of any content item. This method is covered in depth [here](parsley-tojson.md).\n\nWhen using Parsley without the `toJSON()` method, users can loop through multiple content items to produce a JSON that has the desired content. As well as filter out the fields that are not necessary for the rendered output. Creating a custom endpoint guide can be found [here](how-to-create-a-customizable-json-endpoint-for-content.md).\n","category":"guides","service":"webengine"},{"name":"json-endpoints","url":"/webengine/guides/json-endpoints","item":[{"name":"Headless & Hybrid toJSON","url":"/webengine/guides/json-endpoints/headless-and-hybrid-tojson","objectId":"X62qTl3UPqNAP0ygaxWz","item":[],"content":"---\ndescription: >-\n  When using both Headless and Hybrid WebEngine Modes, an additional JSON method\n  becomes available: toJSON.\n---\n\n# Headless & Hybrid toJSON\n\nTo aid in the consumption of content the toJSON endpoint is available in both Headless and Hybrid WebEngine Modes. The endpoint will render an object containing a content item's meta, stored and related data when `/?toJSON` is applied to the end of the established URL routing of the item. &#x20;\n\n**For example:** `https://www.mydomain.com/blog/my-article/?toJSON`\n\nThe URL routing utilizes the established route configured for the content items view. It can be added to _**live**_ or _**preview**_ _**branch**_ URLs. However, when accessing the content for production using the _**live branch**_ is the best practice to ensure that only live published content is rendered.\n\n### Content Output\n\nThe content item's fields and their contents will render in key-value pairs. Related content obtained through One-to-One or One-to-Many fields will render as a sub-object with a corresponding data array. The data array will include hydrated objects of the related items. For example, below the coauthor field is a One-to-One relational with the selected items data object.\n\n![toJSON object with One-to-One relational JSON output](../../../.gitbook/assets/toJSON-render.png)\n\nThe content hydration level of the returned object has a default depth of three. The top-level is the first and two lower depth levels of related content. The hydration depth cannot be set via URL.\n\n### No Meta Option\n\nThe meta data provided in the object may not be necessary when consuming the content. These can be removed before the object is returned by adding a `nometa` query parameter value to the end of your URL. &#x20;\n\n**For example:** `https://www.mydomain.com/blog/my-article/?toJSON=nometa`\n\nThis will remove the meta data from the primary content item's rendering and the related items' objects as well.\n","category":"guides","service":"webengine"},{"name":"Instant API (Read Only)","url":"/webengine/guides/json-endpoints/instant-content-api","objectId":"-LKwhvisgQvgTNV-vsdj","item":[],"content":"---\ndescription: >-\n  A Read Only JSON API to access any content created and managed on the Zesty.io\n  Content Platform\n---\n\n# Instant API (Read Only)\n\n## What is the Zesty.io Instant Content API?\n\nThe Instant Content API (ICA) is a Read Only interface that returns JSON data via HTTP GET requests. It uses Zesty Unique Identifiers (ZUID)s to return information. ICA is primarily used for headless applications, but is not limited to that use. Dynamic Website data or middleware interpreters are also common uses.\n\nThis API is intended to be used to retrieve basic information about content in your instance. If you want to receive different file types (e.g. SVG, XML, RSS, etc), or submit parameters, we recommend using the Custom JSON API Instead.\n\n## Introduction\n\n### Getting Started\n\n#### Enabling Instant Content API\n\nICA is an optional feature on every Zesty.io Instance. It can be turned on from the developers settings in the Instances Manager Interface.\n\n#### Accessing Instant Content API Endpoints\n\nTo access ICA, you make a call to your preview URL or live domain, for example: [http://burger.zesty.site/-/instant/6-4b5c74-fg83s2.json](http://burger.zesty.site/-/instant/6-4b5c74-fg83s2.json). Swap out the domain for your preview URL or your live domain. Switch out the HASH for a resource you wish to access on your Zesty.io instance.\n\nThe hash you see is a ZUID. ZUIDs are used to represent every type of resource in Zesty.io. You can find the ZUID of a resource in a few ways through the Zesty.io Content Manager. When editing content, you will see the ZUID (items start with 7-) of that content in the URL of the page you are editing. You can access model ZUIDS (models start with 6-) by looking in the schema (previously config) tab.\n\nWhen you visit the ICA URL you see a JSON object of the data associated with the resource you are requesting along with meta data, version information, image objects, and related resources objects.\n\n## Security\n\nICA is optional and has to be turned on to gain access to it. Options to control Cross Origin Resource Sharing can be used to lock the API down to specific websites. A header request with a private token can be set to secure external programmatic application calls. That key is set by the user by editing the developer setting.\n\nExample Header (Optional if setting is set)\n\n```\nAuthorization: Bearer XXXXX\n```\n\n## JSON Format\n\n{% swagger baseUrl=\"https://yoursite.com\" path=\"/-/instant/zuid.json\" method=\"get\" summary=\"General Format\" %}\n{% swagger-description %}\nAll objects will return meta and data fields. \n\n\\\n\n\n\n\n\\\n\n\nThe meta field gives information on what type the object is, in addition to its model container.\n\n\\\n\n\n\n\n\\\n\n\nThe data field contains meta, version, and content fields.\n\n\\\n\n\n\n\n\\\n\n\nThe data meta field contains the actual object metadata, the data version field contains information detailing which version was returned. Lastly, the data content field returns the actual content that was set in the config tab of Zesty.io\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Access Token\" type=\"string\" %}\nName and value may change in the future. You can also\n\n\\\n\n\nconfigure your site to not need this\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Returned if the zuid exists (Generic Item Example)\" %}\n{% code title=\"response.json\" %}\n```yaml\n{\n\t\"meta\": {\n\t\t\"type\": \"item\",\n\t\t\"zuid\": \"your-zuid\",\n\t\t\"createdAt\": \"2018-07-10 23:03:25\",\n\t\t\"totalItems\": 1,\n\t\t\"listed\": 1,\n\t\t\"model\": {\n\t\t\t\"type\": \"model\",\n\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\"name\": \"some model\",\n\t\t\t\"label\": \"Some Model\",\n\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t},\n\t\t\"web\": {\n\t\t\t\"uri\": \"\\/\",\n\t\t\t\"fragment\": \"zesty_home\"\n\t\t}\n\t},\n\t\"data\": [\n\t{\n\t\t\"meta\": {\n\t\t\t\"type\": \"item\",\n\t\t\t\"zuid\": \"7-4ad498-k2cldb\",\n\t\t\t\"name\": \"Homepage\",\n\t\t\t\"title\": \"Homepage\",\n\t\t\t\"description\": \"Some Description\",\n\t\t\t\"keywords\": \"key, words\",\n\t\t\t\"language\": 1,\n\t\t\t\"model\": {\n\t\t\t\t\"type\": \"model\",\n\t\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\t\"name\": \"some model\",\n\t\t\t\t\"label\": \"Some Model\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t\t},\n\t\t\t\"parent\": {\n\t\t\t\t\"type\": \"abstract\",\n\t\t\t\t\"zuid\": \"7-parent-item-zuid\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-parent-item-zuid.json\",\n\t\t\t}\n\t\t},\n\t\t\"version\": {\n\t\t\t\"zuid\": \"9-version-zuid\",\n\t\t\t\"createdAt\": \"2018-08-17 22:49:06\",\n\t\t\t\"iteration\": 15,\n\t\t\t\"history\": {\n\t\t\t\t\"type\": \"versions\",\n\t\t\t\t\"totalItems\": 0,\n\t\t\t\t\"data\": null\n\t\t\t}\n\t\t},\n\t\t\"content\": {\n\t\t\t\"refName\" : \"value\",\n\t\t\t\"zuid\": \"18-content-zuid\",\n\t\t\t\"version_zuid\": \"9-6d2c2e2-dlhtq6\",\n\t\t\t\"version_num\": 15,\n\t\t\t\"publish_at\": \"2018-08-17 22:49:07\",\n\t\t\t\"take_offline_at\": null\n\t\t}\n\t}]\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://yoursite.com\" path=\"/-/instant/7-item-zuid.json\" method=\"get\" summary=\"Content Items\" %}\n{% swagger-description %}\nContent Items are designated by a 7 in their zuid. Items will only return one object in the data array.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Access Token\" type=\"string\" %}\nName and value may change in the future. You can also\n\n\\\n\n\nconfigure your site to not need this\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Returned if the zuid exists (Generic Item Example)\" %}\n{% code title=\"response.json\" %}\n```yaml\n{\n\t\"meta\": {\n\t\t\"type\": \"item\",\n\t\t\"zuid\": \"your-zuid\",\n\t\t\"createdAt\": \"2018-07-10 23:03:25\",\n\t\t\"totalItems\": 1,\n\t\t\"listed\": 1,\n\t\t\"model\": {\n\t\t\t\"type\": \"model\",\n\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\"name\": \"some model\",\n\t\t\t\"label\": \"Some Model\",\n\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t},\n\t\t\"web\": {\n\t\t\t\"uri\": \"\\/\",\n\t\t\t\"fragment\": \"zesty_home\"\n\t\t}\n\t},\n\t\"data\": [\n\t{\n\t\t\"meta\": {\n\t\t\t\"type\": \"item\",\n\t\t\t\"zuid\": \"7-4ad498-k2cldb\",\n\t\t\t\"name\": \"Homepage\",\n\t\t\t\"title\": \"Homepage\",\n\t\t\t\"description\": \"Some Description\",\n\t\t\t\"keywords\": \"key, words\",\n\t\t\t\"language\": 1,\n\t\t\t\"model\": {\n\t\t\t\t\"type\": \"model\",\n\t\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\t\"name\": \"some model\",\n\t\t\t\t\"label\": \"Some Model\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t\t},\n\t\t\t\"parent\": {\n\t\t\t\t\"type\": \"abstract\",\n\t\t\t\t\"zuid\": \"7-parent-item-zuid\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-parent-item-zuid.json\",\n\t\t\t}\n\t\t},\n\t\t\"version\": {\n\t\t\t\"zuid\": \"9-version-zuid\",\n\t\t\t\"createdAt\": \"2018-08-17 22:49:06\",\n\t\t\t\"iteration\": 15,\n\t\t\t\"history\": {\n\t\t\t\t\"type\": \"versions\",\n\t\t\t\t\"totalItems\": 0,\n\t\t\t\t\"data\": null\n\t\t\t}\n\t\t},\n\t\t\"content\": {\n\t\t\t\"refName\" : \"value\",\n\t\t\t\"zuid\": \"18-content-zuid\",\n\t\t\t\"version_zuid\": \"9-6d2c2e2-dlhtq6\",\n\t\t\t\"version_num\": 15,\n\t\t\t\"publish_at\": \"2018-08-17 22:49:07\",\n\t\t\t\"take_offline_at\": null\n\t\t}\n\t}]\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://yoursite.com\" path=\"/-/instant/6-array-zuid.json\" method=\"get\" summary=\"Models (Previously known as Pagesets, Templatesets, Datasets)\" %}\n{% swagger-description %}\nArrays are designated by a 6 in their zuid. They can return multiple items.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Access Token\" type=\"string\" %}\nName and value may change in the future. You can also\n\n\\\n\n\nconfigure your site to not need this\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Returned if the zuid exists (Generic Item Example)\" %}\n{% code title=\"response.json\" %}\n```yaml\n{\n\t\"meta\": {\n\t\t\"type\": \"model\",\n\t\t\"zuid\": \"6-zuid\",\n\t\t\"createdAt\": \"2018-07-10 23:17:27\",\n\t\t\"model\": {\n\t\t\t\"type\": \"model\",\n\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\"name\": \"location_pages\",\n\t\t\t\"label\": \"Some Model\",\n\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t},\n\t\t\"totalItems\": 2\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"meta\": {\n\t\t\t\t\"type\": \"item\",\n\t\t\t\t\"zuid\": \"7-zuid\",\n\t\t\t\t\"name\": \"Some Item\",\n\t\t\t\t\"title\": \"Some Item\",\n\t\t\t\t\"description\": \"some description\",\n\t\t\t\t\"keywords\": \"key, words\",\n\t\t\t\t\"language\": 1,\n\t\t\t\t\"model\": {\n\t\t\t\t\t\"type\": \"model\",\n\t\t\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\t\t\"name\": \"location_pages\",\n\t\t\t\t\t\"label\": \"Some Model\",\n\t\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t\t\t},\n\t\t\t\t\"parent\": {\n\t\t\t\t\t\"type\": \"item\",\n\t\t\t\t\t\"zuid\": \"7-parent-zuid\",\n\t\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-parent-zuid.json\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"version\": {\n\t\t\t\t\"zuid\": \"9-version-zuid\",\n\t\t\t\t\"createdAt\": \"2018-07-25 23:05:29\",\n\t\t\t\t\"iteration\": 19,\n\t\t\t\t\"history\": {\n\t\t\t\t\t\"type\": \"versions\",\n\t\t\t\t\t\"totalItems\": 0,\n\t\t\t\t\t\"data\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"content\": {\n\t\t\t\t\"sort\": 1,\n\t\t\t\t\"some_property\": \"Value\",\n\t\t\t\t\"zuid\": \"18-content-zuid\",\n\t\t\t\t\"item_zuid\": {\n\t\t\t\t\t\"type\": \"relationship\",\n\t\t\t\t\t\"totalItems\": 1,\n\t\t\t\t\t\"data\": [{\n\t\t\t\t\t\t\"type\": \"item\",\n\t\t\t\t\t\t\"zuid\": \"7-item-zuid\",\n\t\t\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-item-zuid.json\"\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\t\"version_zuid\": \"9-version-zuid\",\n\t\t\t\t\"version_num\": 19,\n\t\t\t\t\"publish_at\": \"2018-07-25 23:05:30\",\n\t\t\t\t\"take_offline_at\": null\n\t\t\t}\n\t\t},\n\t\t{ ... }\t\t\n\t]\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n\n\n## Datatypes Returned\n\n### Images\n\nImages are returned as objects, containing data regarding how many images were returned, as well as the media url and the image zuid\n\n```\n\"imageRef\" : {\n    \"type\": \"images\",\n    \"totalItems\": 2,\n    \"data\": [\n        {\n            \"type\": \"image\",\n            \"zuid\": \"3-image-zuid\",\n            \"url\": \"https:\\/\\/instance.media.zestyio.com\\/path\\/to\\/.jpg\"\n        },\n        {\n            \"type\": \"image\",\n            \"zuid\": \"3-image-zuid\",\n            \"url\": \"https:\\/\\/instance.media.zestyio.com\\/path\\/to\\/.jpg\"\n        }\n    ]\n}\n```\n\n### Relationships\n\nRelationships (such as `one-to-one` and `one-to-many`) are returned as objects, containing data regarding how many items are related (`one-to-one` relationships will always return 1) , as well as a resource URI to retrieve more data on the related item\n\n```\n\"relationshipRef\": {\n    \"type\": \"relationship\",\n    \"totalItems\": 2,\n    \"data\": [\n        {\n            \"type\": \"item\",\n            \"zuid\": \"7-zuid\",\n            \"resourceURI\": \"\\/-\\/instant\\/7-zuid.json\"\n        },\n        {\n            \"type\": \"item\",\n            \"zuid\": \"7-zuid\",\n            \"resourceURI\": \"\\/-\\/instant\\/7-zuid.json\"\n        }\n    ]\n},\n```\n","category":"guides","service":"webengine"},{"name":"Parsley toJSON()","url":"/webengine/guides/json-endpoints/parsley-tojson","objectId":"LkYynT981KS49flHfKNS","item":[],"content":"---\ndescription: >-\n  The toJSON() Parsley call allows users to create custom endpoints from Models\n  and Item.\n---\n\n# Parsley toJSON()\n\nThe Parsley method `toJSON()` enables users to create custom endpoints with a fully hydrated JSON object. It can also be used inline with JavaScript included in Views, providing additional access to a Content Item's stored data.&#x20;\n\nThe `toJSON()` method has two optional parameters, giving the user control over hydration level and the inclusion of metadata. This is achieved with the following syntax:&#x20;\n\n```\n// Hydration depth is passed first followed by metadata preference\n{{ this.toJSON(depth, showMeta) }}\n\n// For example:\n{{this.toJSON(3,false)}}\n```\n\n* `depth` is an integer for hydration depth, max depth is 5\n* `showMeta` supports a boolean value of _true_ or _false. `true` _ provides all meta, routing, zuid details, and locale details. _`false`_ provides only content.\n\nThe method's parameters, `depth` and `showMeta,` are optional. The default output of the method, without specification, will include meta data and a hydration depth level of 2.\n\n### Using the Method\n\nThe `toJSON()` method can be used in a variety of ways to format the desired content and the URL routing location it will be rendered from. Below details how this can be accomplished in three different ways:\n\n1. Applying the Parsley method to `this` inside of the Item associated View will access the corresponding Item's content. The Parsley keyword `this` can only be used on a Content Model generated View, as it points to the connected item. **For example:** `{{this.toJSON(depth, showMeta)}}`&#x20;\n2. Adding the method to the Parsley first() or last() calls can access a corresponding item in a Multi-Entry or Dataset Model. **For example:** `{{model.first().toJSON(2, true)}}`\n3. The method can also be used in Pasley `each` loops to render a JSON object of each item. Inside the `each` loop, filters can be applied by adding Parsley if or where conditionals as well to only output desired objects. **For example:**&#x20;\n\n```\n{{each model as item}}\n    {{item.toJSON()}}\n{{end-each}}\n\n// with conditional\n{{each model as item where item.zuid = '7-f2dabc123-123xyz'}}\n    {{item.toJSON()}}\n{{end-each}}\n```\n\nFor examples of the `toJSON()` method, please visit the [Parsley REPL](https://parsley.zesty.io/turn-any-content-item-to-json/). Additional syntax details can be found in the [Parsley Index](../web-engine/introduction-to-parsley/parsley-index.md#tojson).\n","category":"guides","service":"webengine"},{"name":"Creating a Customizable JSON Endpoint For Content","url":"/webengine/guides/json-endpoints/how-to-create-a-customizable-json-endpoint-for-content","objectId":"jLOSOAnJTUIDXUaCt9P6","item":[],"content":"# Creating a Customizable JSON Endpoint For Content\n\nZesty.io's custom API JSON endpoints will save your app developers a lot of time by making requesting dynamic data on your frontend quick and easy. Learn more about the Zesty.io [headless CMS offering here](https://www.zesty.io/en-us/cms/headless-cms-websites-with-decoupled-architecture/).\n\n### Implementing Custom Endpoints\n\nBefore jumping into the steps below we recommend installing a [JSON viewer extension](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc) for Chrome for effortless viewing and simple debugging JSON.\n\n1. Navigate to the [Web IDE](https://zesty.org/services/manager-ui/editor) section, locate the blue \"create file\" button at the top of the left-hand navigation, and click it.&#x20;\n2. Select Custom File Type from the dropdown.\n3. Name your file. The name of this file will be used to reference your custom endpoint. For example if the file is named `/test-data` the endpoint is referenced at `https://www.example.com/test-data.json`The preview URL can also be used in place of your live domain. **Note:** _always consume the production URL when accessing endpoints. Preview.zesty.io URLs not only show unpublished data but also are not cached._\n4. Copy this code example below, and paste it into your new file&#x20;\n\n{% hint style=\"warning\" %}\nNote: Don't forget to add the leading slash in your file name as the file name gets concatenated to your instance's url.\n{% endhint %}\n\n{% embed url=\"https://gist.github.com/ardeay/1b8a4ccffd5bf1b8035df23e3eccb460\" %}\n\n5\\. Replace content references in the copied code above with actual [content models](https://zesty.org/services/manager-ui/schema/content-models) in your Zesty.io instance. You have full access to [Parsley](https://zesty.org/services/web-engine/introduction-to-parsley) code in this view.&#x20;\n\n6\\. Edit content references as necessary to form proper JSON. We provide [`.escapeForJS()`](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#escapeforjs) for WYSIWYG content. To create comma separated lists in an each loop implement calls like `{{if {tag._length} != {tab._num} }},{{end-if}}`.\n\n7\\. Setup optional get parameters like `start` and `limit` to make custom pagination calls `https://www.yourdomain.com/test-data.json?start=0&limit=5`\n\n{% embed url=\"https://gist.github.com/ardeay/cdcfed6dd2c1ddb672ded64b2478ece5\" %}\n","category":"guides","service":"webengine"}],"content":"---\ndescription: >-\n  When using both Headless and Hybrid WebEngine Modes, an additional JSON method\n  becomes available: toJSON.\n---\n\n# Headless & Hybrid toJSON\n\nTo aid in the consumption of content the toJSON endpoint is available in both Headless and Hybrid WebEngine Modes. The endpoint will render an object containing a content item's meta, stored and related data when `/?toJSON` is applied to the end of the established URL routing of the item. &#x20;\n\n**For example:** `https://www.mydomain.com/blog/my-article/?toJSON`\n\nThe URL routing utilizes the established route configured for the content items view. It can be added to _**live**_ or _**preview**_ _**branch**_ URLs. However, when accessing the content for production using the _**live branch**_ is the best practice to ensure that only live published content is rendered.\n\n### Content Output\n\nThe content item's fields and their contents will render in key-value pairs. Related content obtained through One-to-One or One-to-Many fields will render as a sub-object with a corresponding data array. The data array will include hydrated objects of the related items. For example, below the coauthor field is a One-to-One relational with the selected items data object.\n\n![toJSON object with One-to-One relational JSON output](../../../.gitbook/assets/toJSON-render.png)\n\nThe content hydration level of the returned object has a default depth of three. The top-level is the first and two lower depth levels of related content. The hydration depth cannot be set via URL.\n\n### No Meta Option\n\nThe meta data provided in the object may not be necessary when consuming the content. These can be removed before the object is returned by adding a `nometa` query parameter value to the end of your URL. &#x20;\n\n**For example:** `https://www.mydomain.com/blog/my-article/?toJSON=nometa`\n\nThis will remove the meta data from the primary content item's rendering and the related items' objects as well.\n","category":"guides","service":"webengine"},{"name":"Instant API (Read Only)","url":"/webengine/guides/instant-content-api","objectId":"EuxuJRVPwQMVWxfnJkKz","item":[],"content":"---\ndescription: >-\n  A Read Only JSON API to access any content created and managed on the Zesty.io\n  Content Platform\n---\n\n# Instant API (Read Only)\n\n## What is the Zesty.io Instant Content API?\n\nThe Instant Content API (ICA) is a Read Only interface that returns JSON data via HTTP GET requests. It uses Zesty Unique Identifiers (ZUID)s to return information. ICA is primarily used for headless applications, but is not limited to that use. Dynamic Website data or middleware interpreters are also common uses.\n\nThis API is intended to be used to retrieve basic information about content in your instance. If you want to receive different file types (e.g. SVG, XML, RSS, etc), or submit parameters, we recommend using the Custom JSON API Instead.\n\n## Introduction\n\n### Getting Started\n\n#### Enabling Instant Content API\n\nICA is an optional feature on every Zesty.io Instance. It can be turned on from the developers settings in the Instances Manager Interface.\n\n#### Accessing Instant Content API Endpoints\n\nTo access ICA, you make a call to your preview URL or live domain, for example: [http://burger.zesty.site/-/instant/6-4b5c74-fg83s2.json](http://burger.zesty.site/-/instant/6-4b5c74-fg83s2.json). Swap out the domain for your preview URL or your live domain. Switch out the HASH for a resource you wish to access on your Zesty.io instance.\n\nThe hash you see is a ZUID. ZUIDs are used to represent every type of resource in Zesty.io. You can find the ZUID of a resource in a few ways through the Zesty.io Content Manager. When editing content, you will see the ZUID (items start with 7-) of that content in the URL of the page you are editing. You can access model ZUIDS (models start with 6-) by looking in the schema (previously config) tab.\n\nWhen you visit the ICA URL you see a JSON object of the data associated with the resource you are requesting along with meta data, version information, image objects, and related resources objects.\n\n## Security\n\nICA is optional and has to be turned on to gain access to it. Options to control Cross Origin Resource Sharing can be used to lock the API down to specific websites. A header request with a private token can be set to secure external programmatic application calls. That key is set by the user by editing the developer setting.\n\nExample Header (Optional if setting is set)\n\n```\nAuthorization: Bearer XXXXX\n```\n\n## JSON Format\n\n{% swagger baseUrl=\"https://yoursite.com\" path=\"/-/instant/zuid.json\" method=\"get\" summary=\"General Format\" %}\n{% swagger-description %}\nAll objects will return meta and data fields. \n\n\\\n\n\n\n\n\\\n\n\nThe meta field gives information on what type the object is, in addition to its model container.\n\n\\\n\n\n\n\n\\\n\n\nThe data field contains meta, version, and content fields.\n\n\\\n\n\n\n\n\\\n\n\nThe data meta field contains the actual object metadata, the data version field contains information detailing which version was returned. Lastly, the data content field returns the actual content that was set in the config tab of Zesty.io\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Access Token\" type=\"string\" %}\nName and value may change in the future. You can also\n\n\\\n\n\nconfigure your site to not need this\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Returned if the zuid exists (Generic Item Example)\" %}\n{% code title=\"response.json\" %}\n```yaml\n{\n\t\"meta\": {\n\t\t\"type\": \"item\",\n\t\t\"zuid\": \"your-zuid\",\n\t\t\"createdAt\": \"2018-07-10 23:03:25\",\n\t\t\"totalItems\": 1,\n\t\t\"listed\": 1,\n\t\t\"model\": {\n\t\t\t\"type\": \"model\",\n\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\"name\": \"some model\",\n\t\t\t\"label\": \"Some Model\",\n\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t},\n\t\t\"web\": {\n\t\t\t\"uri\": \"\\/\",\n\t\t\t\"fragment\": \"zesty_home\"\n\t\t}\n\t},\n\t\"data\": [\n\t{\n\t\t\"meta\": {\n\t\t\t\"type\": \"item\",\n\t\t\t\"zuid\": \"7-4ad498-k2cldb\",\n\t\t\t\"name\": \"Homepage\",\n\t\t\t\"title\": \"Homepage\",\n\t\t\t\"description\": \"Some Description\",\n\t\t\t\"keywords\": \"key, words\",\n\t\t\t\"language\": 1,\n\t\t\t\"model\": {\n\t\t\t\t\"type\": \"model\",\n\t\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\t\"name\": \"some model\",\n\t\t\t\t\"label\": \"Some Model\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t\t},\n\t\t\t\"parent\": {\n\t\t\t\t\"type\": \"abstract\",\n\t\t\t\t\"zuid\": \"7-parent-item-zuid\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-parent-item-zuid.json\",\n\t\t\t}\n\t\t},\n\t\t\"version\": {\n\t\t\t\"zuid\": \"9-version-zuid\",\n\t\t\t\"createdAt\": \"2018-08-17 22:49:06\",\n\t\t\t\"iteration\": 15,\n\t\t\t\"history\": {\n\t\t\t\t\"type\": \"versions\",\n\t\t\t\t\"totalItems\": 0,\n\t\t\t\t\"data\": null\n\t\t\t}\n\t\t},\n\t\t\"content\": {\n\t\t\t\"refName\" : \"value\",\n\t\t\t\"zuid\": \"18-content-zuid\",\n\t\t\t\"version_zuid\": \"9-6d2c2e2-dlhtq6\",\n\t\t\t\"version_num\": 15,\n\t\t\t\"publish_at\": \"2018-08-17 22:49:07\",\n\t\t\t\"take_offline_at\": null\n\t\t}\n\t}]\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://yoursite.com\" path=\"/-/instant/7-item-zuid.json\" method=\"get\" summary=\"Content Items\" %}\n{% swagger-description %}\nContent Items are designated by a 7 in their zuid. Items will only return one object in the data array.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Access Token\" type=\"string\" %}\nName and value may change in the future. You can also\n\n\\\n\n\nconfigure your site to not need this\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Returned if the zuid exists (Generic Item Example)\" %}\n{% code title=\"response.json\" %}\n```yaml\n{\n\t\"meta\": {\n\t\t\"type\": \"item\",\n\t\t\"zuid\": \"your-zuid\",\n\t\t\"createdAt\": \"2018-07-10 23:03:25\",\n\t\t\"totalItems\": 1,\n\t\t\"listed\": 1,\n\t\t\"model\": {\n\t\t\t\"type\": \"model\",\n\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\"name\": \"some model\",\n\t\t\t\"label\": \"Some Model\",\n\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t},\n\t\t\"web\": {\n\t\t\t\"uri\": \"\\/\",\n\t\t\t\"fragment\": \"zesty_home\"\n\t\t}\n\t},\n\t\"data\": [\n\t{\n\t\t\"meta\": {\n\t\t\t\"type\": \"item\",\n\t\t\t\"zuid\": \"7-4ad498-k2cldb\",\n\t\t\t\"name\": \"Homepage\",\n\t\t\t\"title\": \"Homepage\",\n\t\t\t\"description\": \"Some Description\",\n\t\t\t\"keywords\": \"key, words\",\n\t\t\t\"language\": 1,\n\t\t\t\"model\": {\n\t\t\t\t\"type\": \"model\",\n\t\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\t\"name\": \"some model\",\n\t\t\t\t\"label\": \"Some Model\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t\t},\n\t\t\t\"parent\": {\n\t\t\t\t\"type\": \"abstract\",\n\t\t\t\t\"zuid\": \"7-parent-item-zuid\",\n\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-parent-item-zuid.json\",\n\t\t\t}\n\t\t},\n\t\t\"version\": {\n\t\t\t\"zuid\": \"9-version-zuid\",\n\t\t\t\"createdAt\": \"2018-08-17 22:49:06\",\n\t\t\t\"iteration\": 15,\n\t\t\t\"history\": {\n\t\t\t\t\"type\": \"versions\",\n\t\t\t\t\"totalItems\": 0,\n\t\t\t\t\"data\": null\n\t\t\t}\n\t\t},\n\t\t\"content\": {\n\t\t\t\"refName\" : \"value\",\n\t\t\t\"zuid\": \"18-content-zuid\",\n\t\t\t\"version_zuid\": \"9-6d2c2e2-dlhtq6\",\n\t\t\t\"version_num\": 15,\n\t\t\t\"publish_at\": \"2018-08-17 22:49:07\",\n\t\t\t\"take_offline_at\": null\n\t\t}\n\t}]\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n{% swagger baseUrl=\"https://yoursite.com\" path=\"/-/instant/6-array-zuid.json\" method=\"get\" summary=\"Models (Previously known as Pagesets, Templatesets, Datasets)\" %}\n{% swagger-description %}\nArrays are designated by a 6 in their zuid. They can return multiple items.\n{% endswagger-description %}\n\n{% swagger-parameter in=\"header\" name=\"Access Token\" type=\"string\" %}\nName and value may change in the future. You can also\n\n\\\n\n\nconfigure your site to not need this\n{% endswagger-parameter %}\n\n{% swagger-response status=\"200\" description=\"Returned if the zuid exists (Generic Item Example)\" %}\n{% code title=\"response.json\" %}\n```yaml\n{\n\t\"meta\": {\n\t\t\"type\": \"model\",\n\t\t\"zuid\": \"6-zuid\",\n\t\t\"createdAt\": \"2018-07-10 23:17:27\",\n\t\t\"model\": {\n\t\t\t\"type\": \"model\",\n\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\"name\": \"location_pages\",\n\t\t\t\"label\": \"Some Model\",\n\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t},\n\t\t\"totalItems\": 2\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"meta\": {\n\t\t\t\t\"type\": \"item\",\n\t\t\t\t\"zuid\": \"7-zuid\",\n\t\t\t\t\"name\": \"Some Item\",\n\t\t\t\t\"title\": \"Some Item\",\n\t\t\t\t\"description\": \"some description\",\n\t\t\t\t\"keywords\": \"key, words\",\n\t\t\t\t\"language\": 1,\n\t\t\t\t\"model\": {\n\t\t\t\t\t\"type\": \"model\",\n\t\t\t\t\t\"zuid\": \"6-model-zuid\",\n\t\t\t\t\t\"name\": \"location_pages\",\n\t\t\t\t\t\"label\": \"Some Model\",\n\t\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/6-model-zuid.json\"\n\t\t\t\t},\n\t\t\t\t\"parent\": {\n\t\t\t\t\t\"type\": \"item\",\n\t\t\t\t\t\"zuid\": \"7-parent-zuid\",\n\t\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-parent-zuid.json\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"version\": {\n\t\t\t\t\"zuid\": \"9-version-zuid\",\n\t\t\t\t\"createdAt\": \"2018-07-25 23:05:29\",\n\t\t\t\t\"iteration\": 19,\n\t\t\t\t\"history\": {\n\t\t\t\t\t\"type\": \"versions\",\n\t\t\t\t\t\"totalItems\": 0,\n\t\t\t\t\t\"data\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"content\": {\n\t\t\t\t\"sort\": 1,\n\t\t\t\t\"some_property\": \"Value\",\n\t\t\t\t\"zuid\": \"18-content-zuid\",\n\t\t\t\t\"item_zuid\": {\n\t\t\t\t\t\"type\": \"relationship\",\n\t\t\t\t\t\"totalItems\": 1,\n\t\t\t\t\t\"data\": [{\n\t\t\t\t\t\t\"type\": \"item\",\n\t\t\t\t\t\t\"zuid\": \"7-item-zuid\",\n\t\t\t\t\t\t\"resourceURI\": \"\\/-\\/instant\\/7-item-zuid.json\"\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\t\"version_zuid\": \"9-version-zuid\",\n\t\t\t\t\"version_num\": 19,\n\t\t\t\t\"publish_at\": \"2018-07-25 23:05:30\",\n\t\t\t\t\"take_offline_at\": null\n\t\t\t}\n\t\t},\n\t\t{ ... }\t\t\n\t]\n}\n```\n{% endcode %}\n{% endswagger-response %}\n{% endswagger %}\n\n\n\n## Datatypes Returned\n\n### Images\n\nImages are returned as objects, containing data regarding how many images were returned, as well as the media url and the image zuid\n\n```\n\"imageRef\" : {\n    \"type\": \"images\",\n    \"totalItems\": 2,\n    \"data\": [\n        {\n            \"type\": \"image\",\n            \"zuid\": \"3-image-zuid\",\n            \"url\": \"https:\\/\\/instance.media.zestyio.com\\/path\\/to\\/.jpg\"\n        },\n        {\n            \"type\": \"image\",\n            \"zuid\": \"3-image-zuid\",\n            \"url\": \"https:\\/\\/instance.media.zestyio.com\\/path\\/to\\/.jpg\"\n        }\n    ]\n}\n```\n\n### Relationships\n\nRelationships (such as `one-to-one` and `one-to-many`) are returned as objects, containing data regarding how many items are related (`one-to-one` relationships will always return 1) , as well as a resource URI to retrieve more data on the related item\n\n```\n\"relationshipRef\": {\n    \"type\": \"relationship\",\n    \"totalItems\": 2,\n    \"data\": [\n        {\n            \"type\": \"item\",\n            \"zuid\": \"7-zuid\",\n            \"resourceURI\": \"\\/-\\/instant\\/7-zuid.json\"\n        },\n        {\n            \"type\": \"item\",\n            \"zuid\": \"7-zuid\",\n            \"resourceURI\": \"\\/-\\/instant\\/7-zuid.json\"\n        }\n    ]\n},\n```\n","category":"guides","service":"webengine"},{"name":"GraphQL","url":"/webengine/guides/graphql","objectId":"-MQryVMXEc5ztVMHFzG3","item":[],"content":"---\ndescription: Endpoints available to power a GraphQL (GQL) server\n---\n\n# GraphQL\n\nZesty.io provides endpoints to power a GraphQL server for any instance, you can follow a full tutorial to launch an Apollo GQL server by using this code base on Github [https://github.com/zesty-io/graphql-zesty](https://github.com/zesty-io/graphql-zesty)\n\n### How to Turn on GQL\n\nFor any Zesty.io Content Instance you may turn on the GQL setting in the content manager > settings > developer. The settings are named \\[developer]\\[gql] and \\[developer]\\[gql\\_origin], if these setting are missing from your instance, reach out to the support slack to have them added.\n\n![](<../../.gitbook/assets/image (31).png>)\n\n### How to Use GQL\n\nWhen GQL is turned on, endpoints will become available at the instance domain like `https://www.acme.com/-/gql/` which is a map file that shows all the endpoints needed.&#x20;\n\n![](../../.gitbook/assets/image.png)\n\n### Deploy a GQL Server\n\nTo Deploy a GQL server using Zesty.io, use this code base  [https://github.com/zesty-io/graphql-zesty](https://github.com/zesty-io/graphql-zesty)\n","category":"guides","service":"webengine"}],"content":"---\ndescription: >-\n  WebEngine is a server side rendering origin for rich content and data. It\n  communicate with popular CDNs and have handle versioned or published states.\n---\n\n# WebEngine\n\nAt the foundation of every Zesty.io instance is WebEngine, a rendering service which powers the dynamic rendering of full page HTML, stand-alone files of any datatype, automated JSON output, proxied remote files, and more. WebEngine has all the logic built in to instantly become your domains origin to power on-the-fly search engine rich content.&#x20;\n\nThe most foundational part of WebEngine is powering HTML or JSON views that are associated with the content items entered into [content models](../../../instances/ui/schema/content-models.md). Each content item can power a dynamic rich HTML view or automated JSON which has all the content relationships hydrated.  &#x20;\n\nDepending on the [WebEngine mode](modes.md), when a content items route is hit `/about/` for example, either a fully rendered HTML page will be delivered, or, a fully hydrated JSON object of route's the content item.&#x20;\n\n**Full Page Rendering - Hybrid and Traditional Modes**\n\nEach content model created on a Zesty.io instance comes with a editable HTML view that can be customized to any design. Pages can be wrapped in snippets like `headers` and `footers`. Each view is wrapped in a body with an automated head of title, meta, og:tags, CSS links, and JavaScript references. The head can [optionally be customized](meta-tags/custom-head-overwrite.md). &#x20;\n\n**Automated JSON - Headless Mode**\n\nWhen WebEngine runs in [headless mode](modes.md#headless-mode-headless), it converts all routes associated to a content item and converts that data into fully hydrated JSON.&#x20;\n\n{% code title=\"https://www.zesty.io/?toJSON\" %}\n```javascript\n{\n    title: \"Your Content, Anywhere\",\n    content: \"<h1>A CONTENT PLATFORM THAT POWERS ENTERPRISE GRADE WEBSITES AND APPLICATIONS</h1>\",\n    image: {\n        type: \"images\",\n        totalItems: 1,\n        data: [\n            {\n                type: \"image\",\n                zuid: \"3-5c58033-eb8cq\",\n                url: \"https://zestyio.media.zestyio.com/Zesty.io---9-5seg.mp4\"\n            }\n        ]\n    },\n    customer_logo_heading: \"Trusted by enterprises, startups, and everyone in between\",\n    main_headline: \"Managing content at scale is difficult.\",\n    main_description: \"<ul><li><p>Security issues, and out of date software</p></li><li><p>Editing the same content in multiple places</p></li><li><p>Developers needed for content updates</p></li></ul><h1>..but it doesn’t have to be</h1><ul><li><p>Centralized content management</p></li><li><p>Automated security and product improvements</p></li><li><p>Easy Distribution at global scale</p></li></ul>\",\n    pagina_nueva: null,\n    og_image: {\n    type: \"images\",\n    totalItems: 1,\n    data: [\n            {\n                type: \"image\",\n                zuid: \"3-a4f5ca6-a25px\",\n                url: \"https://kfg6bckb.media.zestyio.com/zesty-share-image-generic.png\"\n            }\n        ]\n    },\n    meta: {\n        type: \"item\",\n        model_name: \"homepage\",\n        zuid: \"7-31209c-g7qsjg\",\n        createdAt: \"2020-10-01 06:33:30\",\n        updatedAt: \"2020-10-01 06:33:29\",\n        listed: \"1\",\n        version: \"200\",\n        locale: {\n            id: \"1\",\n            name: \"English (United States)\",\n            code: \"en-US\",\n            default: \"1\",\n            active: \"1\",\n            enabled: \"1\"\n        },\n        model: {\n            type: \"model\",\n            zuid: \"6-31079c-vdg69q\",\n            name: \"homepage\",\n            label: \"Homepage\",\n            resourceURI: \"https://www.zesty.io/-/instant/6-31079c-vdg69q.json\"\n        },\n        web: {\n            url: \"https://www.zesty.io/\",\n            uri: \"/\",\n            fragment: \"zesty_home\",\n            canonical_tag_mode: \"1\",\n            sitemap_priority: \"-1.0\",\n            sitemap_last_updated: \"2020-10-01 06:33:29\",\n            canonical_query_param_whitelist: null,\n            canonical_tag_custom_value: null,\n            seo_link_text: \"Homepage\",\n            seo_meta_title: \"Zesty.io: The Headless CMS for Marketers + Developers\",\n            seo_meta_description: \"Built for teams to manage and distribute content to multiple sites, devices, and anywhere else it needs to go.\",\n            seo_meta_keywords: null\n        }\n    }\n}\n```\n{% endcode %}\n\n## ****\n","category":"guides","service":"webengine"}],"content":"# Guides\n\n","category":"guides","service":"webengine"},{"name":"Tools & Resources","url":"/tools","objectId":"-M4yy_TmyvFyOHU5cIem","item":[],"category":"tools","service":""},{"name":"tools","url":"/tools","item":[{"name":"Guides","url":"/tools/guides","objectId":"-Lb5BphhAwMVeJwrjG36","item":[],"content":"---\ndescription: >-\n  Our guides will help you build out different aspects of your instance from\n  adding forms to coding in one-to-many field relationships.\n---\n\n# Guides\n\n","category":"guides","service":"tools"},{"name":"guides","url":"/tools/guides","item":[{"name":"Layouts App","url":"/tools/guides/layouts-app","objectId":"eBJb71TtOwxLrXWZ9Tds","item":[],"content":"---\ndescription: >-\n  The Layouts App allows you to drag and drop components and work with Zesty\n  content in a codeless environment.\n---\n\n# Layouts App\n\nThis documentation is an overview of Zesty’s new Layouts app which covers the installation, usage, and creation of custom components.\n\n### Installing the Layouts App\n\nZesty’s Layouts app is available for download in Zesty’s Marketplace > Apps > [Layouts](https://www.zesty.io/marketplace/apps/page-layout-designer/)\n\nYou may also access it from the UI by clicking the +Marketplace tab.\n\n*   Start the installation by selecting an Instance (in Search bar dropdown) that you will be working on with the Layouts app.\\\\\n\n    <figure><img src=\"https://lh6.googleusercontent.com/5X2sasJp-Hstlnww2Psne0kDw6e6XN3mrBj3tYUKvgFUwUbb5HdnijD40a1iK_iAHkbSS1g4ttBIk2s5j-Kugdy02hN9dRApK2Pj6MgbwgHYln055zNbstC3pwEGo3rE0e5W4JU0ICXe2rjgtC6V8eicWmYO8tiKe5CsdbD6aD-Tz_dpesSBjz9qcVGjiQ\" alt=\"\"><figcaption></figcaption></figure>\n*   Click “Install Layouts in \\[Instance Name]” and wait for it to be installed in your selected Instance.\\\\\n\n    <figure><img src=\"https://lh4.googleusercontent.com/Aex2ibZYJ10Ueccd0Z28Wdc8Z8Frh0pKz1rrCkVLi2AbGj_5hxI7YE-aXoWa7R_jEin5g-jeIkxthOJBzw_h_LSS_Z1NC1wjF6Luz6XEGk7eZL6Papz1-7gZlS5PlIfhu2jffRSO28a_dWxM7IZHiuse_mmRUROX1zYPbHfdRb3rk49qGfDt3CSe32spdg\" alt=\"\"><figcaption></figcaption></figure>\n* Once installed, the Layouts app will be shown at the left navigation pane of your Instance. See below image for reference.\n\n<figure><img src=\"https://lh4.googleusercontent.com/RsAwFYGZHU1UWnUK28vEKqQ5h79Cl3yE-fgoFB7zc6iXEhRGjtPQjFj4XDwTK2knX_8FItDLxm5TBezQDAGfmZCd0ZgMq7ll9d8lf-KwL7EBIRqY_LhO1FKpzZHGOGvxKJxk9SvQDDlKELviJzeoUy4hpRdloQlm-FbWow0Cfd3219p4F5cw6naX3bpJKQ\" alt=\"\"><figcaption></figcaption></figure>\n\n### Layouts UI Overview\n\nThe Layouts interface is mainly of file toolbars, canvas/layout preview, content selector, layout design tools, and components tool.\n\n* File - hotkeys\n  * Change Model - Ctrl+M / Command+M\n  * Save - Ctrl+S / Command+S\n  * Publish - Ctrl+P / Command+P\n\n<figure><img src=\"https://lh6.googleusercontent.com/PQveFlCxsp7LxoRota5_52hcnssBMgni1nnvFJSdSMLCGS4TXgduabHHWXw2azp48WNh36z_yQNprYs8AO2IJls5h7P4t0Pa_OlMSxVvODuqhc5Pbz1Mm-RhFyGoHIczGZOlpdZakqAfzcf5Mjp2U003SXzKF42ogiaCR41aMjzenNlPXXpxjAETEnBsQQ\" alt=\"\"><figcaption></figcaption></figure>\n\n* Edit - hotkeys\n  * Undo - Ctrl+Z / Command+Z\n  * Redo - Ctrl+Y / Command+Y\n\n<figure><img src=\"https://lh3.googleusercontent.com/vhTr2gw_rDK-zP3GEGahUzazj4z8frp-ozpnp9V7kHmQXbRRA2ICONB8vqtkOKU12suql-lbXaNKYjMNwgCvbcPnVW6Tl4LMeQr5ZMGfHACvGpidTmjHx0LYzKcbNBF3FqdQhpmNVfcOxL32R-1MxFH8d3vZ3rMsqurdX0dgDE5j9tmTozOX52PZbxnlnA\" alt=\"\"><figcaption></figcaption></figure>\n\n* View - hotkeys\n  * Visual Layout - Ctrl+1 / Command+1\n  * ZHTML Output - Ctrl+2 / Command+2\n  * JSON Output - Ctrl+3 / Command+3\n  * Layout Preview - Ctrl+4 / Command+4\n  * Page Preview - Ctrl+5 / Command+5\n  * Toggle Sidebar - Ctrl+B / Command+B\n* Help\n  *   Hotkeys\n\n      <figure><img src=\"../../../.gitbook/assets/layouts - hotkeys.png\" alt=\"\"><figcaption></figcaption></figure>\n  *   How it works\n\n      <figure><img src=\"../../../.gitbook/assets/layouts - how it works.png\" alt=\"\"><figcaption></figcaption></figure>\n  *   About\n\n      <figure><img src=\"../../../.gitbook/assets/layouts - about.png\" alt=\"\"><figcaption></figcaption></figure>\n\n      <figure><img src=\"https://lh6.googleusercontent.com/eW4oKnlN2ItPuKZc53iyg_YKr_rRg4R4ns83zG1pkQnjnd1KQ4o0eyKumrmiJd4HWD3pvw3gfaPodgmZI62KQ4kNMQ3usGAcPBJ_yhMZSh_O1GdSkffj9CqagXxA1xyp4E8J9rF_M3Nuetg5rByoyTzp3rB_qkiBtZuaN4TS0KevWeaC970w_5bGbS32Dg\" alt=\"\"><figcaption></figcaption></figure>\n* Components\n  * Add Component (component / design type)\n  * Edit / Delete a component\n  *   Manage Model\\\n      `To manage a model you'll get redirected to the schema route of your instance in order to manager your model.`\n\n      <figure><img src=\"https://lh6.googleusercontent.com/PcI9bd3VsLS9UQtqutRGR9fBc1iICba3CN9Ki1hymImloq4dfDK4bfg1s8EE1_2OyPm6ZK0vRoxAq1DYs8IOlXHYeXAloqBQrsVufhagz0qqUamZ8VqArxMdBjNhNpzs0HXRm2tia-3s5nyiOsryp3HbGG1l53dQY51I8MgdWNimdry58s2WMQV58WksfA\" alt=\"\"><figcaption></figcaption></figure>\n*   Content Model Selector\\\n    `Helpful for quick search and selection of your model.`\n\n    <figure><img src=\"https://lh3.googleusercontent.com/j8oS7BEqpLFSdG51biSMAyxIGIqy7d4miL13X5E29FQ3U7YE9QnNyQ5CTXTR2BD5eUQI-ZA8K19RIcc6yn4UwqQ_2t4pnRLEvGt3tTp5Fyy63OnWOQO9BZlFs38C2tvVVOE0NToZuzAvY3LvWX428GwrC5nGz5eBoy2nvc2BKGohVsUb4YhBpvG9qE_ycg\" alt=\"\"><figcaption></figcaption></figure>\n*   Layout Design Tools\\\n    `These helps to group your content or put additional design.`\n\n    <figure><img src=\"https://lh6.googleusercontent.com/lCbS7vq2RxM3yz0LFkfvBOuGG-ZIl8GHamReX4C6trdSNOLHePzFZZF345avU_5-hHbFYaDTfR36f57AL8gH0bWhJjC4fcLAirAvzI8QclBFW0FUkHFwkf7DjtvqniAWsOhfajBhHPmPFZhIGkCOqiBecc4x2ZEuxeHIcsKwFDrhE-XFDNBrSJv2CE0_mg\" alt=\"\"><figcaption></figcaption></figure>\n*   Component Design Tools\\\n    `Lists of your created components`\n\n    <figure><img src=\"https://lh6.googleusercontent.com/Js-V-WHSZRLiFFfdi3Y3UuLT6s5pXAZ0jncXl-Qn2UmUSHZfs0EX33WtStdpNnTm3Ad1Y_oTxnTKv9J3vOKDi5N_eoDCnCoQHcp7voOgIr_xTfTI0a4iqWKUtUElmHE2_FXJasulcJLns25y1E92Okw3g_pwwuIM11ZeJehnNsxCHq1DXvq-ujGv2aFXaw\" alt=\"\"><figcaption></figcaption></figure>\n* Layout Canvas\n\n1.  Default view - user may collapse each sidebar for a wider canvas.\n\n    <figure><img src=\"https://lh4.googleusercontent.com/SoKSRZdsPoG92bC4_zPQ-TgkfXUfOX1uVUh5ketDuTePjnnaHk-4X2_wPBHvkfaCX3kZUf3J-Lus6MYuCxwzPKsPo8kOsU8sX_I3UFLvebjfN8rQKRcLihMNoIYpq7OmAiOCycIkjDg9qV7ifKcW1fEEcYkcZFcOGNjqCtNnkwpxpdW4rJiEl8pXs-xmOA\" alt=\"\"><figcaption></figcaption></figure>\n2.  Collapsed view - canvas when each sidebar is collapsed.\n\n    <figure><img src=\"https://lh4.googleusercontent.com/-CPiqEXcY2Pu8a0DcHKw2LsAGxmD8OryZ6my4aJfXgCjzAyMqDYvzbhMcuiQ3uFJpQfzyO5J8qprz1sal7DjdYKFQQ41Il_UKcKzDIjD-1pVf7c_Y3VLlZODYF-yQnNq_2SpMQ83eyM5Q-PMPTjXKBYMMbbt51bJGH9guE-Vm1Kytd7Uf6JDv1OLG-GiBQ\" alt=\"\"><figcaption></figcaption></figure>\n\nTip: `Ctrl+B` to toggle the view.\n\n### Building Pages using Layouts\n\nUsing the Layouts app, you can easily create/design web pages with the pre-built Layout Design Tools\\\\\n\n* Start by selecting a Content Model in the dropdown selection (eg. Articles) to work with Layouts.\n* Select a layout design available in the Layout Design Tools which you can drag and drop into your canvas/page view.\n* You can use all the items in sidebar to drag in your canvas to layout your page\n* You can create your custom component, drag design tools.\n* There are available shortcuts to make your creation of layout seamless.\n","category":"guides","service":"tools"},{"name":"layouts-app","url":"/tools/guides/layouts-app","item":[{"name":"Creating Custom Components with Parsley","url":"/tools/guides/layouts-app/creating-custom-components-with-parsley","objectId":"nU1NiBZAVmkSrYHdLYk4","item":[],"content":"---\ndescription: Using Zesty's drag and drop option using the Layouts App\n---\n\n# Creating Custom Components with Parsley\n\nFirst, Install the [Layouts App](https://www.zesty.io/marketplace/apps/page-layout-designer/) to your instance from our marketplace.\n\n### Select your content model\n\nA layout is created against a content model which will dictate the default structure of all items within the content model. For example, if you have a multi-page content model called Articles, then you can create a Layout that will reflect the structure for all items created within that model, ie: all articles.\n\n### Drag and drop\n\nOpen the Layouts app from the left navigation tree. Select the content model you would like to design.\n\n<figure><img src=\"../../../.gitbook/assets/Screenshot 2023-01-20 at 3.29.05 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\nStart building out your design with our existing design elements such as a 2 columns. Then add content by dragging the field element. The Layouts app will automatically display the content model's configured fields.\n\n<figure><img src=\"../../../.gitbook/assets/dragdrop.gif\" alt=\"\"><figcaption></figcaption></figure>\n\n### Create your own components\n\nCreate your custom components to expand on the drag and drop options of the Layouts app. Give it a name, class, an image url (used as the thumbnail in the app), and add your code. For added simplicity, you can even call Parsley in the component's code!\n\n<figure><img src=\"../../../.gitbook/assets/component.gif\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"../../../.gitbook/assets/Screenshot 2023-01-20 at 3.44.50 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Using Parsley for custom components\n\nIn the Code app, create a new snippet file.\n\n<figure><img src=\"../../../.gitbook/assets/createComponent.gif\" alt=\"\"><figcaption></figcaption></figure>\n\nAdd your code, you can even call content dynamically using Parsley. Your snippet file can now be used within your custom component by using the `include` Parsley call. For example, a snippet created with the file name: `/components/myComponent` can be called with the following syntax: `{{ include /components/myComponent }}`\n\n<figure><img src=\"../../../.gitbook/assets/code.gif\" alt=\"\"><figcaption></figcaption></figure>\n\nThat's it! You will see your custom component available to be dragged and dropped within the Layouts app. If you are using dynamic Parsley calls within its snippet file, you will see that rendered within the app.\n\n<figure><img src=\"../../../.gitbook/assets/done.gif\" alt=\"\"><figcaption></figcaption></figure>\n","category":"guides","service":"tools"},{"name":"Creating Custom Components with NextJS","url":"/tools/guides/layouts-app/creating-custom-components-with-nextjs","objectId":"9iswzFugv1NLwd16TyA5","item":[],"content":"# Creating Custom Components with NextJS\n\n### How to use app layouts with zesty NextJS starter\n\nLearn how to develop a landing page on Zesty CMS using Zesty Layouts and Next.js.\n\n### What is Zesty Layouts?\n\nZesty Layouts allows users to create custom page layouts for their website or application. It is a unique visual tool that allows non-technical users to create professional pages even when their site or application is built on a headless framework such as Next.js.\n\nThis tutorial will walk you through how to leverage Zesty Layouts with Next.js to create a marketing landing page.\n\nWe'll start by using the starter template, and then we'll put our new skills to the test by building a snazzy marketing landing page.\n\nThis is the preview of the final page we will be creating in this tutorial.\n\n### Step 1: Create a new instance in your Zesty account\n\nOur first step is to create a new instance in your Zesty account. To do so, navigate to the navigation bar at the top of your screen and click the **create instance button.**\n\nYou will be taken to an setup flow where you’ll be asked to choose a starter template. In this tutorial, we will be using the blank template.\n\nNext, add your project name and description in the fields.\n\nLastly, choose Next.js as your tech stack. Your instance is now configured and we can begin to set up and install the Layouts app from the Marketplace.\n\nOpen the marketplace by going to [https://zesty.io/marketplace](https://zesty.io/marketplace)/, then install the page layout designer or simply click this link [https://www.zesty.io/marketplace/apps/page-layout-designer/](https://www.zesty.io/marketplace/apps/page-layout-designer/) and select the instance we just created earlier.\n\nNow return to the Zesty CMS manager and you should be able to see **Layouts** there, added as an extension on the right-hand navigation bar.\n\nNow we will move on to creating our brand new Next.js app.\n\n### Step 2: Create a new Next.js project using the starter template\n\nNow, let’s create a new Next.js project using the Zesty starter template. Open your terminal and paste this command.\n\n```jsx\nnpx create-next-app --example https://github.com/zesty-io/nextjs-starter\n```\n\nAdd a name to your project. In this tutorial, I’m going to name mine “layouts-demo” but feel free to choose any name that fits into your own project. Now we wait for the packages to get installed. It might take around a minute or two to complete, depending on your internet speed.\n\nAfter the package installation is complete, you have to answer a few questions in the prompt and then log in using your Zesty account.\n\nLastly, choose the working instance that we created in the first step.\n\nChange “directory” into your project folder and it should be ready.\n\nOne final step in our setup is to install the react-auto-layout NPM package.\n\n```jsx\nnpm i @zesty-io/react-autolayout\n```\n\nOnce that is complete, you are now ready to start your development server by running:\n\n```jsx\nnpm run dev\n```\n\n### Step 3: Create new components and template setup\n\nNow, that the starter template is complete, we can start working on your marketing landing page. Let’s start by creating our navigation.\n\nFrom our project folder head over to **components > header.js** and paste our navigation code from below to overwrite the current one.\n\n```jsx\n<header aria-label=\"Site Header\" className=\"bg-white\">\n      <div className=\"mx-auto flex h-16 max-w-screen-xl items-center gap-8 px-4 sm:px-6 lg:px-8\">\n        <a className=\"block text-teal-600\" href=\"/\">\n          <span className=\"sr-only\">Home</span>\n          <svg\n            className=\"h-8\"\n            viewBox=\"0 0 28 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M0.41 10.3847C1.14777 7.4194 2.85643 4.7861 5.2639 2.90424C7.6714 1.02234 10.6393 0 13.695 0C16.7507 0 19.7186 1.02234 22.1261 2.90424C24.5336 4.7861 26.2422 7.4194 26.98 10.3847H25.78C23.7557 10.3549 21.7729 10.9599 20.11 12.1147C20.014 12.1842 19.9138 12.2477 19.81 12.3047H19.67C19.5662 12.2477 19.466 12.1842 19.37 12.1147C17.6924 10.9866 15.7166 10.3841 13.695 10.3841C11.6734 10.3841 9.6976 10.9866 8.02 12.1147C7.924 12.1842 7.8238 12.2477 7.72 12.3047H7.58C7.4762 12.2477 7.376 12.1842 7.28 12.1147C5.6171 10.9599 3.6343 10.3549 1.61 10.3847H0.41ZM23.62 16.6547C24.236 16.175 24.9995 15.924 25.78 15.9447H27.39V12.7347H25.78C24.4052 12.7181 23.0619 13.146 21.95 13.9547C21.3243 14.416 20.5674 14.6649 19.79 14.6649C19.0126 14.6649 18.2557 14.416 17.63 13.9547C16.4899 13.1611 15.1341 12.7356 13.745 12.7356C12.3559 12.7356 11.0001 13.1611 9.86 13.9547C9.2343 14.416 8.4774 14.6649 7.7 14.6649C6.9226 14.6649 6.1657 14.416 5.54 13.9547C4.4144 13.1356 3.0518 12.7072 1.66 12.7347H0V15.9447H1.61C2.39051 15.924 3.154 16.175 3.77 16.6547C4.908 17.4489 6.2623 17.8747 7.65 17.8747C9.0377 17.8747 10.392 17.4489 11.53 16.6547C12.1468 16.1765 12.9097 15.9257 13.69 15.9447C14.4708 15.9223 15.2348 16.1735 15.85 16.6547C16.9901 17.4484 18.3459 17.8738 19.735 17.8738C21.1241 17.8738 22.4799 17.4484 23.62 16.6547ZM23.62 22.3947C24.236 21.915 24.9995 21.664 25.78 21.6847H27.39V18.4747H25.78C24.4052 18.4581 23.0619 18.886 21.95 19.6947C21.3243 20.156 20.5674 20.4049 19.79 20.4049C19.0126 20.4049 18.2557 20.156 17.63 19.6947C16.4899 18.9011 15.1341 18.4757 13.745 18.4757C12.3559 18.4757 11.0001 18.9011 9.86 19.6947C9.2343 20.156 8.4774 20.4049 7.7 20.4049C6.9226 20.4049 6.1657 20.156 5.54 19.6947C4.4144 18.8757 3.0518 18.4472 1.66 18.4747H0V21.6847H1.61C2.39051 21.664 3.154 21.915 3.77 22.3947C4.908 23.1889 6.2623 23.6147 7.65 23.6147C9.0377 23.6147 10.392 23.1889 11.53 22.3947C12.1468 21.9165 12.9097 21.6657 13.69 21.6847C14.4708 21.6623 15.2348 21.9135 15.85 22.3947C16.9901 23.1884 18.3459 23.6138 19.735 23.6138C21.1241 23.6138 22.4799 23.1884 23.62 22.3947Z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n        </a>\n\n        <div className=\"flex flex-1 items-center justify-end md:justify-between\">\n          <nav aria-label=\"Site Nav\" className=\"hidden md:block\">\n            <ul className=\"flex items-center gap-6 text-sm\">\n              <li>\n                <a\n                  className=\"text-gray-500 transition hover:text-gray-500/75\"\n                  href=\"/\"\n                >\n                  About\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"text-gray-500 transition hover:text-gray-500/75\"\n                  href=\"/\"\n                >\n                  Careers\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"text-gray-500 transition hover:text-gray-500/75\"\n                  href=\"/\"\n                >\n                  History\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"text-gray-500 transition hover:text-gray-500/75\"\n                  href=\"/\"\n                >\n                  Services\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"text-gray-500 transition hover:text-gray-500/75\"\n                  href=\"/\"\n                >\n                  Projects\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"text-gray-500 transition hover:text-gray-500/75\"\n                  href=\"/\"\n                >\n                  Blog\n                </a>\n              </li>\n            </ul>\n          </nav>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"sm:flex sm:gap-4\">\n              <a\n                className=\"block rounded-md bg-teal-600 px-5 py-2.5 text-sm font-medium text-white transition hover:bg-teal-700\"\n                href=\"/\"\n              >\n                Login\n              </a>\n\n              <a\n                className=\"hidden rounded-md bg-gray-100 px-5 py-2.5 text-sm font-medium text-teal-600 transition hover:text-teal-600/75 sm:block\"\n                href=\"/\"\n              >\n                Register\n              </a>\n            </div>\n\n            <button className=\"block rounded bg-gray-100 p-2.5 text-gray-600 transition hover:text-gray-600/75 md:hidden\">\n              <span className=\"sr-only\">Toggle menu</span>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M4 6h16M4 12h16M4 18h16\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n```\n\nNow let’s do the same with our **footer.js**\n\n```jsx\n<footer aria-label=\"Site Footer\" className=\"bg-white\">\n      <div className=\"max-w-screen-xl px-4 py-16 mx-auto space-y-8 sm:px-6 lg:space-y-16 lg:px-8\">\n        <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3\">\n          <div>\n            <div className=\"text-teal-600\">\n              <svg\n                className=\"h-8\"\n                viewBox=\"0 0 118 24\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M37.83 19.2047C37.2352 19.237 36.6469 19.0679 36.16 18.7247C35.9566 18.5739 35.7929 18.3758 35.6831 18.1476C35.5733 17.9193 35.5208 17.6678 35.53 17.4147V8.1447C35.5252 8.1055 35.5293 8.0656 35.5422 8.0282C35.555 7.9908 35.5762 7.9569 35.6042 7.9289C35.6322 7.9009 35.6661 7.8797 35.7035 7.8669C35.7409 7.854 35.7808 7.8499 35.82 7.8547H37.5C37.69 7.8547 37.78 7.9547 37.78 8.1447V16.6947C37.78 17.0747 37.95 17.2647 38.3 17.2647C38.4484 17.2708 38.5968 17.254 38.74 17.2147C38.94 17.2147 39.05 17.2747 39.06 17.4547L39.21 18.7047C39.2172 18.7412 39.2165 18.7787 39.208 18.8149C39.1995 18.851 39.1833 18.885 39.1605 18.9143C39.1378 18.9437 39.109 18.9679 39.0762 18.9852C39.0433 19.0025 39.0071 19.0126 38.97 19.0147C38.602 19.1363 38.2175 19.2004 37.83 19.2047Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M47.28 18.1347C46.4359 18.8322 45.375 19.2137 44.28 19.2137C43.185 19.2137 42.1242 18.8322 41.28 18.1347C40.5381 17.3857 40.1218 16.374 40.1218 15.3197C40.1218 14.2654 40.5381 13.2537 41.28 12.5047C42.1258 11.8108 43.186 11.4316 44.28 11.4316C45.374 11.4316 46.4342 11.8108 47.28 12.5047C48.0049 13.2606 48.4096 14.2674 48.4096 15.3147C48.4096 16.362 48.0049 17.3688 47.28 18.1247V18.1347ZM42.86 16.8147C43.2518 17.1696 43.7614 17.3661 44.29 17.3661C44.8186 17.3661 45.3283 17.1696 45.72 16.8147C46.0746 16.4071 46.2698 15.885 46.2698 15.3447C46.2698 14.8045 46.0746 14.2824 45.72 13.8747C45.3283 13.5199 44.8186 13.3233 44.29 13.3233C43.7614 13.3233 43.2518 13.5199 42.86 13.8747C42.5055 14.2824 42.3102 14.8045 42.3102 15.3447C42.3102 15.885 42.5055 16.4071 42.86 16.8147Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M57.66 11.6847C57.85 11.6847 57.94 11.7847 57.94 11.9747V19.1447C57.9575 19.6287 57.8669 20.1104 57.6749 20.5549C57.4829 20.9995 57.1943 21.3957 56.83 21.7147C56.0214 22.4042 54.9816 22.7615 53.92 22.7147C52.9612 22.7484 52.0151 22.4866 51.21 21.9647C50.8662 21.739 50.5725 21.4449 50.3472 21.1009C50.1218 20.7568 49.9696 20.3701 49.9 19.9647C49.9 19.7647 49.9 19.6747 50.17 19.6747H51.85C51.9213 19.6771 51.9905 19.7002 52.049 19.741C52.1076 19.7818 52.1531 19.8386 52.18 19.9047C52.289 20.2084 52.5062 20.4613 52.79 20.6147C53.1359 20.7932 53.5209 20.8826 53.91 20.8747C54.1448 20.8876 54.3798 20.8535 54.6013 20.7745C54.8228 20.6956 55.0263 20.5732 55.2 20.4147C55.3587 20.2489 55.4821 20.0526 55.5629 19.8378C55.6437 19.623 55.6801 19.394 55.67 19.1647V18.5347C55.0685 18.9771 54.3364 19.2059 53.59 19.1847C53.0676 19.2037 52.5468 19.117 52.0587 18.9297C51.5707 18.7423 51.1256 18.4584 50.75 18.0947C50.0291 17.3489 49.6261 16.3521 49.6261 15.3147C49.6261 14.2774 50.0291 13.2806 50.75 12.5347C51.1274 12.1743 51.5731 11.8931 52.0608 11.7076C52.5486 11.5221 53.0685 11.4361 53.59 11.4547C54.358 11.4344 55.1098 11.678 55.72 12.1447V11.9847C55.7154 11.9464 55.7194 11.9075 55.7317 11.8709C55.744 11.8344 55.7643 11.801 55.7911 11.7732C55.8179 11.7454 55.8506 11.724 55.8867 11.7104C55.9229 11.6968 55.9616 11.6915 56 11.6947L57.66 11.6847ZM53.78 17.4047C54.0376 17.4127 54.2939 17.364 54.5306 17.262C54.7673 17.1601 54.9788 17.0074 55.15 16.8147C55.4825 16.3854 55.6629 15.8577 55.6629 15.3147C55.6629 14.7717 55.4825 14.2441 55.15 13.8147C54.9794 13.6247 54.7692 13.4742 54.5343 13.374C54.2993 13.2738 54.0453 13.2263 53.79 13.2347C53.5294 13.2265 53.2702 13.275 53.0302 13.3769C52.7902 13.4788 52.5752 13.6316 52.4 13.8247C52.0317 14.2354 51.838 14.7735 51.86 15.3247C51.842 15.8705 52.0314 16.4029 52.39 16.8147C52.5656 17.0073 52.7807 17.1598 53.0206 17.2616C53.2605 17.3634 53.5195 17.4122 53.78 17.4047Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M66.57 18.1347C65.7242 18.8286 64.664 19.2078 63.57 19.2078C62.476 19.2078 61.4158 18.8286 60.57 18.1347C59.8445 17.3771 59.4395 16.3687 59.4395 15.3197C59.4395 14.2708 59.8445 13.2623 60.57 12.5047C61.4166 11.8126 62.4765 11.4345 63.57 11.4345C64.6635 11.4345 65.7234 11.8126 66.57 12.5047C67.2949 13.2606 67.6996 14.2674 67.6996 15.3147C67.6996 16.362 67.2949 17.3688 66.57 18.1247V18.1347ZM62.14 16.8147C62.3317 16.9971 62.5577 17.1396 62.8049 17.234C63.0521 17.3284 63.3155 17.3729 63.58 17.3647C63.8428 17.3715 64.1044 17.3265 64.3498 17.2321C64.5952 17.1377 64.8195 16.9959 65.01 16.8147C65.3588 16.4043 65.5503 15.8833 65.5503 15.3447C65.5503 14.8061 65.3588 14.2851 65.01 13.8747C64.8195 13.6936 64.5952 13.5517 64.3498 13.4574C64.1044 13.363 63.8428 13.3179 63.58 13.3247C63.3155 13.3166 63.0521 13.361 62.8049 13.4554C62.5577 13.5498 62.3317 13.6924 62.14 13.8747C61.7913 14.2851 61.5998 14.8061 61.5998 15.3447C61.5998 15.8833 61.7913 16.4043 62.14 16.8147Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M71.31 9.9847C71.0457 10.2161 70.7063 10.3436 70.355 10.3436C70.0037 10.3436 69.6644 10.2161 69.4 9.9847C69.2802 9.8716 69.1847 9.7352 69.1194 9.5839C69.0542 9.4326 69.0205 9.2695 69.0205 9.1047C69.0205 8.9399 69.0542 8.7769 69.1194 8.6255C69.1847 8.4742 69.2802 8.3378 69.4 8.2247C69.6671 7.9991 70.0054 7.8754 70.355 7.8754C70.7046 7.8754 71.0429 7.9991 71.31 8.2247C71.4299 8.3378 71.5254 8.4742 71.5906 8.6255C71.6559 8.7769 71.6895 8.9399 71.6895 9.1047C71.6895 9.2695 71.6559 9.4326 71.5906 9.5839C71.5254 9.7352 71.4299 9.8716 71.31 9.9847ZM71.52 19.2047C70.9256 19.2339 70.3383 19.0651 69.85 18.7247C69.6497 18.5717 69.4888 18.3729 69.381 18.145C69.2731 17.9171 69.2213 17.6667 69.23 17.4147V11.9747C69.2252 11.9355 69.2293 11.8956 69.2422 11.8582C69.255 11.8208 69.2762 11.7869 69.3042 11.7589C69.3322 11.7309 69.3661 11.7097 69.4035 11.6969C69.4409 11.684 69.4808 11.6799 69.52 11.6847H71.2C71.39 11.6847 71.48 11.7847 71.48 11.9747V16.6947C71.48 17.0747 71.65 17.2647 71.99 17.2647C72.1417 17.2702 72.2933 17.2533 72.44 17.2147C72.64 17.2147 72.75 17.2747 72.76 17.4547L72.91 18.7047C72.9172 18.7412 72.9165 18.7787 72.908 18.8149C72.8995 18.851 72.8833 18.885 72.8605 18.9143C72.8378 18.9437 72.809 18.9679 72.7762 18.9852C72.7433 19.0025 72.7071 19.0126 72.67 19.0147C72.2988 19.137 71.9109 19.2011 71.52 19.2047Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M79.09 11.4447C79.6148 11.424 80.1383 11.5089 80.6296 11.6944C81.1209 11.88 81.57 12.1623 81.95 12.5247C82.6572 13.2837 83.0504 14.2824 83.0504 15.3197C83.0504 16.357 82.6572 17.3558 81.95 18.1147C81.5718 18.4804 81.1233 18.7655 80.6317 18.9528C80.1401 19.1402 79.6157 19.2259 79.09 19.2047C78.3412 19.2214 77.6073 18.9932 77 18.5547V22.1647C77 22.3547 76.9 22.4447 76.71 22.4447H75.03C74.9917 22.4519 74.9522 22.4496 74.9149 22.4381C74.8777 22.4265 74.8438 22.4061 74.8162 22.3785C74.7887 22.3509 74.7682 22.3171 74.7567 22.2798C74.7451 22.2426 74.7429 22.2031 74.75 22.1647V13.9647C74.7618 13.8845 74.7546 13.8027 74.7292 13.7257C74.7037 13.6488 74.6605 13.5788 74.6032 13.5215C74.5459 13.4642 74.476 13.4211 74.399 13.3956C74.3221 13.3701 74.2402 13.363 74.16 13.3747H73.83C73.61 13.3747 73.5 13.2947 73.5 13.1347V11.9547C73.4948 11.8817 73.5148 11.8091 73.5567 11.7491C73.5985 11.689 73.6597 11.6451 73.73 11.6247C74.0759 11.499 74.442 11.438 74.81 11.4447C75.177 11.4122 75.5453 11.4901 75.8678 11.6682C76.1902 11.8464 76.4522 12.1168 76.62 12.4447C76.9421 12.1189 77.3273 11.8622 77.752 11.6902C78.1767 11.5183 78.632 11.4347 79.09 11.4447ZM77.53 16.8147C77.7083 17.0011 77.9225 17.1494 78.1597 17.2507C78.3969 17.352 78.6521 17.4042 78.91 17.4042C79.1679 17.4042 79.4232 17.352 79.6603 17.2507C79.8975 17.1494 80.1117 17.0011 80.29 16.8147C80.6656 16.3958 80.8629 15.8469 80.84 15.2847C80.8662 14.7221 80.6684 14.1719 80.29 13.7547C80.1117 13.5684 79.8975 13.4201 79.6603 13.3188C79.4232 13.2174 79.1679 13.1652 78.91 13.1652C78.6521 13.1652 78.3969 13.2174 78.1597 13.3188C77.9225 13.4201 77.7083 13.5684 77.53 13.7547C77.1662 14.1793 76.9768 14.726 77 15.2847C76.9797 15.843 77.1688 16.3887 77.53 16.8147Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M87.77 19.2047C86.8723 19.2416 85.9822 19.0269 85.2 18.5847C84.8862 18.3957 84.619 18.1384 84.4181 17.832C84.2173 17.5256 84.0881 17.1779 84.04 16.8147C84.04 16.6147 84.11 16.5147 84.33 16.5147H85.8C85.8699 16.5175 85.9378 16.5394 85.996 16.5783C86.0542 16.6171 86.1006 16.6712 86.13 16.7347C86.34 17.2747 86.89 17.5447 87.77 17.5447C88.077 17.5588 88.3826 17.4969 88.66 17.3647C88.7558 17.3215 88.8379 17.2531 88.8978 17.1668C88.9577 17.0805 88.993 16.9795 89 16.8747C89 16.6147 88.84 16.4347 88.52 16.3147C88.1405 16.1884 87.7481 16.1045 87.35 16.0647C86.8785 16.0113 86.4109 15.9278 85.95 15.8147C85.5018 15.7133 85.0943 15.4799 84.78 15.1447C84.5949 14.9169 84.4587 14.6534 84.3797 14.3707C84.3008 14.088 84.2809 13.792 84.3212 13.5013C84.3616 13.2105 84.4613 12.9311 84.6142 12.6806C84.7671 12.43 84.9699 12.2136 85.21 12.0447C85.9308 11.5856 86.7765 11.3619 87.63 11.4047C88.4564 11.3768 89.274 11.5812 89.99 11.9947C90.2786 12.1582 90.527 12.3839 90.7173 12.6555C90.9076 12.9271 91.0349 13.2377 91.09 13.5647C91.09 13.7647 91 13.8647 90.82 13.8647H89.34C89.2777 13.8684 89.2157 13.8532 89.1622 13.8211C89.1087 13.789 89.0661 13.7414 89.04 13.6847C88.9411 13.4479 88.7549 13.2581 88.52 13.1547C88.255 13.0161 87.959 12.9472 87.66 12.9547C87.3669 12.9388 87.0745 12.9973 86.81 13.1247C86.7168 13.1607 86.6366 13.2237 86.5795 13.3057C86.5225 13.3877 86.4913 13.4849 86.49 13.5847C86.4964 13.7215 86.5465 13.8526 86.6329 13.9588C86.7193 14.065 86.8374 14.1406 86.97 14.1747C87.354 14.3195 87.7533 14.4201 88.16 14.4747C88.6277 14.5363 89.0917 14.6231 89.55 14.7347C89.9982 14.8362 90.4057 15.0695 90.72 15.4047C90.8882 15.5894 91.018 15.8055 91.1021 16.0407C91.1862 16.2758 91.2229 16.5253 91.21 16.7747C91.2186 17.1204 91.1375 17.4624 90.9745 17.7674C90.8115 18.0723 90.5722 18.3298 90.28 18.5147C89.5329 18.9944 88.6574 19.235 87.77 19.2047Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M101.78 18.7047C101.786 18.7402 101.784 18.7765 101.776 18.8114C101.767 18.8464 101.752 18.8792 101.73 18.9081C101.709 18.937 101.682 18.9613 101.651 18.9796C101.62 18.9979 101.586 19.0098 101.55 19.0147C101.185 19.1339 100.804 19.198 100.42 19.2047C100.04 19.2441 99.656 19.1847 99.306 19.0323C98.955 18.8799 98.65 18.6396 98.42 18.3347C97.714 18.942 96.8 19.2536 95.87 19.2047C95.438 19.2246 95.007 19.1539 94.604 18.9972C94.201 18.8405 93.835 18.6012 93.53 18.2947C93.227 17.9736 92.9922 17.5946 92.8392 17.1805C92.6863 16.7664 92.6186 16.3257 92.64 15.8847V11.9747C92.64 11.7847 92.73 11.6847 92.92 11.6847H94.6C94.79 11.6847 94.88 11.7847 94.88 11.9747V15.5847C94.862 16.0345 95.015 16.4743 95.31 16.8147C95.457 16.9707 95.636 17.0933 95.834 17.1744C96.032 17.2555 96.246 17.2931 96.46 17.2847C96.679 17.2943 96.898 17.2604 97.104 17.1848C97.31 17.1093 97.499 16.9937 97.66 16.8447C97.812 16.6877 97.931 16.5011 98.008 16.2964C98.086 16.0917 98.12 15.8733 98.11 15.6547V11.9747C98.11 11.7847 98.2 11.6847 98.39 11.6847H100.09C100.28 11.6847 100.37 11.7847 100.37 11.9747V16.6847C100.37 17.0747 100.54 17.2647 100.87 17.2647C101.025 17.2707 101.18 17.2539 101.33 17.2147C101.368 17.2041 101.408 17.2022 101.446 17.2092C101.485 17.2161 101.521 17.2317 101.553 17.2548C101.585 17.2779 101.611 17.3079 101.63 17.3425C101.648 17.3771 101.658 17.4155 101.66 17.4547L101.78 18.7047Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M117.67 18.7047C117.679 18.7405 117.68 18.7779 117.673 18.8141C117.665 18.8502 117.65 18.8844 117.628 18.914C117.606 18.9436 117.578 18.968 117.545 18.9854C117.513 19.0029 117.477 19.0129 117.44 19.0147C117.068 19.1356 116.681 19.1997 116.29 19.2047C115.695 19.2354 115.108 19.0665 114.62 18.7247C114.409 18.5783 114.238 18.3822 114.121 18.1537C114.004 17.9252 113.945 17.6713 113.95 17.4147V15.0647C113.971 14.6163 113.821 14.1766 113.53 13.8347C113.39 13.6784 113.216 13.5552 113.023 13.4739C112.829 13.3927 112.62 13.3554 112.41 13.3647C112.221 13.3576 112.033 13.3935 111.859 13.4697C111.686 13.5459 111.533 13.6605 111.41 13.8047C111.146 14.1398 111.011 14.5586 111.03 14.9847V18.6747C111.03 18.8647 110.94 18.9647 110.75 18.9647H109.06C109.021 18.9696 108.981 18.9654 108.944 18.9526C108.906 18.9397 108.872 18.9185 108.844 18.8905C108.816 18.8626 108.795 18.8286 108.782 18.7912C108.769 18.7538 108.765 18.714 108.77 18.6747V15.0647C108.792 14.6212 108.653 14.1846 108.38 13.8347C108.258 13.6877 108.105 13.5694 107.932 13.4882C107.76 13.407 107.571 13.3648 107.38 13.3647C107.176 13.3565 106.973 13.3914 106.783 13.4673C106.593 13.5431 106.422 13.6581 106.28 13.8047C105.994 14.1291 105.847 14.5529 105.87 14.9847V18.6747C105.875 18.714 105.871 18.7538 105.858 18.7912C105.845 18.8286 105.824 18.8626 105.796 18.8905C105.768 18.9185 105.734 18.9397 105.697 18.9526C105.659 18.9654 105.619 18.9696 105.58 18.9647H103.95C103.76 18.9647 103.67 18.8647 103.67 18.6747V13.9647C103.682 13.8845 103.675 13.8027 103.649 13.7257C103.624 13.6488 103.581 13.5788 103.523 13.5215C103.466 13.4642 103.396 13.4211 103.319 13.3956C103.242 13.3701 103.16 13.363 103.08 13.3747H102.75C102.53 13.3747 102.42 13.2947 102.42 13.1347V11.9547C102.415 11.8817 102.435 11.8091 102.477 11.7491C102.519 11.689 102.58 11.6451 102.65 11.6247C102.996 11.499 103.362 11.438 103.73 11.4447C104.083 11.4146 104.438 11.485 104.753 11.6478C105.068 11.8106 105.33 12.0591 105.51 12.3647C105.847 12.045 106.247 11.7982 106.684 11.6399C107.121 11.4816 107.586 11.4152 108.05 11.4447C108.501 11.4227 108.95 11.5072 109.362 11.6914C109.774 11.8756 110.136 12.1542 110.42 12.5047C110.751 12.145 111.158 11.8634 111.611 11.68C112.064 11.4967 112.552 11.4164 113.04 11.4447C113.476 11.4243 113.912 11.4946 114.32 11.6513C114.728 11.8079 115.099 12.0474 115.41 12.3547C115.714 12.6752 115.949 13.0541 116.102 13.4684C116.255 13.8826 116.323 14.3237 116.3 14.7647V16.6947C116.3 17.0747 116.47 17.2647 116.79 17.2647C116.945 17.2719 117.1 17.2551 117.25 17.2147C117.457 17.2147 117.567 17.2947 117.58 17.4547L117.67 18.7047Z\"\n                  fill=\"currentColor\"\n                />\n                <path\n                  d=\"M0.41 10.3847C1.14777 7.4194 2.85643 4.7861 5.2639 2.90424C7.6714 1.02234 10.6393 0 13.695 0C16.7507 0 19.7186 1.02234 22.1261 2.90424C24.5336 4.7861 26.2422 7.4194 26.98 10.3847H25.78C23.7557 10.3549 21.7729 10.9599 20.11 12.1147C20.014 12.1842 19.9138 12.2477 19.81 12.3047H19.67C19.5662 12.2477 19.466 12.1842 19.37 12.1147C17.6924 10.9866 15.7166 10.3841 13.695 10.3841C11.6734 10.3841 9.6976 10.9866 8.02 12.1147C7.924 12.1842 7.8238 12.2477 7.72 12.3047H7.58C7.4762 12.2477 7.376 12.1842 7.28 12.1147C5.6171 10.9599 3.6343 10.3549 1.61 10.3847H0.41ZM23.62 16.6547C24.236 16.175 24.9995 15.924 25.78 15.9447H27.39V12.7347H25.78C24.4052 12.7181 23.0619 13.146 21.95 13.9547C21.3243 14.416 20.5674 14.6649 19.79 14.6649C19.0126 14.6649 18.2557 14.416 17.63 13.9547C16.4899 13.1611 15.1341 12.7356 13.745 12.7356C12.3559 12.7356 11.0001 13.1611 9.86 13.9547C9.2343 14.416 8.4774 14.6649 7.7 14.6649C6.9226 14.6649 6.1657 14.416 5.54 13.9547C4.4144 13.1356 3.0518 12.7072 1.66 12.7347H0V15.9447H1.61C2.39051 15.924 3.154 16.175 3.77 16.6547C4.908 17.4489 6.2623 17.8747 7.65 17.8747C9.0377 17.8747 10.392 17.4489 11.53 16.6547C12.1468 16.1765 12.9097 15.9257 13.69 15.9447C14.4708 15.9223 15.2348 16.1735 15.85 16.6547C16.9901 17.4484 18.3459 17.8738 19.735 17.8738C21.1241 17.8738 22.4799 17.4484 23.62 16.6547ZM23.62 22.3947C24.236 21.915 24.9995 21.664 25.78 21.6847H27.39V18.4747H25.78C24.4052 18.4581 23.0619 18.886 21.95 19.6947C21.3243 20.156 20.5674 20.4049 19.79 20.4049C19.0126 20.4049 18.2557 20.156 17.63 19.6947C16.4899 18.9011 15.1341 18.4757 13.745 18.4757C12.3559 18.4757 11.0001 18.9011 9.86 19.6947C9.2343 20.156 8.4774 20.4049 7.7 20.4049C6.9226 20.4049 6.1657 20.156 5.54 19.6947C4.4144 18.8757 3.0518 18.4472 1.66 18.4747H0V21.6847H1.61C2.39051 21.664 3.154 21.915 3.77 22.3947C4.908 23.1889 6.2623 23.6147 7.65 23.6147C9.0377 23.6147 10.392 23.1889 11.53 22.3947C12.1468 21.9165 12.9097 21.6657 13.69 21.6847C14.4708 21.6623 15.2348 21.9135 15.85 22.3947C16.9901 23.1884 18.3459 23.6138 19.735 23.6138C21.1241 23.6138 22.4799 23.1884 23.62 22.3947Z\"\n                  fill=\"currentColor\"\n                />\n              </svg>\n            </div>\n\n            <p className=\"max-w-xs mt-4 text-gray-500\">\n              Lorem ipsum dolor, sit amet consectetur adipisicing elit. Esse non\n              cupiditate quae nam molestias.\n            </p>\n\n            <ul className=\"flex gap-6 mt-8\">\n              <li>\n                <a\n                  href=\"/\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"text-gray-700 transition hover:opacity-75\"\n                >\n                  <span className=\"sr-only\">Facebook</span>\n\n                  <svg\n                    className=\"w-6 h-6\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"/\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"text-gray-700 transition hover:opacity-75\"\n                >\n                  <span className=\"sr-only\">Instagram</span>\n\n                  <svg\n                    className=\"w-6 h-6\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"/\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"text-gray-700 transition hover:opacity-75\"\n                >\n                  <span className=\"sr-only\">Twitter</span>\n\n                  <svg\n                    className=\"w-6 h-6\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    aria-hidden=\"true\"\n                  >\n                    <path d=\"M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84\" />\n                  </svg>\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"/\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"text-gray-700 transition hover:opacity-75\"\n                >\n                  <span className=\"sr-only\">GitHub</span>\n\n                  <svg\n                    className=\"w-6 h-6\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"/\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"text-gray-700 transition hover:opacity-75\"\n                >\n                  <span className=\"sr-only\">Dribbble</span>\n\n                  <svg\n                    className=\"w-6 h-6\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c5.51 0 10-4.48 10-10S17.51 2 12 2zm6.605 4.61a8.502 8.502 0 011.93 5.314c-.281-.054-3.101-.629-5.943-.271-.065-.141-.12-.293-.184-.445a25.416 25.416 0 00-.564-1.236c3.145-1.28 4.577-3.124 4.761-3.362zM12 3.475c2.17 0 4.154.813 5.662 2.148-.152.216-1.443 1.941-4.48 3.08-1.399-2.57-2.95-4.675-3.189-5A8.687 8.687 0 0112 3.475zm-3.633.803a53.896 53.896 0 013.167 4.935c-3.992 1.063-7.517 1.04-7.896 1.04a8.581 8.581 0 014.729-5.975zM3.453 12.01v-.26c.37.01 4.512.065 8.775-1.215.25.477.477.965.694 1.453-.109.033-.228.065-.336.098-4.404 1.42-6.747 5.303-6.942 5.629a8.522 8.522 0 01-2.19-5.705zM12 20.547a8.482 8.482 0 01-5.239-1.8c.152-.315 1.888-3.656 6.703-5.337.022-.01.033-.01.054-.022a35.318 35.318 0 011.823 6.475 8.4 8.4 0 01-3.341.684zm4.761-1.465c-.086-.52-.542-3.015-1.659-6.084 2.679-.423 5.022.271 5.314.369a8.468 8.468 0 01-3.655 5.715z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 lg:col-span-2 lg:grid-cols-4\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Services</p>\n\n              <nav aria-label=\"Footer Navigation - Services\" className=\"mt-6\">\n                <ul className=\"space-y-4 text-sm\">\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      1on1 Coaching\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Company Review\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Accounts Review\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      HR Consulting\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      SEO Optimisation\n                    </a>\n                  </li>\n                </ul>\n              </nav>\n            </div>\n\n            <div>\n              <p className=\"font-medium text-gray-900\">Company</p>\n\n              <nav aria-label=\"Footer Navigation - Company\" className=\"mt-6\">\n                <ul className=\"space-y-4 text-sm\">\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      About\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Meet the Team\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Accounts Review\n                    </a>\n                  </li>\n                </ul>\n              </nav>\n            </div>\n\n            <div>\n              <p className=\"font-medium text-gray-900\">Helpful Links</p>\n\n              <nav aria-label=\"Footer Navigation - Company\" className=\"mt-6\">\n                <ul className=\"space-y-4 text-sm\">\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Contact\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      FAQs\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Live Chat\n                    </a>\n                  </li>\n                </ul>\n              </nav>\n            </div>\n\n            <div>\n              <p className=\"font-medium text-gray-900\">Legal</p>\n\n              <nav aria-label=\"Footer Navigation - Legal\" className=\"mt-6\">\n                <ul className=\"space-y-4 text-sm\">\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Accessibility\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Returns Policy\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Refund Policy\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-700 transition hover:opacity-75\"\n                    >\n                      Hiring Statistics\n                    </a>\n                  </li>\n                </ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n\n        <p className=\"text-xs text-gray-500\">\n          &copy; 2022. Company Name. All rights reserved.\n        </p>\n      </div>\n    </footer>\n```\n\nPreview your site in your web browser and make sure everything looks good by navigating to [**localhost:3000**](http://localhost:3000)**.**\n\n#### Component Creation\n\nNow, let’s create a couple of components that will complete our marketing landing page.\n\nFrom your components folder, create a new folder and name it “**blocks”.** (You can choose any name you want as the name, but for this tutorial, we will be naming it blocks, since it will contain components that we will connect to our CMS layouts app.)\n\nInside the **blocks** folder create a new file and name it **Hero.js**\n\n```jsx\nconst Hero = () => {\n  return (\n    <section>\n      <div className=\"mx-auto max-w-screen-xl px-4 py-32 lg:items-center\">\n        <div className=\"mx-auto max-w-xl text-center\">\n          <h1 className=\"text-3xl font-extrabold sm:text-5xl\">\n            Understand User Flow.\n            <strong className=\"font-extrabold text-teal-600 sm:block\">\n              Increase Conversion.\n            </strong>\n          </h1>\n\n          <p className=\"mt-4 sm:text-xl sm:leading-relaxed\">\n            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nesciunt\n            illo tenetur fuga ducimus numquam ea!\n          </p>\n\n          <div className=\"mt-8 flex flex-wrap justify-center gap-4\">\n            <a\n              className=\"block w-full rounded bg-teal-600 px-12 py-3 text-sm font-medium text-white shadow hover:bg-teal-700 focus:outline-none focus:ring active:bg-red-500 sm:w-auto\"\n              href=\"/get-started\"\n            >\n              Get Started\n            </a>\n\n            <a\n              className=\"block w-full rounded px-12 py-3 text-sm font-medium text-teal-600 shadow hover:text-teal-700 focus:outline-none focus:ring active:text-red-500 sm:w-auto\"\n              href=\"/about\"\n            >\n              Learn More\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Hero;\n```\n\nNow that we have the hero component, let’s create two more components. Create a new file again and name it M**arketing.js**\n\n```jsx\nconst Marketing = () => {\n  return (\n    <>\n      <section>\n        <div className=\"mx-auto max-w-screen-xl px-4 py-16 sm:px-6 lg:px-8\">\n          <div className=\"mx-auto max-w-lg text-center\">\n            <h2 className=\"text-3xl font-bold sm:text-4xl\">\n              Kickstart your marketing\n            </h2>\n\n            <p className=\"mt-4 text-gray-700\">\n              Lorem ipsum, dolor sit amet consectetur adipisicing elit.\n              Consequuntur aliquam doloribus nesciunt eos fugiat. Vitae aperiam\n              fugit consequuntur saepe laborum.\n            </p>\n          </div>\n\n          <div className=\"mt-8 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\">\n            <a\n              className=\"block rounded-xl   p-8 shadow-xl transition hover:border-teal-500/10 hover:shadow-teal-500/10\"\n              href=\"/services/digital-campaigns\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-10 w-10 text-teal-500\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n                <path d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222\"\n                />\n              </svg>\n\n              <h2 className=\"mt-4 text-xl font-bold text-white\">\n                Digital campaigns\n              </h2>\n\n              <p className=\"mt-1 text-sm text-gray-700\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex ut\n                quo possimus adipisci distinctio alias voluptatum blanditiis\n                laudantium.\n              </p>\n            </a>\n\n            <a\n              className=\"block rounded-xl   p-8 shadow-xl transition hover:border-teal-500/10 hover:shadow-teal-500/10\"\n              href=\"/services/digital-campaigns\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-10 w-10 text-teal-500\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n                <path d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222\"\n                />\n              </svg>\n\n              <h2 className=\"mt-4 text-xl font-bold text-white\">\n                Digital campaigns\n              </h2>\n\n              <p className=\"mt-1 text-sm text-gray-700\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex ut\n                quo possimus adipisci distinctio alias voluptatum blanditiis\n                laudantium.\n              </p>\n            </a>\n\n            <a\n              className=\"block rounded-xl   p-8 shadow-xl transition hover:border-teal-500/10 hover:shadow-teal-500/10\"\n              href=\"/services/digital-campaigns\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-10 w-10 text-teal-500\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n                <path d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222\"\n                />\n              </svg>\n\n              <h2 className=\"mt-4 text-xl font-bold text-white\">\n                Digital campaigns\n              </h2>\n\n              <p className=\"mt-1 text-sm text-gray-700\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex ut\n                quo possimus adipisci distinctio alias voluptatum blanditiis\n                laudantium.\n              </p>\n            </a>\n\n            <a\n              className=\"block rounded-xl   p-8 shadow-xl transition hover:border-teal-500/10 hover:shadow-teal-500/10\"\n              href=\"/services/digital-campaigns\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-10 w-10 text-teal-500\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n                <path d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222\"\n                />\n              </svg>\n\n              <h2 className=\"mt-4 text-xl font-bold text-white\">\n                Digital campaigns\n              </h2>\n\n              <p className=\"mt-1 text-sm text-gray-700\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex ut\n                quo possimus adipisci distinctio alias voluptatum blanditiis\n                laudantium.\n              </p>\n            </a>\n\n            <a\n              className=\"block rounded-xl   p-8 shadow-xl transition hover:border-teal-500/10 hover:shadow-teal-500/10\"\n              href=\"/services/digital-campaigns\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-10 w-10 text-teal-500\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n                <path d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222\"\n                />\n              </svg>\n\n              <h2 className=\"mt-4 text-xl font-bold text-white\">\n                Digital campaigns\n              </h2>\n\n              <p className=\"mt-1 text-sm text-gray-700\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex ut\n                quo possimus adipisci distinctio alias voluptatum blanditiis\n                laudantium.\n              </p>\n            </a>\n\n            <a\n              className=\"block rounded-xl   p-8 shadow-xl transition hover:border-teal-500/10 hover:shadow-teal-500/10\"\n              href=\"/services/digital-campaigns\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-10 w-10 text-teal-500\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n                <path d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222\"\n                />\n              </svg>\n\n              <h2 className=\"mt-4 text-xl font-bold text-white\">\n                Digital campaigns\n              </h2>\n\n              <p className=\"mt-1 text-sm text-gray-700\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex ut\n                quo possimus adipisci distinctio alias voluptatum blanditiis\n                laudantium.\n              </p>\n            </a>\n          </div>\n\n          <div className=\"mt-12 text-center\">\n            <a\n              href=\"#\"\n              className=\"mt-8 inline-flex items-center rounded border hover:text-teal-600 border-teal-600 bg-teal-600 px-8 py-3 text-white hover:bg-transparent focus:outline-none focus:ring active:text-teal-500\"\n            >\n              <span className=\"text-sm font-medium\"> Get Started </span>\n\n              <svg\n                className=\"ml-3 h-5 w-5\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M17 8l4 4m0 0l-4 4m4-4H3\"\n                />\n              </svg>\n            </a>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Marketing;\n```\n\nAnd then our final component in this tutorial will be **Contact.js**\n\n```jsx\nconst Contact = () => {\n  return (\n    <section className=\"relative z-10 overflow-hidden  py-20 lg:py-[120px]\">\n      <div className=\"container mx-auto \">\n        <div className=\"-mx-4 flex flex-wrap \">\n          <div className=\"w-full px-4 lg:w-1/2 xl:w-6/12\">\n            <div className=\"mb-12 max-w-[570px] lg:mb-0 mx-auto\">\n              <span className=\"mb-4 block text-base font-semibold text-primary text-teal-600\">\n                Contact Us\n              </span>\n              <h2 className=\"mb-6 text-[32px] font-bold uppercase text-dark sm:text-[40px] lg:text-[36px] xl:text-[40px]\">\n                GET IN TOUCH WITH US\n              </h2>\n              <p className=\"mb-9 text-base leading-relaxed text-body-color\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n                eius tempor incididunt ut labore et dolore magna aliqua. Ut enim\n                adiqua minim veniam quis nostrud exercitation ullamco\n              </p>\n\n              <div className=\"mb-8 flex w-full max-w-[370px]\">\n                <div className=\"mr-6 flex h-[60px] w-full max-w-[60px] items-center justify-center overflow-hidden rounded bg-primary bg-opacity-5 text-primary sm:h-[70px] sm:max-w-[70px]\">\n                  <svg\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                    className=\"fill-current\"\n                  >\n                    <path d=\"M21.8182 24H16.5584C15.3896 24 14.4156 23.0256 14.4156 21.8563V17.5688C14.4156 17.1401 14.0649 16.7893 13.6364 16.7893H10.4026C9.97403 16.7893 9.62338 17.1401 9.62338 17.5688V21.8173C9.62338 22.9866 8.64935 23.961 7.48052 23.961H2.14286C0.974026 23.961 0 22.9866 0 21.8173V8.21437C0 7.62972 0.311688 7.08404 0.818182 6.77223L11.1039 0.263094C11.6494 -0.0876979 12.3896 -0.0876979 12.9351 0.263094L23.2208 6.77223C23.7273 7.08404 24 7.62972 24 8.21437V21.7783C24 23.0256 23.026 24 21.8182 24ZM10.3636 15.4251H13.5974C14.7662 15.4251 15.7403 16.3995 15.7403 17.5688V21.8173C15.7403 22.246 16.0909 22.5968 16.5195 22.5968H21.8182C22.2468 22.5968 22.5974 22.246 22.5974 21.8173V8.25335C22.5974 8.13642 22.5195 8.01949 22.4416 7.94153L12.1948 1.4324C12.0779 1.35445 11.9221 1.35445 11.8442 1.4324L1.55844 7.94153C1.44156 8.01949 1.4026 8.13642 1.4026 8.25335V21.8563C1.4026 22.285 1.75325 22.6358 2.18182 22.6358H7.48052C7.90909 22.6358 8.25974 22.285 8.25974 21.8563V17.5688C8.22078 16.3995 9.19481 15.4251 10.3636 15.4251Z\" />\n                  </svg>\n                </div>\n                <div className=\"w-full\">\n                  <h4 className=\"mb-1 text-xl font-bold text-dark\">\n                    Our Location\n                  </h4>\n                  <p className=\"text-base text-body-color\">\n                    99 S.t Jomblo Park Pekanbaru 28292. Indonesia\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"mb-8 flex w-full max-w-[370px]\">\n                <div className=\"mr-6 flex h-[60px] w-full max-w-[60px] items-center justify-center overflow-hidden rounded bg-primary bg-opacity-5 text-primary sm:h-[70px] sm:max-w-[70px]\">\n                  <svg\n                    width=\"24\"\n                    height=\"26\"\n                    viewBox=\"0 0 24 26\"\n                    className=\"fill-current\"\n                  >\n                    <path d=\"M22.6149 15.1386C22.5307 14.1704 21.7308 13.4968 20.7626 13.4968H2.82869C1.86042 13.4968 1.10265 14.2125 0.97636 15.1386L0.092295 23.9793C0.0501967 24.4845 0.21859 25.0317 0.555377 25.4106C0.892163 25.7895 1.39734 26 1.94462 26H21.6887C22.1939 26 22.6991 25.7895 23.078 25.4106C23.4148 25.0317 23.5832 24.5266 23.5411 23.9793L22.6149 15.1386ZM21.9413 24.4424C21.8992 24.4845 21.815 24.5687 21.6466 24.5687H1.94462C1.81833 24.5687 1.69203 24.4845 1.64993 24.4424C1.60783 24.4003 1.52364 24.3161 1.56574 24.1477L2.4498 15.2649C2.4498 15.0544 2.61819 14.9281 2.82869 14.9281H20.8047C21.0152 14.9281 21.1415 15.0544 21.1835 15.2649L22.0676 24.1477C22.0255 24.274 21.9834 24.4003 21.9413 24.4424Z\" />\n                    <path d=\"M11.7965 16.7805C10.1547 16.7805 8.84961 18.0855 8.84961 19.7273C8.84961 21.3692 10.1547 22.6742 11.7965 22.6742C13.4383 22.6742 14.7434 21.3692 14.7434 19.7273C14.7434 18.0855 13.4383 16.7805 11.7965 16.7805ZM11.7965 21.2008C10.9966 21.2008 10.3231 20.5272 10.3231 19.7273C10.3231 18.9275 10.9966 18.2539 11.7965 18.2539C12.5964 18.2539 13.2699 18.9275 13.2699 19.7273C13.2699 20.5272 12.5964 21.2008 11.7965 21.2008Z\" />\n                    <path d=\"M1.10265 7.85562C1.18684 9.70794 2.82868 10.4657 3.67064 10.4657H6.61752C6.65962 10.4657 6.65962 10.4657 6.65962 10.4657C7.92257 10.3815 9.18552 9.53955 9.18552 7.85562V6.84526C10.5748 6.84526 13.7742 6.84526 15.1635 6.84526V7.85562C15.1635 9.53955 16.4264 10.3815 17.6894 10.4657H17.7315H20.6363C21.4782 10.4657 23.1201 9.70794 23.2043 7.85562C23.2043 7.72932 23.2043 7.26624 23.2043 6.84526C23.2043 6.50847 23.2043 6.21378 23.2043 6.17169C23.2043 6.12959 23.2043 6.08749 23.2043 6.08749C23.078 4.90874 22.657 3.94047 21.9413 3.18271L21.8992 3.14061C20.8468 2.17235 19.5838 1.62507 18.6155 1.28828C15.795 0.193726 12.2587 0.193726 12.0903 0.193726C9.6065 0.235824 8.00677 0.446315 5.60716 1.28828C4.681 1.58297 3.41805 2.13025 2.36559 3.09851L2.3235 3.14061C1.60782 3.89838 1.18684 4.86664 1.06055 6.04539C1.06055 6.08749 1.06055 6.12959 1.06055 6.12959C1.06055 6.21378 1.06055 6.46637 1.06055 6.80316C1.10265 7.18204 1.10265 7.68722 1.10265 7.85562ZM3.37595 4.15097C4.21792 3.3932 5.27038 2.93012 6.15444 2.59333C8.34355 1.79346 9.7749 1.62507 12.1745 1.58297C12.3429 1.58297 15.6266 1.62507 18.1525 2.59333C19.0365 2.93012 20.089 3.3511 20.931 4.15097C21.394 4.65615 21.6887 5.32972 21.7729 6.12959C21.7729 6.25588 21.7729 6.46637 21.7729 6.80316C21.7729 7.22414 21.7729 7.68722 21.7729 7.81352C21.7308 8.78178 20.8047 8.99227 20.6784 8.99227H17.7736C17.3526 8.95017 16.679 8.78178 16.679 7.85562V6.12959C16.679 5.7928 16.4685 5.54021 16.1738 5.41392C15.9213 5.32972 8.55405 5.32972 8.30146 5.41392C8.00677 5.49811 7.79628 5.7928 7.79628 6.12959V7.85562C7.79628 8.78178 7.1227 8.95017 6.70172 8.99227H3.79694C3.67064 8.99227 2.74448 8.78178 2.70238 7.81352C2.70238 7.68722 2.70238 7.22414 2.70238 6.80316C2.70238 6.46637 2.70238 6.29798 2.70238 6.17169C2.61818 5.32972 2.91287 4.65615 3.37595 4.15097Z\" />\n                  </svg>\n                </div>\n                <div className=\"w-full\">\n                  <h4 className=\"mb-1 text-xl font-bold text-dark\">\n                    Phone Number\n                  </h4>\n                  <p className=\"text-base text-body-color\">\n                    (+62)81 414 257 9980\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"mb-8 flex w-full max-w-[370px]\">\n                <div className=\"mr-6 flex h-[60px] w-full max-w-[60px] items-center justify-center overflow-hidden rounded bg-primary bg-opacity-5 text-primary sm:h-[70px] sm:max-w-[70px]\">\n                  <svg\n                    width=\"28\"\n                    height=\"19\"\n                    viewBox=\"0 0 28 19\"\n                    className=\"fill-current\"\n                  >\n                    <path d=\"M25.3636 0H2.63636C1.18182 0 0 1.16785 0 2.6052V16.3948C0 17.8322 1.18182 19 2.63636 19H25.3636C26.8182 19 28 17.8322 28 16.3948V2.6052C28 1.16785 26.8182 0 25.3636 0ZM25.3636 1.5721C25.5909 1.5721 25.7727 1.61702 25.9545 1.75177L14.6364 8.53428C14.2273 8.75886 13.7727 8.75886 13.3636 8.53428L2.04545 1.75177C2.22727 1.66194 2.40909 1.5721 2.63636 1.5721H25.3636ZM25.3636 17.383H2.63636C2.09091 17.383 1.59091 16.9338 1.59091 16.3499V3.32388L12.5 9.8818C12.9545 10.1513 13.4545 10.2861 13.9545 10.2861C14.4545 10.2861 14.9545 10.1513 15.4091 9.8818L26.3182 3.32388V16.3499C26.4091 16.9338 25.9091 17.383 25.3636 17.383Z\" />\n                  </svg>\n                </div>\n                <div className=\"w-full\">\n                  <h4 className=\"mb-1 text-xl font-bold text-dark\">\n                    Email Address\n                  </h4>\n                  <p className=\"text-base text-body-color\">\n                    info@yourdomain.com\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full px-4 lg:w-1/2 xl:w-5/12\">\n            <div className=\"relative rounded-lg bg-white p-8 shadow-lg sm:p-12\">\n              <form>\n                <div className=\"mb-6\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Your Name\"\n                    className=\"border-[f0f0f0] w-full rounded border py-3 px-[14px] text-base text-body-color outline-none focus:border-primary focus-visible:shadow-none\"\n                  />\n                </div>\n                <div className=\"mb-6\">\n                  <input\n                    type=\"email\"\n                    placeholder=\"Your Email\"\n                    className=\"border-[f0f0f0] w-full rounded border py-3 px-[14px] text-base text-body-color outline-none focus:border-primary focus-visible:shadow-none\"\n                  />\n                </div>\n                <div className=\"mb-6\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Your Phone\"\n                    className=\"border-[f0f0f0] w-full rounded border py-3 px-[14px] text-base text-body-color outline-none focus:border-primary focus-visible:shadow-none\"\n                  />\n                </div>\n                <div className=\"mb-6\">\n                  <textarea\n                    rows=\"6\"\n                    placeholder=\"Your Message\"\n                    className=\"border-[f0f0f0] w-full resize-none rounded border py-3 px-[14px] text-base text-body-color outline-none focus:border-primary focus-visible:shadow-none\"\n                  ></textarea>\n                </div>\n                <div>\n                  <button\n                    type=\"submit\"\n                    className=\"w-full rounded border border-primary bg-primary p-3 text-white transition hover:bg-opacity-90\"\n                  >\n                    Send Message\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n```\n\n#### Export components\n\nOur components are now ready! Let’s make sure to export those components in one file so we can use them.\n\nInside the components folder, create a new file and name it **index.js** and let’s import and export all components we created inside the blocks\n\n```jsx\nimport Contact from './blocks/Contact';\nimport Hero from './blocks/Hero';\nimport Marketing from './blocks/Marketing';\n\nexport {   Contact,  Hero,  Marketing };\n```\n\nCreate a new file again inside the components folder and name it **ComponentSelector.js**\n\n```\nimport * as zestyBlocks from '../components';\n\nconst ComponentSelector = (props) => {\n  const componentName = props.data.name;\n  const Component = zestyBlocks[componentName];\n\n  return (\n    <>\n      <Component />\n    </>\n  );\n};\n\nexport default ComponentSelector;\n```\n\nFirst, we import all components from index.js as zestyBlocks. The return value of zestyBlocks will be all of the modules we export from index.js as objects.\n\nNext, we declared the ComponentSelector component which accepts props from react-auto-layout. Props will have all the data from layouts that we will set up in the next section.\n\nFor now, let’s initialize our AutoLayout component. Open the **Homepage.js** from views > zesty folder. Copy the code below and overwrite the existing code in the **Homepage.js**.\n\nHere we’ve imported the AutoLayout component from the NPM package we installed earlier. We also imported the ComponentSelector we created and, finally, we’ve used the AutoLayout component.\n\nAutoLayout is expecting a **{content}** object from the Zesty integration to be passed to the AutoLayout object. It is also expecting components to be passed as objects. In our example, we will be passing our ComponentSelector as a component.\n\n```jsx\nimport React from 'react';\nimport { AutoLayout } from '@zesty-io/react-autolayout';\nimport ComponentSelector from 'components/ComponentSelector';\n\nexport default function Homepage({ content }) {\n  return (\n    <>\n      <AutoLayout\n        content={content}\n        components={{\n          component: ComponentSelector,\n        }}\n      />\n    </>\n  );\n}\n```\n\n### Step 4: Create components from Layouts instance and map them to Next.js template\n\nNow, it’s time for us to go back into our Zesty instance and open Manager. Inside Manager, you should be able to see the Layouts extension we installed earlier from the Marketplace. Once you click on Layouts, you will see a screen like below:\n\nOn the right-hand panel of Layouts, look for the Homepage model and click “load content”.\n\nThe Homepage model is connected to the **Homepage.js** we modified in our Next.js app, so that means all data contents from our Homepage model are automatically passed in as props in the **Homepage.js** file.\n\nOnce the content is loaded, you can start using the Layouts design tool by dragging content to the visual layout area. But in this tutorial, we will focus on using our custom components, so let’s start creating one and map it to our Next.js components.\n\nIn the navigation, you will see the components at the top. Click that then add a new component\n\nA popup should appear. Now let’s populate those fields.\n\nlayout\n\n**Fields**\n\n| Field Name          | Description                                                                                                                                                      |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Name \\*             | The name field is the name of the component. The name of the component should be the same as how you name it in your Next.js components blocks. (Case Sensitive) |\n| Class \\*            | class is the component className, that you use in Next.js                                                                                                        |\n| Type \\* \\<Component | Design>                                                                                                                                                          |\n| Dropppable \\*       | if the component has the ability to accept child components and act as a layout wrapper                                                                          |\n| Preview \\*          | Component preview in the visual layout written in HTML format                                                                                                    |\n| HTML \\*             | HTML content associated with the component.                                                                                                                      |\n\nAfter adding the **Hero** component, please do the same with the two remaining components, which are the **Contact** and **Marketing** components.\n\nOnce that is done, you should now have three new components inside Layouts that are ready to use.\n\nFinally, drag those newly created components to our visual layout designer one-by-one in any order. Hit **ctrl + s** in Windows or **command + s** in Mac to save.\n\nOnce saved, go back to your Next.js app. Make sure that the server is running and head back to [localhost:3000](http://localhost:3000) to see the preview.\n\nAwesome! You’ve completed the first part of the tutorial by setting up your Next.js instance in Zesty and leveraging Layouts to create three custom components. In the next tutorial, you will learn how to hydrate dynamic data from Zesty to your Next.js app.\n\n```\n```\n","category":"guides","service":"tools"}],"content":"---\ndescription: Using Zesty's drag and drop option using the Layouts App\n---\n\n# Creating Custom Components with Parsley\n\nFirst, Install the [Layouts App](https://www.zesty.io/marketplace/apps/page-layout-designer/) to your instance from our marketplace.\n\n### Select your content model\n\nA layout is created against a content model which will dictate the default structure of all items within the content model. For example, if you have a multi-page content model called Articles, then you can create a Layout that will reflect the structure for all items created within that model, ie: all articles.\n\n### Drag and drop\n\nOpen the Layouts app from the left navigation tree. Select the content model you would like to design.\n\n<figure><img src=\"../../../.gitbook/assets/Screenshot 2023-01-20 at 3.29.05 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\nStart building out your design with our existing design elements such as a 2 columns. Then add content by dragging the field element. The Layouts app will automatically display the content model's configured fields.\n\n<figure><img src=\"../../../.gitbook/assets/dragdrop.gif\" alt=\"\"><figcaption></figcaption></figure>\n\n### Create your own components\n\nCreate your custom components to expand on the drag and drop options of the Layouts app. Give it a name, class, an image url (used as the thumbnail in the app), and add your code. For added simplicity, you can even call Parsley in the component's code!\n\n<figure><img src=\"../../../.gitbook/assets/component.gif\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"../../../.gitbook/assets/Screenshot 2023-01-20 at 3.44.50 PM.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Using Parsley for custom components\n\nIn the Code app, create a new snippet file.\n\n<figure><img src=\"../../../.gitbook/assets/createComponent.gif\" alt=\"\"><figcaption></figcaption></figure>\n\nAdd your code, you can even call content dynamically using Parsley. Your snippet file can now be used within your custom component by using the `include` Parsley call. For example, a snippet created with the file name: `/components/myComponent` can be called with the following syntax: `{{ include /components/myComponent }}`\n\n<figure><img src=\"../../../.gitbook/assets/code.gif\" alt=\"\"><figcaption></figcaption></figure>\n\nThat's it! You will see your custom component available to be dragged and dropped within the Layouts app. If you are using dynamic Parsley calls within its snippet file, you will see that rendered within the app.\n\n<figure><img src=\"../../../.gitbook/assets/done.gif\" alt=\"\"><figcaption></figcaption></figure>\n","category":"guides","service":"tools"},{"name":"Next.js Integration","url":"/tools/guides/nextjs","objectId":"4wArnWMnHYturMAuYQ7Q","item":[],"content":"---\ndescription: How to run NextJS with Zesty.io\n---\n\n# Next.js Integration\n\n### Getting Started\n\n{% embed url=\"https://www.youtube.com/watch?v=Y2cux28b9q0\" %}\n\nNode and NPM need to be installed. From your command line.\n\n```\nnpx create-next-app --example https://github.com/zesty-io/nextjs-starter\n\ncd nextjs-starter\n\nnpm run dev\n\n## open browser to http://localhost:3000/\n```\n\n### Syncing Zesty.io Models to Next JS\n\nFrom the command line at the root of the project run:\n\n```\nnpm run sync\n```\n\nor\n\n```\nnode lib/sync.js\n```\n\nThis will create new files where needed, but will not overwrite existing files.\n\n### NextJS Zesty.io Resources&#x20;\n\nNextJS Starter open-source Github repository [https://github.com/zesty-io/nextjs-starter](https://github.com/zesty-io/nextjs-starter)\n\nNextJS Demonstration on YouTube [https://www.youtube.com/watch?v=h9WMdlQyFgU](https://www.youtube.com/watch?v=h9WMdlQyFgU)\n","category":"guides","service":"tools"},{"name":"nextjs","url":"/tools/guides/nextjs","item":[{"name":"Zesty Content Object","url":"/tools/guides/nextjs/zesty-content-object","objectId":"5aS6tjGaX6IBHcwvfL87","item":[],"content":"---\ndescription: How to work with the Zesty content object that is fed into Next.js components.\n---\n\n# Zesty Content Object\n\n### How the page content object works\n\nThe each Zesty.io content model has an associated react component in the `views/zesty` project folder. Each component is fed a {content} object, which contains content item field data, and meta data. Content is accessed like so: `{content.[field_name]}` See this example of a simple react component for an About Page.\n\n```javascript\n// AboutPage React Component for Zesty.io Content Model: About Page\n// The About Page content model has two fields\n// title: Plain Text\n// body: Rich Text\nimport React  from 'react';\n\nfunction AboutPage({content}) {\n    return (\n        <>\n            <h1>{{content.title}}></h1>\n            <div dangerouslySetInnerHTML={{__html:content.body}} />\n        </>\n    );\n}\n```\n\n### How to relational content to work with Next.js\n\nIts best to build content model schema's to include as much of the content on the page for the content author to control, this mean images, text, files, and rich text. To connect related content to a page, using a one to one or many to one fields types will give you access to all the content of the related content item without making additional fetch requests.\n\n```javascript\n// title: Plain Text\n// body: Rich Text\n// team: Many to One Relational to Team Member content item\nimport React  from 'react';\n\nfunction AboutPage({content}) {\n    return (\n        <>\n            <h1>{{content.title}}></h1>\n            <div dangerouslySetInnerHTML={{__html:content.body}} />\n            <h2>Our Team</h2>\n            <div>\n                {content.team.data.map(member => \n                    <div>\n                        <h4>{member.name} - {member.title}</h4>\n                        <p>{member.description}</p>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n```\n\n### How to fetch content not available in the page content object\n\nWhen the content you need does not live on the content item, you may fetch it to use in your page.  In this example, instead of using a many to one relational field, we fetch team members remotely.\n\n\n\n```javascript\n// AboutPage React Component for Zesty.io Content Model: About Page\n// The About Page content model has two fields\n// title: Plain Text\n// body: Rich Text\nimport React  from 'react';\n\n// fetch for data\nconst fetchTeamData = async (uri, setFunc) => {\n  const res = await fetch(uri).then((response) => response.json());\n  res && (await setFunc(res));\n};\n\n// AboutPage component\nfunction AboutPage({content}) {\n\n    let zestyURL = content.zestyProductionMode\n        ? process.env.zesty.production\n        : process.env.zesty.stage;\n\n    const uri = `${zestyURL}/-/team.json`;\n    const [teamMembers, setTeamMembers] = React.useState([]);\n    \n    // get data in initial load\n    React.useEffect(() => {\n        fetchTeamData(uri, setTeamMembers);\n    }, []);\n\n    return (\n        <>\n            <h1>{{content.title}}></h1>\n            <div dangerouslySetInnerHTML={{__html:content.body}} />\n            <h2>Our Team</h2>\n            <div>\n                {teamMembers.data.map(member => \n                    <div>\n                        <h4>{member.name} - {member.title}</h4>\n                        <p>{member.description}</p>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n```\n","category":"guides","service":"tools"},{"name":"Manager Redirects in Next.js","url":"/tools/guides/nextjs/manager-redirects-in-next.js","objectId":"71lsSPar9a8EyW92U1XD","item":[],"content":"---\ndescription: Load manager controlled redirects from zesty.io in next.js\n---\n\n# Manager Redirects in Next.js\n\nZesty provides a function, fetchZestyRedirection, as seen here [https://github.com/zesty-io/nextjs-starter/blob/main/lib/zesty/fetchRedirects.js](https://github.com/zesty-io/nextjs-starter/blob/main/lib/zesty/fetchRedirects.js), load this function inside of next.config.js and place it as the return results next async redirects() function.&#x20;\n\n```javascript\n// next.config.js\nconst { fetchZestyRedirects } = require('./lib/zesty/fetchRedirects');\n\nmodule.exports = {\n  async redirects() {\n    return await fetchZestyRedirects()\n  },\n  ...\n}\n```\n\nIf you wish to combine redirects from multiple sources, fetch the  `await fetchZestyRedirects()` into a separate variable and join the array [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Array/concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Array/concat)\n\nExample of joining zesty redirects to your customer redirects.\n\n```javascript\n// next.config.js\nconst { fetchZestyRedirects } = require('./lib/zesty/fetchRedirects');\n\nmodule.exports = {\n  async redirects() {\n    let myRedirects = [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ];\n    const zestyRedirects = await fetchZestyRedirects();\n    \n    myRedirects.concat(zestyRedirects );\n    return myRedirects\n  },\n  ...\n}\n```\n\n","category":"guides","service":"tools"},{"name":"Custom Integrations","url":"/tools/guides/nextjs/custom-integrations","objectId":"AhEOJKBnWw6s7VLdhj9w","item":[],"content":"---\ndescription: How to load dynamic zesty.io content into your next.js project\n---\n\n# Custom Integrations\n\nTo dynamically load your Zesty.io instance's content into your Next.js project, you will need three files and zesty env values in your next.config.js file. You can see a working example of this in our nextjs starter [https://github.com/zesty-io/nextjs-starter](https://github.com/zesty-io/nextjs-starter). The starter is a great place to launch your nextjs app with everything for Zesty.io already configured.\n\nIf you plan to integrate Zesty.io into your project, this document will break down how the integration works in the [https://github.com/zesty-io/nextjs-starter](https://github.com/zesty-io/nextjs-starter) starter project.\n\n### Files Needed\n\n1. ``[`[...slug].js`](https://github.com/zesty-io/nextjs-starter/blob/main/pages/\\[...slug].js) in the root of your `pages/` directory.\n2. ``[`fetchPage.js`](https://github.com/zesty-io/nextjs-starter/blob/main/lib/zesty/fetchPage.js) a function that resolves dynamic content into `[...slug].js`\n3. ``[`ZestyView`](https://github.com/zesty-io/nextjs-starter/blob/main/components/zesty/ZestyView.js) a dynamic component that resolves `views/zesty/` content model components\n\n### ENV Setup - next.config.js&#x20;\n\nexample [https://github.com/zesty-io/nextjs-starter/blob/main/next.config.js](https://github.com/zesty-io/nextjs-starter/blob/main/next.config.js)\n\n```\n// Some code\nconst { fetchZestyRedirects } = require('./lib/zesty/fetchRedirects');\n\n// generated by lib/sync.js\nmodule.exports = {\n  trailingSlash: true,\n  eslint: {\n    ignoreDuringBuilds: true\n  },\n  async redirects() {\n    return await fetchZestyRedirects()\n  },\n  env: {\n      zesty: {\n          instance_zuid: \"\", // zesty unique id of content instance\n          stage: \"\", // e.g. the preview url from zesty https://XYZ-dev.webengine.zesty.io\n          production: \"\", // e.g. the live url https://www.acme.com\n          stage_password: \"\",\n          src_dir: \"\", // where the next project has pages, components, etc folders\n          options: {\n            skip_config_overwrite: false, // for setups with custom config files, after initial setup of the env.zesty object, set to true\n            model_ignore_list: [\n              '6-xyz-xyz',\n              '6-xyz-xyz' // an array of models ZUIDS to ignore when creating component files in views/zesty\n            ]\n          }\n\n      }\n  }\n}\n```\n\n### Working with Zesty View Components\n\nThe Zesty.io configuration for next.js will look for a component name after the content model in `views/zesty` directory in your next.js project. A content model named `articles` will look for a component `views/zesty/Article.js` Note the slight name change, as the naming convention is a `PascalCase` without pluralization, therefore `articles` becomes `Article`. We call this the alternate name, you can find the automated alternate name by look at the [`?toJSON`](../../../webengine/guides/json-endpoints/headless-and-hybrid-tojson.md#content-output) response of any content item through WebEngine.\n\n{% hint style=\"info\" %}\nContent models that start with a number will need N prepended to the name, e.g. `3slides` will be named `N3slides.js.` The sync script will automatically do this..\n{% endhint %}\n\nInstead of manually creating component, Zesty.io provide a script from downloading and creating components for each content model in your zesty.io instance.&#x20;\n\n#### Zesty.io Next.js Sync\n\nThe zesty sync is already built into the nextjs-starter, but if you would like to implement a custom sync file, you may download or reference this file [https://github.com/zesty-io/nextjs-starter/blob/main/lib/zesty/sync.js](https://github.com/zesty-io/nextjs-starter/blob/main/lib/zesty/sync.js)\n\nOnce sync is in your project, add this line to your package.json file `\"sync\": \"node lib/zesty/sync.js\",` under `\"scripts\"` once that is in place you can  run `npm run sync` from your terminal to automatically pull down files.\n\nAfter a `npm run sync` a view component is created for each Zesty Content Model in the `views/zesty` directory. Zesty Content Items that have URL will automatically resolve to the component in that `views` directory that is associated with the content models name.\n\n```\n// Example Component\n\nimport React  from 'react';\n\nfunction Article({ content }) {\n    return (\n        <>\n            {/* Zesty.io Output Example and accessible JSON object for this component. Delete or comment out when needed.  */}\n            <h1 dangerouslySetInnerHTML={{__html:content.meta.web.seo_meta_title}}></h1>\n            <div>{content.meta.web.seo_meta_description}</div>\n            {/* End of Zesty.io output example */}\n        </>\n    );\n}\n\nexport default Article;\n```\n\nEach Component loads with a {content} object, this object is a direct feed of that URLs ?toJSON response. [Read about toJSON](https://zesty.org/services/web-engine/introduction-to-parsley/parsley-index#tojson)\n","category":"guides","service":"tools"},{"name":"Next.js & Cookies","url":"/tools/guides/nextjs/next.js-and-cookies","objectId":"AzERav1z7JMUfM1l4I9l","item":[],"content":"---\ndescription: How to work with cookies in Next.js\n---\n\n# Next.js & Cookies\n\nThis tutorial assumes you have a Next.js project and are familiar with NPM and React. Final code example is available on g=Github [https://github.com/zesty-io/livestream-examples/blob/main/nextjs-example-website/pages/cookie-example.js](https://github.com/zesty-io/livestream-examples/blob/main/nextjs-example-website/pages/cookie-example.js)\n\n{% hint style=\"info\" %}\nW**hat you'll learn in the Next.js Cookies Tutorial**\n\n* What are cookies?\n* How set cookies with Next.js\n* How get cookies with Next.js\n* How to use cookies to personalize the page\n{% endhint %}\n\n### What are Cookies?\n\nCookies are small data storage objects that can written to and accessed from the browser during a user session. &#x20;\n\nCookies are used for tracking, personalization, app-memory, marketing recognition etc.. There isn't specific scope to which cookies can be used for. Common examples are tracking IDs, login session tokens, and filter option memory.&#x20;\n\n### How to set cookies with Next.js\n\nTo access and write cookies in a Next.js React app, we are going to leverage the NPM package [https://www.npmjs.com/package/cookies-next](https://www.npmjs.com/package/cookies-next) to cut down on writing custom code. Thank you  [https://github.com/andreizanik](https://github.com/andreizanik) for the package!\n\nTo get started, install `cookies-next` using NPM or Yarn to your project.&#x20;\n\n```bash\nnpm install -s cookies-next\n```\n\nAfter installing `cookies-next` to your project, open up the Next.js `/page` component you want to test cookies in. We will test on `homepage.js.`\n\nIn this example, we will write the cookie using client side code, this will work for both static site generation and server side rendering. To run code after the DOM renders, we will use [React's useEffect](https://reactjs.org/docs/hooks-effect.html) hook.&#x20;\n\n```javascript\nimport { React, useEffect } from 'react'; // note adding useEffect\nimport { setCookie } from 'cookies-next'; // the package you installed\n\nexport default function Homepage({content}){\n    let sortFilterDefault = 'DESC'; // set up default value\n    \n    // useEffect runs on the client after DOM renders  \n    useEffect(() => {\n        setCookie('sort', sortFilterDefault );\n    })\n    \n    // JSX output\n    return (\n        <div>\n            Header...\n            Body...\n            Footer...\n        </div>\n    );\n\n}\n```\n\n### How access (get) cookies with Next.js\n\nTo access the cookie we set, we will use both React's useEffect and [React's useState](https://reactjs.org/docs/hooks-state.html) hook connect values we extract from the client side to our JSX output. Nothing to install here as useHook and useEffect are both part of React.&#x20;\n\nA [ternary conditional](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional\\_Operator) is used to use a fallback value if the cookie isn't set.&#x20;\n\n```javascript\nimport { React, useEffect, useState} from 'react';\nimport { getCookie } from 'cookies-next';\n\nexport default function Homepage({content}){\n    let sortFilterDefault = 'DESC'; // set up default value\n\n    // Declare a new state variable, which we'll call \"sortFilter\"\n    // the inistial default value we pass is 'DESC' for decending sort\n    const [sortFilter, setSortFilter] = useState(sortFilterDefault);\n  \n    useEffect(() => {\n        // using a ternary conditional to have a fallback value\n        let cookieValue = getCookie('sort') ? getCookie('sort') : sortFilterDefault ;\n        setSortFilter(cookieValue);\n    })\n    \n    return (\n        <div>\n            Header...\n            <div>\n                Sort Filter Option: {sortFilter}\n            </div>\n            Footer...\n        </div>\n    );\n\n}\n```\n\n### Using cookies to personalize a Next.js page\n\nUsing the same example as above, we will leverage the written cookie value to change the presentation output, and also connect that change to a select input, which will update or write the cookie.\n\n```javascript\nimport { React, useEffect, useState } from 'react';\nimport { getCookie, setCookie } from 'cookies-next';\n\nexport default function Homepage({content}){\n    let sortFilterDefault = 'DESC'; // set up default value\n\n    // Declare a new state variable, which we'll call \"sortFilter\"\n    // the inistial default value we pass is 'DESC' for decending sort\n    const [sortFilter, setSortFilter] = useState(sortFilterDefault);\n \n    // function to use with select to set value\n    const handleChange = (event) => {\n        const sort = event.target.value;\n        setSortFilter(sort);\n        setCookie('sort', sort);\n    };\n\n    // client execution after dom renders\n    useEffect(() => {\n        // using a ternary conditional to have a fallback value\n        setSortFilter(getCookie('sort'));\n       \n    })\n    \n    return (\n        <div>\n            Header...\n            <div>\n                <select onChange={handleChange}>\n                    <option value=\"ASC\">Ascending</option>\n                    <option value=\"DESC\">Descending</option>\n                </select>\n            \n               {sortFilter == 'ASC' && <table>\n                   table data sorting ascending order\n               </table>}\n               \n               {sortFilter == 'DESC' && <table>\n                   table data sorting decending order\n               </table>}\n            </div>\n            Footer...\n        </div>\n    );\n\n}\n```\n","category":"guides","service":"tools"},{"name":"Pagination and Search Example with Custom Endpoint and Next.js","url":"/tools/guides/nextjs/pagination-and-search-example-with-custom-endpoint-and-next.js","objectId":"ZHz0FCfcZatywIcLpB3h","item":[],"content":"---\ndescription: >-\n  Lean how to create a custom JSON endpoint to power content like blogs with\n  pagination and search.\n---\n\n# Pagination and Search Example with Custom Endpoint and Next.js\n\n### Create a custom Search Endpoint\n\nIn Manager, open Code, create new file, Select `custom` with the name `/data/search.json`\n\n{% code title=\"/data/search.json\" overflow=\"wrap\" lineNumbers=\"true\" %}\n```handlebars\n[\n{{each blog_posts as article where article.blog_posts_name LIKE '%{get_var.q}%' or article.blog_content LIKE '%{get_var.q}%'  limit 10 }}\n{{article.toJSON(2, true) }}\n{{if {article._length} > {article._num}  }}, {{ end-if}}\n{{end-each}}\n]\n```\n{% endcode %}\n\n### Search Usage\n\nYou may now make a request to `https://www.yoururl.com/data/search.json?q=Your Search`\n\n### Created a Custom Pagination Endpoints\n\nIn Manager, open Code, create new file, Select `custom` with the name `/data/`pagination`.json`\n\n{% code title=\"/data/pagination.json\" overflow=\"wrap\" lineNumbers=\"true\" %}\n```handlebars\n{{$limit = 12}} {{$page = 0}} \n{{if {get_var.start} }} {{$page = {get_var.start} }} {{end-if}} \n{{if {get_var.limit} }} {{$limit = {get_var.limit} }} {{end-if}} \n[\n{{each blog_posts as article limit {$start},{$limit} order by article.created_at DESC }}\n{{article.toJSON(2, true) }}\n{{if {article._length} > {article._num}  }}, {{ end-if}}\n{{end-each}}\n]\n```\n{% endcode %}\n\n### Pagination Usage\n\nYou may now make a request to `https://www.yoururl.com/data/pagination.json?start=0&limit=10`\n","category":"guides","service":"tools"},{"name":"SSR: Server Side Rendering","url":"/tools/guides/nextjs/ssr-server-side-rendering","objectId":"a4B7yz2kUSXJdkuSqLfk","item":[],"content":"---\ndescription: How to build Next.js with server side rendering with Zesty.io\n---\n\n# SSR: Server Side Rendering\n\nThe Zesty nextjs-starter example starts by using server side rendering. Use this guide to help you end to end deploy your next.js app to Google Cloud Platform.\n\n### Data & Delivery Pipeline for Next.js with Zesty.io\n\n![Next.js & Zesty.io SSR Pipeline](<../../../.gitbook/assets/Nextjs Zesty.io SSR Pipeline.png>)\n\n### Before Implementation\n\nBefore the implementation of the Next.js application please have the following items installed and available:\n\n**Required:**\n\n1. Have your preferred code editor installed (VS Code, Atom, etc.)\n2. If you haven’t already, create a Zesty.io account here:\n   * [Create an Account](https://accounts.zesty.io/signup)\n3. Ensure that you have Node.js version 14 or higher and npm version 8 or higher installed (displayed below in installation order):\n   * Node.js installation: [https://nodejs.org/en/](https://nodejs.org/en/)\n   * NPM installation: [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)\n   * Command-line installation of NPM (optional install method): `npm install -g npm`\n   * To check which version of Node.js and npm you have installed you can use the following commands:\n     * Node: `node -v`\n     * NPM: `npm -v`\n4. Install Docker Desktop: [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n5. Create a GitHub account, if you are already an account holder please log in: [Github Sign up](https://github.com/signup?ref\\_cta=Sign+up\\&ref\\_loc=header+logged+out\\&ref\\_page=%2F\\&source=header-home)\n6. Install GitHub Desktop: [Github Desktop](https://desktop.github.com/)\n7. Create a GCP account: [Cloud Computing, Hosting Services, and APIs | Google Cloud](https://cloud.google.com/gcp/?utm\\_source=google\\&utm\\_medium=cpc\\&utm\\_campaign=na-US-all-en-dr-bkws-all-all-trial-p-dr-1011347\\&utm\\_content=text-ad-none-any-DEV\\_c-CRE\\_532163069700-ADGP\\_Desk%20%7C%20BKWS%20-%20PHR%20%7C%20Txt%20\\~%20Google%20Cloud%20\\~%20General-KWID\\_43700064911472519-kwd-350210914281\\&utm\\_term=KW\\_google%20cloud%20registration-ST\\_google%20cloud%20registration\\&gclid=EAIaIQobChMI3tDctqij-AIVORmtBh0YqgpiEAAYASAAEgK4k\\_D\\_BwE\\&gclsrc=aw.ds)\n8. Install Google Cloud CLI: [Install the gcloud CLI](https://cloud.google.com/sdk/docs/install)\n9. Google Cloud Auth login (authenticate with google)\n\n### GCP Project Setup\n\n1. Create a GCP project\n   * Naming should be specific to the project. I.e. _<mark style=\"color:orange;\">company-website</mark>_&#x20;\n2. Roles and Permissions assigned to collaborators on the GCP project - each role will need to be added to each collaborator:\n   * Editor\n   * Cloud Build\n   * Cloud Build Approver\n   * Storage Admin\n   * Storage object Admin\n   * Cloud Run Admin\n3. Google Cloud CLI Tools\n   * Prior to implementation please install: [Google Cloud CLI Tools](https://cloud.google.com/sdk/docs/install)\n   * Use the quickstart installation guide and installer:\n     * MSI for Windows\n     * Command-line for MAC\n   * Check all boxes on the finish screen. After clicking finish Google CLI will open the command line to complete the authentication process.\n   * Follow the prompt commands. It will open an authentication page within the browser and provide the link in the terminal if it does not automatically redirect.\n   * On the authentication page, allow permissions access to all of the listed items and complete the authorization.\n   * Returning to the GCP command prompt, the user will be prompted to connect to a GCP project. Select the project established for the Next.js application. This establishes the default project referenced by the Google Cloud CLI.\n   * Complete the prompts and exit the CLI.\n\n### SSR Next.js Setup\n\nThe following steps initialize your Next.js application and connect it to your Zesty.io instance. After creating the Next.js app there will be additional steps to configure the connected Zesty Instance.\n\n1. Prior to implementation please be sure to have the following installed:\n   * Node.js 14 or higher\n   * NPM 8 or higher\n2. Prior to implementation please create a GitHub account and login in\n3. Setup procedures are provided in the Zesty Next.js starter documentation:\n   * [NextJS Starter Example for Running Zesty.io CMS](https://github.com/zesty-io/nextjs-starter)\n4. Run the npx installation script in the command line:\n   * `npx create-next-app --example https://github.com/zesty-io/nextjs-starter`\n5. Following the prompts the next.js starter provides, complete the following:\n   * The command line will prompt the user to name the Next.js app. To aid in easy connection recognition, this can be named the same as the connected Zesty Instance.\n   * Next, the command line will prompt the user to log into Zesty.io <mark style=\"color:orange;\">**Note:**</mark> This is done using your Zesty.io credentials\n   * Command-line will then prompt the user to connect with an existing instance or create a new instance for you. If the instance is already created, select the desired instance from those listed. Otherwise, select create a new instance.\n6. Once the installation of the next.js app is complete, cd into the app directory and start the app by running the following:\n   * `npm run dev`\n   * This will open the app in the browser at: [http://localhost:3000](http://localhost:3000)\n7. As new models are added to the connected instance, the following script is used to sync current Models with updated schemas to their components and create new Zesty components connected to newly created Zesty Models. This will not overwrite existing files.\n   * `npm run sync`\n8. Within the Next.js starter’s initial file structure there are several required files as well as a few optional. For a complete list of each and their functionality, please see the documentation here:\n   * [https://github.com/zesty-io/nextjs-starter#custom-integration-and-the-nextconfigjs-file](https://github.com/zesty-io/nextjs-starter#custom-integration-and-the-nextconfigjs-file)\n9. Configuration of the next.config.js file:\n10. To remove the Next.js starter tutorials include in the app, use the following in the command line:\n    * `rm -Rf views/tutorials`\n\n### Github Repository and Collaborators Setup\n\nOnce the Next.js installation is complete, the next steps will establish a connected GitHub repository for version control\n\n1. Once the installation and configuration are complete, you will need to create a GitHub repo and connect the repo to your Next.js app. This can be accomplished in one of two ways: through terminal/Git or through GitHub Desktop. Both processes allow the user to quickly create and connect to a repo that has the same name as the Next.js app. The following steps can be used to accomplish this, please choose Step 2 or 3. After completion of either continue on to Step 4.\n2. **GitHub & GitHub Desktop:**\n   * In GitHub Desktop select the ‘**File**’ button:\n     * In the dropdown select: **Add local repository**\n   * The user will be prompted with a form\n     * Within the form browse and select the root directory of the Next.js application\n     * The form will inform the user: ‘The directory does not appear to be a Git repository.’ Allowing the user to select the ‘create a repository’ link. This link will redirect to a create a repository form with the appropriate information filled.\n     * Within the form be sure the options for initializing a README.md, .gitignore, and license are all unchecked. This will alleviate the process of overwriting your current local files and the possibility of unrelated histories creating merge conflicts. Then select **Create repository**.\n     * As Github Desktop creates the repo it will stage and commit the Next.js app as the initial commit. This will also establish the **main** branch.\n   * GitHub Desktop will then prompt the user to publish the repository to GitHub. Click the **Publish repository** button to initialize.\n     * The user will be presented with a form that allows the selection of GitHub or GitHub Enterprise. Along with other options regarding the repo’s creation. (i.e. descriptions and organization)\n     * When completed select **Publish repository**\n   * With the publishing of the repo, GitHub will establish the main branch as the default/production branch.\n   * Select the **Current branch** tab within GitHub Desktop:\n     * In the provided dropdown, select **Branches**\n     * **Branches** provide an input that will allow the user to create a new branch in the GUI\n     * In the input add dev or the desired branch name for the staging branch\n     * The GUI will provide the 'merge into **main**' branch workflow immediately unless otherwise specified. It will prompt verification of this before creating the branch.\n   * While in the **dev** branch, select **Open in Visual Studio Code**\n     * This will open VS Code in the **dev** branch\n     * Update the README.md with the branching workflow\n   * Moving back into GitHub Desktop, the changes will be staged and ready to commit:\n     * Add commit comment and description\n     * Click **Commit to dev**\n     * The branch will now be available to publish by selecting the **Publish branch** button\n   * GitHub Desktop will then prompt the user to create a new pull request. Selecting Create Pull Request will redirect the user to GitHub.\n     * From here the pull request can be completed and merged into **main**\n3. **GitHub & Terminal/Git:**\n   * Log into GitHub and create a new repository:\n     * Initialize the repository without a README.md or .gitignore. This will alleviate unrelated history conflicts.\n     * Name the repository the same name you create for the Next.js app.\n     * Lowercase letters and hyphen-separated words are the best practice for this setup.\n     * Copy the git add remote URL provided in the repo after creation\n   * From the terminal/GitBash, navigate to the root directory of the Next.js app and run the following commands:\n     * `git init`\n     * `git add -A`\n     * `git commit -m \"your message here\"`\n     * `git branch -M main`\n     * <mark style=\"color:orange;\">**Note:**</mark> the GitHub URL below is an example, you will want to replace it with the remote repo URL you copied from GitHub. This will set your origin to the remote repo.\n     * `git add remote origin git@github.com:username/repo-name.git`\n     * `git push -u origin main`\n   * Run the following commands to create a new branch for development. This branch can have a name of your choosing, the below example creates a 'dev' branch:\n     * `git checkout -b dev`\n     * Open your app in VS Code and be sure the dev branch is selected.\n       * You can use the `code .` command, from the terminal, to open the code editor.\n     * Update the README, outlining the branch's workflow: **main** is the production branch and **dev** is the development branch.\n     * From the terminal run the following commands:\n     * `git add -A`\n     * `git commit -m \"your message here\"`\n     * `git pull origin main`\n     * `git push origin dev`\n   * The above process will establish the `'dev'` branch and allow you to create a pull request. Once approved dev can be merged into production.\n   * The pull request can be done on GitHub by selecting the repository.\n     * From within the repo, select **Pull requests**\n     * click **Create Pull Request**\n     * The provided form will allow users to select the dev merge into the main branch workflow. Complete the form and create the pull request to be reviewed\n     * <mark style=\"color:orange;\">**Note:**</mark> reviewers can be added in the form or after the pull request has been created.\n4. **Adding collaborators to the GitHub repository:**\n   * In the GitHub repository follow these instructions to add collaboration users:\n     * select Settings\n     * select Collaborators in the side navigation\n     * click Add people\n     * You can search for GitHub users by their username, full name, or email\n     * After users have been added they will receive an invite email. If the email was not received, a link to the invitation is provided in the Collaborations screen. This link can be sent to users as well.\n\n### Instance Settings & Configurations\n\nWithin the instance, there are a few required settings and suggested settings to enable the full potential of the Next.js integration.\n\n**Required:**\n\n1. **WebEngine Mode** setting: the rendering mode functionality is based on how the data is accessed for rendering. When using the Next.js app integration Headless or Hybrid are the Modes available. This setting is located in the Settings App, under the General section.\n   * **Hybrid:** this mode will allow for content to render HTML at their routes or as a JSON object. This does allow for a fallback for routes to render a traditional Zesty view when the Next.js rendering is unavailable.\n   * **Headless:** this mode only allows routes to render as JSON.\n2. **Proxy** settings within Zesty allow users to render from an outside bucket. When utilizing the Next.js app, the external bucket will be the GCP project URL. The setting is located in the Settings App, under the section Proxy. One field will be for the project staging URL and the other will be for the project production URL.\n\n**Suggested:**\n\n1. The following settings can be updated in the Settings App, under the section Security. It will allow Duo-Mode preview to display in your instance and secure previews.\n   * **Header: X-Frame-Options:** this field should be empty\n   * **Referrer-Policy:** this field should be empty\n   * **Preview Lock Password:** this field should be a password that is used to look at preview links\n\n### Docker Setup\n\nThe Docker file is established with a set of commands to be run in succession when the docker build is triggered.\n\n1. Prior to implementation install Docker Desktop. The installation link is provided [here](ssr-server-side-rendering.md#before-implementation).\n2. Within the root of your Next.js application create a file titled `Dockerfile`\n   * <mark style=\"color:orange;\">**Note:**</mark> the file does not need an extension\n3. After the creation of the file add the following code and save:\n\n```\nFROM node:16.4.2\n \nWORKDIR /usr/src/app\n \nCOPY . ./\nRUN npm install\n \nEXPOSE 8080\n \nENV HOST=0.0.0.0\nENV PORT=8080\n \nRUN npm run build\n \nCMD [ \"npm\", \"start\" ]\n```\n\n###\n","category":"guides","service":"tools"},{"name":"SSG: Static Site Generation","url":"/tools/guides/nextjs/ssg-static-site-generation","objectId":"f4qPY46KBnTEUHd6IPWi","item":[],"content":"---\ndescription: How to build Next.js with static site generation with Zesty.io\n---\n\n# SSG: Static Site Generation\n\n### Data & Delivery Pipeline for Next.js with Zesty.io\n\n![Static Site Generation Pipeline example.](<../../../.gitbook/assets/image (52).png>)\n\n","category":"guides","service":"tools"}],"content":"---\ndescription: How to work with the Zesty content object that is fed into Next.js components.\n---\n\n# Zesty Content Object\n\n### How the page content object works\n\nThe each Zesty.io content model has an associated react component in the `views/zesty` project folder. Each component is fed a {content} object, which contains content item field data, and meta data. Content is accessed like so: `{content.[field_name]}` See this example of a simple react component for an About Page.\n\n```javascript\n// AboutPage React Component for Zesty.io Content Model: About Page\n// The About Page content model has two fields\n// title: Plain Text\n// body: Rich Text\nimport React  from 'react';\n\nfunction AboutPage({content}) {\n    return (\n        <>\n            <h1>{{content.title}}></h1>\n            <div dangerouslySetInnerHTML={{__html:content.body}} />\n        </>\n    );\n}\n```\n\n### How to relational content to work with Next.js\n\nIts best to build content model schema's to include as much of the content on the page for the content author to control, this mean images, text, files, and rich text. To connect related content to a page, using a one to one or many to one fields types will give you access to all the content of the related content item without making additional fetch requests.\n\n```javascript\n// title: Plain Text\n// body: Rich Text\n// team: Many to One Relational to Team Member content item\nimport React  from 'react';\n\nfunction AboutPage({content}) {\n    return (\n        <>\n            <h1>{{content.title}}></h1>\n            <div dangerouslySetInnerHTML={{__html:content.body}} />\n            <h2>Our Team</h2>\n            <div>\n                {content.team.data.map(member => \n                    <div>\n                        <h4>{member.name} - {member.title}</h4>\n                        <p>{member.description}</p>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n```\n\n### How to fetch content not available in the page content object\n\nWhen the content you need does not live on the content item, you may fetch it to use in your page.  In this example, instead of using a many to one relational field, we fetch team members remotely.\n\n\n\n```javascript\n// AboutPage React Component for Zesty.io Content Model: About Page\n// The About Page content model has two fields\n// title: Plain Text\n// body: Rich Text\nimport React  from 'react';\n\n// fetch for data\nconst fetchTeamData = async (uri, setFunc) => {\n  const res = await fetch(uri).then((response) => response.json());\n  res && (await setFunc(res));\n};\n\n// AboutPage component\nfunction AboutPage({content}) {\n\n    let zestyURL = content.zestyProductionMode\n        ? process.env.zesty.production\n        : process.env.zesty.stage;\n\n    const uri = `${zestyURL}/-/team.json`;\n    const [teamMembers, setTeamMembers] = React.useState([]);\n    \n    // get data in initial load\n    React.useEffect(() => {\n        fetchTeamData(uri, setTeamMembers);\n    }, []);\n\n    return (\n        <>\n            <h1>{{content.title}}></h1>\n            <div dangerouslySetInnerHTML={{__html:content.body}} />\n            <h2>Our Team</h2>\n            <div>\n                {teamMembers.data.map(member => \n                    <div>\n                        <h4>{member.name} - {member.title}</h4>\n                        <p>{member.description}</p>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n```\n","category":"guides","service":"tools"},{"name":"Atom IDE Package","url":"/tools/guides/atom-package","objectId":"-M4z5Dhot7Oy-b-RmNmR","item":[],"content":"---\ndescription: >-\n  Use the Zesty.io Atom package to edit your instances code files locally and\n  get automatic syncing to your remote instance.\n---\n\n# Atom IDE Package\n\n## Getting Started\n\nTo get started with the Atom IDE package you must first have the Atom editor installed. After you have Atom installed the next step is to install the zestyio-atom packages. After you've done that obtain the details of the instance that you want to edit in Atom. You will use details to connect to it to Atom.\n\nIf you don't have Atom, download and install the Atom editor directly from [Atom's site](https://atom.io/).\n\n### 1. Install the Package\n\nThere are 2 ways to install the zestyio-atom package:&#x20;\n\n* Command-line\n* Atom UI\n\n#### Command-line\n\nInstall the [`zestyio-atom`](https://atom.io/packages/zestyio-atom) package by running this command in your command-line.\n\n```\napm install zestyio-atom\n```\n\n**Installing through the Atom UI**\n\nThe Atom Editor can also be installed through the Atom package manager. When you have [ATOM](https://atom.io) installed, open settings, click on install, search Zesty. Install **zestyio-atom** and **zestyio-parsley-atom**.\n\n![Snap shot of searching for Zesty Plugin in the ATOM Editor](<../../.gitbook/assets/image (106).png>)\n\n### 2. Get Your Instance Details\n\n#### A. Get your Instance ZUID\n\nLogin to your Zesty.io account and you'll arrive at the all-instances view. Find the instance that you want to work on and click the ⚙️(cog) icon on that instance's card and you'll see the Instance Settings Drawer slide out from the right side of the screen.  From here you can find your Instance ZUID:\n\n![Instance details.](../../.gitbook/assets/instance-details.png)\n\nMake note of your instance's ZUID as you'll need it when you're connecting to Atom.\n\n#### B. Create a new Access Token\n\nScroll down in the Instance Settings Drawer until you find the Access Tokens section.\n\n![Instance Settings Drawer access tokens section.](../../.gitbook/assets/access-tokens-ui.png)\n\nSpecify the name and the role of the token, select a [role](https://zesty.org/getting-started/roles-and-permissions),  and click the \"Create Token\" button. Make note of this token as you will need it when you're connecting your instance to Atom.&#x20;\n\n{% hint style=\"warning\" %}\nThe token will only be revealed to the user upon creation. After you close the modal (shown below) you will not be able to access the token again. Keep this token in a private place and do not share it with anyone.\n{% endhint %}\n\n![New access token modal.](<../../.gitbook/assets/new-access-token (1).png>)\n\n### 3. Connect to your Zesty instance\n\nAfter installing Atom and the zestyio-atom & zestyio-parsley-atom packages you can now connect to your instance using the instance ZUID and token.\n\n#### A. Create an empty directory for your instance.\n\nUse the command-line to make a folder named after your instance:&#x20;\n\n```bash\nmkdir mydomain.com\n```\n\nOr use your computer's file manager to create a folder and name it after your instance.&#x20;\n\n![Create a folder in your file manager.](../../.gitbook/assets/atom-file-manager.png)\n\n#### B. zesty.json file\n\nNext create a new file inside you directory (or folder) called `zesty.json`.&#x20;\n\nAdd the following JSON to the `zesty.json` file.\n\n```\n{\n \"instanceZUID\": \"INSTANCE_ZUID\",\n \"token\": \"INSTANCE_TOKEN\"\n}\n```\n\nReplace the `INSTANCE_ZUID` & `INSTANCE_TOKEN` with the values from you obtained in step 2.\n\n#### C. Open your instance directory\n\nIn Atom to trigger the instance sync. _If Atom is already open you will need to restart it._&#x20;\n\n{% hint style=\"info\" %}\nOnce syncing is completed you should see your instance code files in your Atom project file tree.\n{% endhint %}\n\nIf you need to login to Zesty.io Atom will prompt you.\n\n**Alternatively, connect to your instance through the User sign-in modal**\n\nFrom Atom's navigation bar locate Packages, then hover over Zesty.io to see a secondary menu and select Login to Zesty.io.&#x20;\n\n![Login to Zesty.io via Atom.](../../.gitbook/assets/atom-login-to-zesty.png)\n\n&#x20;\\\nThis video covers using the sign-in modal method and includes instructions on downloading Atom: [https://www.youtube.com/watch?v=s98dR1M2u8E](https://www.youtube.com/watch?v=s98dR1M2u8E)\n","category":"guides","service":"tools"},{"name":"Chrome Browser Extension","url":"/tools/guides/chrome-extension","objectId":"-M6qdgJ2MZEO2_vA4Gqw","item":[],"content":"---\ndescription: >-\n  Use the Zesty.io Chrome Extension, WebEngine View Explorer, to see on page\n  details for the currently viewed model\n---\n\n# Chrome Browser Extension\n\n![Zesty.io Chrome Extension](https://raw.githubusercontent.com/zesty-io/chrome-ext/master/chrome-store-main.png)\n\nThe Zesty.io chrome extension, WebEngine View Explorer, allows you to gain insight into the current pages models and have quick links to in app management of these resources. [View this codebase on github](https://github.com/zesty-io/chrome-ext).\n\n[Install the Zesty.io Chrome Extension](https://chrome.google.com/webstore/detail/zestyio-webengine-view-ex/mnkmogppmhhmafgfljgckpkapodofjob)\n","category":"guides","service":"tools"},{"name":"Headless Code Examples","url":"/tools/guides/code-examples","objectId":"-LKYGZ6bDU6RdoHguMvj","item":[],"content":"# Headless Code Examples\n\n## Principles of Headless Zesty.io\n\nZesty.io provides many basic content apis to pull content from your site, allowing for easy access of your content. Additionally, Zesty.io allows you to create custom endpoints, allowing you to perform logic / more advanced queries when pulling data. These endpoints are the fundamental building blocks that define headless Zesty.io products — when put together, anything can be created.\n\nThe pages in this guide detail various examples that use Zesty.io, and also include links to their source code. Additionally, you can receive support from our developers at chat.zesty.io\n\n## Getting Started\n\n{% hint style=\"danger\" %}\nThis guide assumes that you already have a zesty.io instance created with content to consume. If you don't yet have a zesty.io instance, you can learn how to create one here\n{% endhint %}\n\nFirst, you'll need to figure out which platform you want to integrate with Zesty.io. We currently have guides and example projects for Swift, React, Rails, Hugo, and Jekyll, but don't let that stop you! Zesty.io endpoints can be consumed anywhere you want, so sky's the limit.\n\nSecond, you need to decide whether you want to consume Zesty.io content remotely or locally. To consume content **remotely** means that you'll be performing a request to Zesty.io every time you want to _load_ content. To consume content **locally** means that you'll be performing a request to Zesty.io every time you want to _reload_ content.\n","category":"guides","service":"tools"},{"name":"code-examples","url":"/tools/guides/code-examples","item":[{"name":"React","url":"/tools/guides/code-examples/react","objectId":"-LKYRNYs-KhkAKbMhlVM","item":[],"content":"# React\n\n## Remote Example\n\nThis React app pulls data from Zesty.io endpoints to show the simplicity of using the platform. The example consumes the Homepage and Menu endpoints from Zesty.io for a simple example.\n\n{% content-ref url=\"guide-remote-react-app.md\" %}\n[guide-remote-react-app.md](guide-remote-react-app.md)\n{% endcontent-ref %}\n\n## Local Example\n\nIdentical to the remote example in almost every way, the local example pulls the data from Zesty.io before each build and stores it locally. It takes advantage of a simple script that pulls the data from Zesty.io\n\n{% content-ref url=\"guide-local-react-app.md\" %}\n[guide-local-react-app.md](guide-local-react-app.md)\n{% endcontent-ref %}\n","category":"guides","service":"tools"},{"name":"react","url":"/tools/guides/code-examples/react","item":[{"name":"Guide (Local React App)","url":"/tools/guides/code-examples/react/guide-local-react-app","objectId":"-LLITDMaSib7ZF8GglBH","item":[],"content":"# Guide (Local React App)\n\nGithub repository for this Walkthrough Guide: [https://github.com/zesty-io/zesty-local-react-example](https://github.com/zesty-io/zesty-local-react-example)\n\n## Getting Started with the Example App\n\nFirst, we'll need to install the `pull-zesty` package. (For more detail,[ see the docs page ](https://github.com/zesty-io/zesty-org/tree/2c2b2cdfbf60f7308aedeb999c44eb98b7dbd490/pullzesty.md)on `pullzesty`)\n\n```bash\ngit clone https://github.com/zesty-io/pullzesty\ncd pullzesty\nnpm link\n```\n\nNext, lets clone [the example app](https://github.com/zesty-io/zesty-local-react-example)\n\n```\ncd path/to/your/projects/folder\ngit clone https://github.com/zesty-io/Zesty-Local-React-Example\ncd Zesty-Local-React-Example\n```\n\nNow, all we need to do to run is install the required dependencies\n\n```bash\nnpm install\nnpm start\n```\n\n{% hint style=\"info\" %}\nNote how calling `npm start` also calls `pullzesty`\n{% endhint %}\n\n### Understanding the Example Project\n\nThe `zesty.yaml` file defines what endpoints we rely on. In this case, we are using two custom endpoints, [`/-/basic-api/homepage.json`](https://6c706l48-dev.preview.zestyio.com/-/basic-api/homepage.json) and [`/-/custom/menulist.json`](https://6c706l48-dev.preview.zestyio.com/-/custom/menulist.json)\\`\\`\n\nWe save the `.json` from these endpoints into `src/data` and use the data in our React code. This can be seen in [`src/Home.js`](https://github.com/zesty-io/Zesty-Local-React-Example/blob/master/src/Home.js) and [`src/Menu.js`.](https://github.com/zesty-io/Zesty-Local-React-Example/blob/master/src/Menu.js)\n\n{% code title=\"Home.js\" %}\n```jsx\nimport React, { Component } from \"react\";\nlet homepageJSON = require(\"./data/homepage.json\");\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      homeData: {}\n    };\n  }\n  componentDidMount() {\n    const loadData = () => {\n      let data = JSON.parse(JSON.stringify(homepageJSON));\n      this.setState({ homeData: data });\n    };\n    loadData();\n  }\n  render() { // greatly simplified for explanation, see the full file on Github\n    return (\n      <div data-spy=\"scroll\" data-target=\"#site-navbar\" data-offset=\"200\">\n        <h1 className=\"site-heading no- mb-3\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_title}\n        </h1>\n        <h2 className=\"h5 site-subheading mb-5 no-\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_description}\n        </h2>\n      </div>\n    );\n  }\n}\n```\n{% endcode %}\n\n{% hint style=\"info\" %}\nNote how the only difference between the [local](https://github.com/zesty-io/zesty-org/tree/2c2b2cdfbf60f7308aedeb999c44eb98b7dbd490/headless/react/local-guide.md#understanding-the-example-project) and [remote](https://github.com/zesty-io/zesty-org/tree/2c2b2cdfbf60f7308aedeb999c44eb98b7dbd490/headless/react/remote-guide.md#understanding-the-example-project) examples is `componentDidMount`\n{% endhint %}\n\nUsing `componentDidMount`, we're able to load in our JSON and render it accordingly. After we load it in, it's just a matter of parsing a JS Object.\n\nAdditionally, it's not too much different to change this to work remotely instead of locally, as the next guide will show.\n","category":"guides","service":"tools"},{"name":"Guide (Remote React App)","url":"/tools/guides/code-examples/react/guide-remote-react-app","objectId":"-LLITDMb4thz6f1ir_1y","item":[],"content":"# Guide (Remote React App)\n\nGithub repository for this Walkthrough Guide: [https://github.com/zesty-io/zesty-remote-react-example](https://github.com/zesty-io/Zesty-Remote-React-Example#zesty-remote-react-example)​\n\n## Getting Started with the Example App\n\nLet's start by cloning [the example app](https://github.com/zesty-io/Zesty-Remote-React-Example)\n\n```bash\ncd path/to/your/projects/folder\ngit clone https://github.com/zesty-io/Zesty-Remote-React-Example\ncd Zesty-Remote-React-Example\n```\n\nNow, let's install and run the app\n\n```bash\nnpm install\nnpm start\n```\n\n### Understanding the Example Project\n\nIn this project, we are using two custom endpoints, [`/-/basic-api/homepage.json`](https://6c706l48-dev.preview.zestyio.com/-/basic-api/homepage.json) and [`/-/custom/menulist.json`](https://6c706l48-dev.preview.zestyio.com/-/custom/menulist.json)\n\nIn our React code, we perform a `GET` request to these endpoints This can be seen in [`src/Home.js`](https://github.com/zesty-io/Zesty-Remote-React-Example/blob/master/src/Home.js) and [`src/Menu.js`](https://github.com/zesty-io/Zesty-Remote-React-Example/blob/master/src/Menu.js).\n\n{% code title=\"Home.js\" %}\n```jsx\nimport React, { Component } from \"react\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      homeData: {}\n    };\n  }\n  componentDidMount() {\n    fetch(\"http://burger.zesty.site/-/basic-api/homepage.json\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ homeData: data });\n      });\n  }\n  render() { // greatly simplified for explanation, see the full file on Github\n    return (\n      <div data-spy=\"scroll\" data-target=\"#site-navbar\" data-offset=\"200\">\n        <h1 className=\"site-heading no- mb-3\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_title}\n        </h1>\n        <h2 className=\"h5 site-subheading mb-5 no-\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_description}\n        </h2>\n      </div>\n    );\n  }\n}\n```\n{% endcode %}\n\n{% hint style=\"info\" %}\nNote how the only difference between the [local](https://github.com/zesty-io/zesty-org/tree/afa5f7fa7e3c4a65230b1295ae266512caa516ca/headless/react/local-guide.md#understanding-the-example-project) and [remote](https://github.com/zesty-io/zesty-org/tree/afa5f7fa7e3c4a65230b1295ae266512caa516ca/headless/react/remote-guide.md#understanding-the-example-project) examples is `componentDidMount`\n{% endhint %}\n\nUsing `componentDidMount`, we're able to fetch our JSON and render it accordingly. After we load it in, it's just a matter of parsing a JS Object.\n\nAdditionally, it's not too much different to change this to work locally instead of remotely, as the prior guide shows.\n","category":"guides","service":"tools"}],"content":"# Guide (Local React App)\n\nGithub repository for this Walkthrough Guide: [https://github.com/zesty-io/zesty-local-react-example](https://github.com/zesty-io/zesty-local-react-example)\n\n## Getting Started with the Example App\n\nFirst, we'll need to install the `pull-zesty` package. (For more detail,[ see the docs page ](https://github.com/zesty-io/zesty-org/tree/2c2b2cdfbf60f7308aedeb999c44eb98b7dbd490/pullzesty.md)on `pullzesty`)\n\n```bash\ngit clone https://github.com/zesty-io/pullzesty\ncd pullzesty\nnpm link\n```\n\nNext, lets clone [the example app](https://github.com/zesty-io/zesty-local-react-example)\n\n```\ncd path/to/your/projects/folder\ngit clone https://github.com/zesty-io/Zesty-Local-React-Example\ncd Zesty-Local-React-Example\n```\n\nNow, all we need to do to run is install the required dependencies\n\n```bash\nnpm install\nnpm start\n```\n\n{% hint style=\"info\" %}\nNote how calling `npm start` also calls `pullzesty`\n{% endhint %}\n\n### Understanding the Example Project\n\nThe `zesty.yaml` file defines what endpoints we rely on. In this case, we are using two custom endpoints, [`/-/basic-api/homepage.json`](https://6c706l48-dev.preview.zestyio.com/-/basic-api/homepage.json) and [`/-/custom/menulist.json`](https://6c706l48-dev.preview.zestyio.com/-/custom/menulist.json)\\`\\`\n\nWe save the `.json` from these endpoints into `src/data` and use the data in our React code. This can be seen in [`src/Home.js`](https://github.com/zesty-io/Zesty-Local-React-Example/blob/master/src/Home.js) and [`src/Menu.js`.](https://github.com/zesty-io/Zesty-Local-React-Example/blob/master/src/Menu.js)\n\n{% code title=\"Home.js\" %}\n```jsx\nimport React, { Component } from \"react\";\nlet homepageJSON = require(\"./data/homepage.json\");\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      homeData: {}\n    };\n  }\n  componentDidMount() {\n    const loadData = () => {\n      let data = JSON.parse(JSON.stringify(homepageJSON));\n      this.setState({ homeData: data });\n    };\n    loadData();\n  }\n  render() { // greatly simplified for explanation, see the full file on Github\n    return (\n      <div data-spy=\"scroll\" data-target=\"#site-navbar\" data-offset=\"200\">\n        <h1 className=\"site-heading no- mb-3\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_title}\n        </h1>\n        <h2 className=\"h5 site-subheading mb-5 no-\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_description}\n        </h2>\n      </div>\n    );\n  }\n}\n```\n{% endcode %}\n\n{% hint style=\"info\" %}\nNote how the only difference between the [local](https://github.com/zesty-io/zesty-org/tree/2c2b2cdfbf60f7308aedeb999c44eb98b7dbd490/headless/react/local-guide.md#understanding-the-example-project) and [remote](https://github.com/zesty-io/zesty-org/tree/2c2b2cdfbf60f7308aedeb999c44eb98b7dbd490/headless/react/remote-guide.md#understanding-the-example-project) examples is `componentDidMount`\n{% endhint %}\n\nUsing `componentDidMount`, we're able to load in our JSON and render it accordingly. After we load it in, it's just a matter of parsing a JS Object.\n\nAdditionally, it's not too much different to change this to work remotely instead of locally, as the next guide will show.\n","category":"guides","service":"tools"},{"name":"Swift","url":"/tools/guides/code-examples/swift","objectId":"-LKYRNYqN13k-0BrG4nm","item":[],"content":"# Swift\n\n## Zesty Swift Content Endpoint Wrapper\n\nThis is a [Cocoapod](https://cocoapods.org) library created to assist in making iOS Apps using the Zesty.io platform. While not required to consume Zesty.io endpoints, this library streamlines much of the process.\n\nGithub: [https://github.com/zesty-io/zestyswiftcontentendpointwrapper](https://github.com/zesty-io/zestyswiftcontentendpointwrapper)\n\n## ZestyBurger iOS Basic Navigation App\n\nThis is a simple navigation app that lets users navigate through the menus on ZestyBurger. This example gives simple, easy to follow examples of the methods provided by the ZestySwiftContentEndpointWrapper.\n\nGithub: [https://github.com/zesty-io/zesty-ios-swift-application-basic-example](https://github.com/zesty-io/zesty-ios-swift-application-basic-example#zesty-ios-swift-application-basic-example)\n\n## ZestyBurger iOS App\n\nThis is a full-scale iOS App that completely integrates the ZestyBurger website with the iOS Platform. This example consumes all types of endpoints from Zesty, and also displays some content (Rewards) that does not appear on the website.\n\nGithub: [https://github.com/zesty-io/zestyburger-ios](https://github.com/zesty-io/zestyburger-ios)\n\n{% content-ref url=\"ios-app-guide.md\" %}\n[ios-app-guide.md](ios-app-guide.md)\n{% endcontent-ref %}\n","category":"guides","service":"tools"},{"name":"swift","url":"/tools/guides/code-examples/swift","item":[{"name":"iOS App Guide","url":"/tools/guides/code-examples/swift/ios-app-guide","objectId":"-LLITDMd_kWKOXcnaoAm","item":[],"content":"# iOS App Guide\n\nMaintaining an iOS App can be extremely difficult and tricky. App Review times are typically 1-2 days and require excessive developer input (when all that's really being changed is an image or a string). Zesty.io allows developers to write their code once, and let marketers update the content continuously.\n\nIn this tutorial I'll be walking you through how to setup your Zesty.io instance and iOS App to allow the iOS App to get data from the Zesty.io instance.\n\n## Setting up the Zesty Instance\n\n### Creating the Instance\n\nFirst, we'll need to create an instance (if you haven't already).\n\n![Creating the Instance](../../../../.gitbook/assets/instancecreation.png)\n\nAny template will work, and in this example we'll be using the Bootstrap Template.\n\n![Choosing Zesty Template](<../../../../.gitbook/assets/templateselection (1).png>)\n\n### Configuring the Content\n\nOnce we open up the manager, we'll need to configure the content that we'll load from our iOS App.\n\nGo to Config and create a Set of Content Entries. Call it `Coupons`\n\n![Creating the Set](<../../../../.gitbook/assets/setcreation (1).png>)\n\nNext, we'll add a few fields to load in, a Text Field called `name`, and a TextArea Field called `description`.\n\n![Set Config](<../../../../.gitbook/assets/setconfig (1).png>)\n\nWhile we're here in the Config tab, we'll enable Basic JSON Endpoints by going to Site Settings -> Sitewide Settings -> Developer and clicking the right options.\n\n![Instance Settings](../../../../.gitbook/assets/sitesettings.png)\n\nAfter saving, go to Content and we'll add an entry to our `Coupons` Dataset\n\n![Adding a New Entry](<../../../../.gitbook/assets/addinganewentry (1).png>)\n\nNow that our Zesty Instance is created, we can start making our iOS App!\n\n## Making the iOS App\n\nIn order to make an iOS App, you'll first need to download [Xcode](https://itunes.apple.com/us/app/xcode/id497799835?mt=12), which also means that you'll need a [Mac](https://www.apple.com/mac/). After installing Xcode, you can move onto the next step, which involves actually creating the app and getting it setup.\n\n### Setting up your project and installing libraries\n\nOpen up Xcode and Create a New Xcode project (if you don't see this option, ⌘ ⇧N should also work).\n\nFor our purposes, we'll just create a Single View App (but you can choose any option you want for your project)\n\n![Creating a Single View App](../../../../.gitbook/assets/singleviewapp.png)\n\nCall it whatever you'd like, and for the Organization Identifier, Apple typically recommends using a reverse domain id, so if your domain is `example.com`, enter in `com.example`. This will make sure you have a proper Bundle ID created.\n\n![Settings for new App](../../../../.gitbook/assets/iosappnaming.png)\n\nHit Next, then create the project wherever you'd like. Additionally, if you'd like to use source control (Git \\[Github/Bitbucket], etc), make sure to specify that now.\n\nOnce you create your project, we're going to install some libraries.\n\nWe'll be using [Cocoapods](https://cocoapods.org), which is an open source package manager for iOS Applications. Cocoapods will make sure that your project works properly, and it will also allow you to use the library that we created to streamline using Zesty in your product.\n\nTo do this, we'll need to create a `Podfile`\n\nGo to File -> New -> File...\n\n![Creating a new file](<../../../../.gitbook/assets/newfile (1) (1) (1) (1).png>)\n\nChoose Other -> Empty\n\n![File Type](<../../../../.gitbook/assets/filetype (1).png>)\n\nCall it `Podfile`, and store it at the base of your project directory, alongside your `.xcodeproj` file\n\n![Where to put Podfile](../../../../.gitbook/assets/podfilelocation.png)\n\nInside `Podfile`, paste in this code: (and replace iOS Tutorial App with the name of your Xcode Project Name\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '10.0'\nuse_frameworks!\n\ntarget 'iOS Tutorial App' do\n\n    use_frameworks!\n\n    pod 'ZestySwiftContentEndpointWrapper', '~> 0.2.0'\n        pod 'SwiftyJSON', '~> 4.0'\n\n  target 'iOS Tutorial AppTests' do\n      inherit! :search_paths\n      # Pods for testing\n  end\n\n  target 'iOS Tutorial AppUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n```\n\nSave it, then close Xcode and open up the Terminal.\n\nWe'll now install the pods that we just specified in the `Podfile`\n\nFirst, to install cocoapods, open up your terminal (Can be found in Launchpad or Spotlight) and enter in the following commands:\n\nFor macOS 10.11 and above (El Capitan+)\n\n```\nsudo gem install -n /usr/local/bin cocoapods --verbose\npod setup --verbose\n```\n\nFor macOS 10.10 and below\n\n```\nsudo gem install cocoapods --verbose\npod setup --verbose\n```\n\nSidenote: the `--verbose` flag is included so you can see the progress of each command, as these commands usually take a while to run.\n\nNow, after Cocoapods has been installed, we'll navigate to your project's directory.\n\n**Note**: If you're unfamiliar with terminal commands, simply open up a terminal window , type in `cd`, then hit space. Then drag the folder from Finder to the terminal and hit enter.\n\nOnce you've navigated to the directory, run `pod install` and sit back and watch all the libraries install. While they install, here's a quick overview what's being installed\n\n* ZestySwiftContentEndpointWrapper : This Cocoapod allows easy retrieval of your Zesty data / endpoints without any hassle\n\n![Running Pod Install](<../../../../.gitbook/assets/podinstall (1).png>)\n\nAfter running `pod install`, you may notice that an `.xcworkspace` file was created. This is now going to be the file that you open up when you want to work on your app. This is how Cocoapods integrates the libraries into your project.\n\nOpen up your xcode workspace (just double click on the `.xcworkspace` file in finder), and Build your project (⌘B). This will complete the setup of your Cocoapods. You may get an error about Code Signing. This is easily fixed, you simply need to add a team in your project settings.\n\n**Important**: You must use the `.xcworkspace` file to make use of the Zesty Library!\n\n### Pulling Data from Zesty.io\n\nNow that everything has been setup, we can pull our data from Zesty!\n\nWe'll start by creating the UI For our Project. Open up `Main.storyboard` from the side menu, and drag a `UITableView` object from the objects inspector into the view controller. (For Xcode 10, the inspector is located on the top)\n\n![Adding the table view](../../../../.gitbook/assets/addingtableview.png)\n\nAfter adding it, click on the table view, then the Constraints Inspector on the bottom, and set the following Constraints (0 on all edges)\n\n![Constraints](<../../../../.gitbook/assets/constraints (1).png>)\n\nAfter this, hold the `control key` and drag from the table view to the view controller symbol (2 times). Select Data Source and Delegate.\n\n![Linking the table view](../../../../.gitbook/assets/linkingTableView.gif)\n\nNext, we'll need to link the tableview to our view controller. Click the Two Circles Icon on the top right,\n\n![Two Circles Icon](<../../../../.gitbook/assets/twocircles (1) (1) (1) (1).png>)\n\nand control drag the tableview to create a new outlet. Call it `tableView`.\n\n![Creating an outlet](../../../../.gitbook/assets/creatingOutlet.gif)\n\nAfter all of this, we can close the second window (there should be an X), and open up `ViewController.swift`\n\nChange the contents of `ViewController.swift` to look like the below code:\n\n```\nimport UIKit\nimport ZestySwiftContentEndpointWrapper\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n\n    @IBOutlet weak var tableView: UITableView!\n    var zesty: ZestySwiftContentEndpointWrapper!\n    var items: [[String: String]] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n\n        self.zesty = ZestySwiftContentEndpointWrapper(url: \"REPLACE WITH ZESTY PREVIEW DOMAIN\")\n        self.getData()\n    }\n\n     /// Call this function whenever you want to look for new data\n    func getData() {\n        self.zesty.getArray(for: \"REPLACE WITH ARRAY ZUID\") { (array, error) in\n            if error == nil {\n                self.items = array\n                self.tableView.reloadData()\n            }\n        }\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return self.items.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let item = self.items[indexPath.row]\n        let cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"SubtitleCell\")\n\n        cell.textLabel?.text = item[\"name\"]\n        cell.detailTextLabel?.text = item[\"description\"]\n\n        return cell\n    }\n\n\n}\n```\n\nA few things to note:\n\n* When we create the ZestySwiftContentEndpointWrapper, we need to specify a domain. For development purposes, we recommend using the Zesty-Provided Preview Domain.\n* In our `getData()` function, we need to specify the array zuid of the dataset we created, `Coupons`.\n  * We can figure this out by going back to our `Content` or `Config` page, and looking at the url when we've selected coupons\n\n![Where the zuid is](../../../../.gitbook/assets/zuidloc.png)\n\n![Other location of the zuid](<../../../../.gitbook/assets/otherloc (1).png>)\n\nAfter filling in those details, run your project on the iOS Simulator (⌘R), and see the magic happen!\n\n## The Final Product\n\n![Final Product](../../../../.gitbook/assets/finalproduct.png)\n\n### Next Steps\n\nNow that you know how to use the BasicJSONAPI with iOS / Swift, you can do incredible things!\n\nI recommend checking out the example ZestyBurger iOS App for a more complex example, which uses the `getCustomJSONData` functions that the library provides.\n","category":"guides","service":"tools"}],"content":"# iOS App Guide\n\nMaintaining an iOS App can be extremely difficult and tricky. App Review times are typically 1-2 days and require excessive developer input (when all that's really being changed is an image or a string). Zesty.io allows developers to write their code once, and let marketers update the content continuously.\n\nIn this tutorial I'll be walking you through how to setup your Zesty.io instance and iOS App to allow the iOS App to get data from the Zesty.io instance.\n\n## Setting up the Zesty Instance\n\n### Creating the Instance\n\nFirst, we'll need to create an instance (if you haven't already).\n\n![Creating the Instance](../../../../.gitbook/assets/instancecreation.png)\n\nAny template will work, and in this example we'll be using the Bootstrap Template.\n\n![Choosing Zesty Template](<../../../../.gitbook/assets/templateselection (1).png>)\n\n### Configuring the Content\n\nOnce we open up the manager, we'll need to configure the content that we'll load from our iOS App.\n\nGo to Config and create a Set of Content Entries. Call it `Coupons`\n\n![Creating the Set](<../../../../.gitbook/assets/setcreation (1).png>)\n\nNext, we'll add a few fields to load in, a Text Field called `name`, and a TextArea Field called `description`.\n\n![Set Config](<../../../../.gitbook/assets/setconfig (1).png>)\n\nWhile we're here in the Config tab, we'll enable Basic JSON Endpoints by going to Site Settings -> Sitewide Settings -> Developer and clicking the right options.\n\n![Instance Settings](../../../../.gitbook/assets/sitesettings.png)\n\nAfter saving, go to Content and we'll add an entry to our `Coupons` Dataset\n\n![Adding a New Entry](<../../../../.gitbook/assets/addinganewentry (1).png>)\n\nNow that our Zesty Instance is created, we can start making our iOS App!\n\n## Making the iOS App\n\nIn order to make an iOS App, you'll first need to download [Xcode](https://itunes.apple.com/us/app/xcode/id497799835?mt=12), which also means that you'll need a [Mac](https://www.apple.com/mac/). After installing Xcode, you can move onto the next step, which involves actually creating the app and getting it setup.\n\n### Setting up your project and installing libraries\n\nOpen up Xcode and Create a New Xcode project (if you don't see this option, ⌘ ⇧N should also work).\n\nFor our purposes, we'll just create a Single View App (but you can choose any option you want for your project)\n\n![Creating a Single View App](../../../../.gitbook/assets/singleviewapp.png)\n\nCall it whatever you'd like, and for the Organization Identifier, Apple typically recommends using a reverse domain id, so if your domain is `example.com`, enter in `com.example`. This will make sure you have a proper Bundle ID created.\n\n![Settings for new App](../../../../.gitbook/assets/iosappnaming.png)\n\nHit Next, then create the project wherever you'd like. Additionally, if you'd like to use source control (Git \\[Github/Bitbucket], etc), make sure to specify that now.\n\nOnce you create your project, we're going to install some libraries.\n\nWe'll be using [Cocoapods](https://cocoapods.org), which is an open source package manager for iOS Applications. Cocoapods will make sure that your project works properly, and it will also allow you to use the library that we created to streamline using Zesty in your product.\n\nTo do this, we'll need to create a `Podfile`\n\nGo to File -> New -> File...\n\n![Creating a new file](<../../../../.gitbook/assets/newfile (1) (1) (1) (1).png>)\n\nChoose Other -> Empty\n\n![File Type](<../../../../.gitbook/assets/filetype (1).png>)\n\nCall it `Podfile`, and store it at the base of your project directory, alongside your `.xcodeproj` file\n\n![Where to put Podfile](../../../../.gitbook/assets/podfilelocation.png)\n\nInside `Podfile`, paste in this code: (and replace iOS Tutorial App with the name of your Xcode Project Name\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '10.0'\nuse_frameworks!\n\ntarget 'iOS Tutorial App' do\n\n    use_frameworks!\n\n    pod 'ZestySwiftContentEndpointWrapper', '~> 0.2.0'\n        pod 'SwiftyJSON', '~> 4.0'\n\n  target 'iOS Tutorial AppTests' do\n      inherit! :search_paths\n      # Pods for testing\n  end\n\n  target 'iOS Tutorial AppUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n```\n\nSave it, then close Xcode and open up the Terminal.\n\nWe'll now install the pods that we just specified in the `Podfile`\n\nFirst, to install cocoapods, open up your terminal (Can be found in Launchpad or Spotlight) and enter in the following commands:\n\nFor macOS 10.11 and above (El Capitan+)\n\n```\nsudo gem install -n /usr/local/bin cocoapods --verbose\npod setup --verbose\n```\n\nFor macOS 10.10 and below\n\n```\nsudo gem install cocoapods --verbose\npod setup --verbose\n```\n\nSidenote: the `--verbose` flag is included so you can see the progress of each command, as these commands usually take a while to run.\n\nNow, after Cocoapods has been installed, we'll navigate to your project's directory.\n\n**Note**: If you're unfamiliar with terminal commands, simply open up a terminal window , type in `cd`, then hit space. Then drag the folder from Finder to the terminal and hit enter.\n\nOnce you've navigated to the directory, run `pod install` and sit back and watch all the libraries install. While they install, here's a quick overview what's being installed\n\n* ZestySwiftContentEndpointWrapper : This Cocoapod allows easy retrieval of your Zesty data / endpoints without any hassle\n\n![Running Pod Install](<../../../../.gitbook/assets/podinstall (1).png>)\n\nAfter running `pod install`, you may notice that an `.xcworkspace` file was created. This is now going to be the file that you open up when you want to work on your app. This is how Cocoapods integrates the libraries into your project.\n\nOpen up your xcode workspace (just double click on the `.xcworkspace` file in finder), and Build your project (⌘B). This will complete the setup of your Cocoapods. You may get an error about Code Signing. This is easily fixed, you simply need to add a team in your project settings.\n\n**Important**: You must use the `.xcworkspace` file to make use of the Zesty Library!\n\n### Pulling Data from Zesty.io\n\nNow that everything has been setup, we can pull our data from Zesty!\n\nWe'll start by creating the UI For our Project. Open up `Main.storyboard` from the side menu, and drag a `UITableView` object from the objects inspector into the view controller. (For Xcode 10, the inspector is located on the top)\n\n![Adding the table view](../../../../.gitbook/assets/addingtableview.png)\n\nAfter adding it, click on the table view, then the Constraints Inspector on the bottom, and set the following Constraints (0 on all edges)\n\n![Constraints](<../../../../.gitbook/assets/constraints (1).png>)\n\nAfter this, hold the `control key` and drag from the table view to the view controller symbol (2 times). Select Data Source and Delegate.\n\n![Linking the table view](../../../../.gitbook/assets/linkingTableView.gif)\n\nNext, we'll need to link the tableview to our view controller. Click the Two Circles Icon on the top right,\n\n![Two Circles Icon](<../../../../.gitbook/assets/twocircles (1) (1) (1) (1).png>)\n\nand control drag the tableview to create a new outlet. Call it `tableView`.\n\n![Creating an outlet](../../../../.gitbook/assets/creatingOutlet.gif)\n\nAfter all of this, we can close the second window (there should be an X), and open up `ViewController.swift`\n\nChange the contents of `ViewController.swift` to look like the below code:\n\n```\nimport UIKit\nimport ZestySwiftContentEndpointWrapper\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n\n    @IBOutlet weak var tableView: UITableView!\n    var zesty: ZestySwiftContentEndpointWrapper!\n    var items: [[String: String]] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n\n        self.zesty = ZestySwiftContentEndpointWrapper(url: \"REPLACE WITH ZESTY PREVIEW DOMAIN\")\n        self.getData()\n    }\n\n     /// Call this function whenever you want to look for new data\n    func getData() {\n        self.zesty.getArray(for: \"REPLACE WITH ARRAY ZUID\") { (array, error) in\n            if error == nil {\n                self.items = array\n                self.tableView.reloadData()\n            }\n        }\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return self.items.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let item = self.items[indexPath.row]\n        let cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"SubtitleCell\")\n\n        cell.textLabel?.text = item[\"name\"]\n        cell.detailTextLabel?.text = item[\"description\"]\n\n        return cell\n    }\n\n\n}\n```\n\nA few things to note:\n\n* When we create the ZestySwiftContentEndpointWrapper, we need to specify a domain. For development purposes, we recommend using the Zesty-Provided Preview Domain.\n* In our `getData()` function, we need to specify the array zuid of the dataset we created, `Coupons`.\n  * We can figure this out by going back to our `Content` or `Config` page, and looking at the url when we've selected coupons\n\n![Where the zuid is](../../../../.gitbook/assets/zuidloc.png)\n\n![Other location of the zuid](<../../../../.gitbook/assets/otherloc (1).png>)\n\nAfter filling in those details, run your project on the iOS Simulator (⌘R), and see the magic happen!\n\n## The Final Product\n\n![Final Product](../../../../.gitbook/assets/finalproduct.png)\n\n### Next Steps\n\nNow that you know how to use the BasicJSONAPI with iOS / Swift, you can do incredible things!\n\nI recommend checking out the example ZestyBurger iOS App for a more complex example, which uses the `getCustomJSONData` functions that the library provides.\n","category":"guides","service":"tools"},{"name":"React Ruby Build Guide","url":"/tools/guides/code-examples/ruby-build-guide","objectId":"-LLITDMfmkIWjxZs-_ap","item":[],"content":"---\ndescription: >-\n  This Ruby on Rails app uses React to pull data from Zesty.io endpoints,\n  showing the simplicity of using the platform. The example consumes the\n  Homepage and Menu endpoints from Zesty.io.\n---\n\n# React Ruby Build Guide\n\nGithub: [https://github.com/zesty-io/zesty-remote-react-ruby-example](https://github.com/zesty-io/Zesty-Remote-React-Ruby-Example#zesty-react-ruby-example)\n\n## Getting Started with the Example App\n\nLet's start by cloning [the example app](https://github.com/zesty-io/Zesty-Remote-React-Ruby-Example)\n\n```bash\ncd path/to/your/projects/folder\ngit clone https://github.com/zesty-io/Zesty-Remote-React-Ruby-Example\ncd Zesty-Remote-React-Ruby-Example\n```\n\nNow, let's install and run the app (Make sure you have Ruby version 2.4.4 or higher. To manage your versions and to keep your system Ruby separate, we recommend using [`rvm`](https://rvm.io)`)`\n\n```bash\nbundle install\nrails g react:install\nrails s\n```\n\n### Understanding the Example Project\n\nIn this project, we are using two custom endpoints, [`/-/basic-api/homepage.json`](https://6c706l48-dev.preview.zestyio.com/-/basic-api/homepage.json) and [`/-/custom/menulist.json`](https://6c706l48-dev.preview.zestyio.com/-/custom/menulist.json). To retrieve this data, we've put a React component inside our Ruby app. This streamlines the process significantly, since now we can simply use the same code as that from our[ Remote React App Guide](https://github.com/zesty-io/zesty-org/tree/afa5f7fa7e3c4a65230b1295ae266512caa516ca/headless/react/remote-guide.md).\n\nIn our React code, we perform a `GET` request to these endpoints. This can be seen in [`app/assets/javascripts/components/_home.js.jsx`](https://github.com/zesty-io/Zesty-Remote-React-Ruby-Example/blob/master/app/assets/javascripts/components/\\_home.js.jsx) and [`app/assets/javascripts/components/_menu.js.jsx`](https://github.com/zesty-io/Zesty-Remote-React-Ruby-Example/blob/master/app/assets/javascripts/components/\\_menu.js.jsx).\n\n{% code title=\"Home.js\" %}\n```jsx\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      homeData: {}\n    };\n  }\n  componentDidMount() {\n    fetch(\"http://burger.zesty.site/-/basic-api/homepage.json\")\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ homeData: data });\n      });\n  }\n  render() { // greatly simplified for explanation, see the full file on Github\n    return (\n      <div data-spy=\"scroll\" data-target=\"#site-navbar\" data-offset=\"200\">\n        <h1 className=\"site-heading no- mb-3\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_title}\n        </h1>\n        <h2 className=\"h5 site-subheading mb-5 no-\">\n          {this.state.homeData.data &&\n            this.state.homeData.data.splash_description}\n        </h2>\n      </div>\n    );\n  }\n}\n```\n{% endcode %}\n\nUsing `componentDidMount`, we're able to fetch our JSON and render it accordingly. After we load it in, it's just a matter of parsing a JS Object.\n","category":"guides","service":"tools"},{"name":"Jekyll Static Site","url":"/tools/guides/code-examples/guide","objectId":"-LKbswANp9W0i7_NtW3Z","item":[],"content":"---\ndescription: >-\n  This example builds a version of the ZestyBurger Site by feeding Zesty.io\n  content into a statically-generated Jekyll Site.Github:\n  https://github.com/zesty-io/zesty-jekyll/​\n---\n\n# Jekyll Static Site\n\n## Getting Started\n\nFirst, we'll need to install [Jekyll](https://jekyllrb.com).\n\n### Installing Jekyll\n\n```\ngem install bundler jekyll\n```\n\n[See the Jekyll Website For More Help](https://jekyllrb.com/docs/installation/)\n\nNext, let's clone the example project\n\n```\ngit clone https://github.com/zesty-io/jekyll-zesty/\ncd jekyll-zesty\n```\n\nNow, we simply need to install and run the project!\n\n```\nnpm install\n```\n\n{% hint style=\"info\" %}\nNote how `npm install` runs `pullzesty`\n{% endhint %}\n\nThe example project's `package.json` also comes pre-equipped with some handy utility commands.\n\n* `npm start` # rebuilds data from zesty.io and runs a jekyll server\n* `npm run-script build-jekyll` # rebuilds data from zesty.io and runs jekyll to build a folder in `docs/`\n* `npm run-script all` # rebuilds data from zesty.io, runs jekyll to build a folder in `docs/`, and runs a jekyll server\n\n## Understanding the Example Project\n\nJekyll provides support for front-matter, which `PullZesty` takes advantage of to create the files. The real magic in this project lies in the `zesty.yaml` file, which specifies the proper paths for all of our content. This content is merely consumed by some layouts. When creating your own Jekyll project, feel free to look at our [`zesty.yaml`](https://github.com/zesty-io/jekyll-zesty/blob/master/zesty.yaml) file and our [layout files](https://github.com/zesty-io/jekyll-zesty/blob/master/\\_layouts/).\n\n{% code title=\"_layouts/home.html\" %}\n```markup\n--- layout: default ---\n<div dat\na-spy=\"scroll\" data-target=\"#site-navbar\" data-offset=\"200\">\n    <section class=\"site-cover\" style=\"background-image: url({{page.splash_background}});\" id=\"section-home\">\n        <div class=\"container\">\n            <div class=\"row align-items-center justify-content-center text-center site-vh-100\">\n                <div class=\"col-md-12\">\n                    <h1 class=\"site-heading no-site-animate mb-3\">{{page.splash_title}}</h1>\n                    <h2 class=\"h5 site-subheading mb-5 no-site-animate\">{{page.splash_description}}</h2>\n                    <p><a href=\"{{page.splash_link}}\" target=\"_blank\" class=\"btn btn-outline-white btn-lg no-site-animate\" data-toggle=\"modal\" data-target=\"#reservationModal\">{{page.splash_link_text}}</a></p>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n```\n{% endcode %}\n\nAs you can see in our [`home.html`](https://github.com/zesty-io/jekyll-zesty/blob/master/\\_layouts/home.html) file, we simply load in the front-matter from the [`index.md`](https://github.com/zesty-io/jekyll-zesty/blob/master/index.md) file.\n","category":"guides","service":"tools"},{"name":"Hugo Static Site","url":"/tools/guides/code-examples/guide-1","objectId":"-LKbswALMzw51MGM_11R","item":[],"content":"---\ndescription: >-\n  This example builds a version of the ZestyBurger Site by feeding Zesty.io\n  content into a statically-generated Hugo Site.Github:\n  https://github.com/zesty-io/zesty-hugo\n---\n\n# Hugo Static Site\n\n## Getting Started\n\nFirst, we'll need to install [Hugo](https://gohugo.io).\n\n**macOS**\n\n```\nbrew install hugo\n```\n\n(If you aren't using brew, [get it here](https://brew.sh/))\n\n**debian / ubuntu**\n\n```\nsudo apt-get install hugo\n```\n\n**other platforms**\n\n[See the Hugo Website](https://gohugo.io/getting-started/installing)\n\nNext, let's clone the example project\n\n```\ngit clone https://github.com/ronakdev/hugo-project/\ncd hugo-project\n```\n\nNow, we simply need to install and run the project!\n\n```\nnpm install\nnpm start\n```\n\n{% hint style=\"info\" %}\nNote how `npm install` runs `pullzesty`\n{% endhint %}\n\nThe example project's `package.json` also comes pre-equipped with some handy utility commands.\n\n* `npm start` # rebuilds data from zesty.io and runs a hugo server\n* `npm run-script build-hugo` # rebuilds data from zesty.io and runs hugo to build a folder in `docs/`\n* `npm run-script all` # rebuilds data from zesty.io, runs hugo to build a folder in `docs/`, and runs a hugo server\n\n## Understanding the Example Project\n\nHugo provides support for front-matter, which `PullZesty` takes advantage of to create the files. The real magic in this project lies in the `zesty.yaml` file, which specifies the proper paths for all of our content. This content is merely consumed by some layouts. When creating your own Hugo project, feel free to look at our [`zesty.yaml`](https://github.com/zesty-io/hugo-project/blob/master/zesty.yaml) file and our [layout files](https://github.com/zesty-io/hugo-project/tree/master/layouts).\n\n{% code title=\"layouts/_default/index.html\" %}\n```markup\n{{ define \"content\" }}\n<div data-spy=\"scroll\" data-target=\"#site-navbar\" data-offset=\"200\">\n    <section class=\"site-cover\" style=\"background-image: url({{ with .Params.splash_background }}{{ . | safeHTML }}{{ end }});\" id=\"section-home\">\n        <div class=\"container\">\n            <div class=\"row align-items-center justify-content-center text-center site-vh-100\">\n                <div class=\"col-md-12\">\n                    <h1 class=\"site-heading no-site-animate mb-3\">{{ with .Params.splash_title }}{{ . | safeHTML }}{{ end }}</h1>\n                    <h2 class=\"h5 site-subheading mb-5 no-site-animate\">{{ with .Params.splash_description }}{{ . | safeHTML }}{{ end }}</h2>\n                    <p><a href=\"{{ with .Params.splash_link }}{{ . | safeHTML }}{{ end }}\" target=\"_blank\" class=\"btn btn-outline-white btn-lg no-site-animate\" data-toggle=\"modal\" data-target=\"#reservationModal\">{{ with .Params.splash_link_text }}{{ . | safeHTML }}{{ end }}</a></p>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n{{ end }}\n```\n{% endcode %}\n\nAs you can see in our [`index.html`](https://github.com/zesty-io/hugo-project/blob/master/layouts/\\_default/index.html) file, we simply load in the front-matter from the [`content/_index.md`](https://github.com/zesty-io/hugo-project/blob/master/content/\\_index.md) file.\n\n\\=======\n\n> > > > > > > bbc9f7e6a46f9544d3d382a9f7faff77ae61b083\n","category":"guides","service":"tools"}],"content":"# React\n\n## Remote Example\n\nThis React app pulls data from Zesty.io endpoints to show the simplicity of using the platform. The example consumes the Homepage and Menu endpoints from Zesty.io for a simple example.\n\n{% content-ref url=\"guide-remote-react-app.md\" %}\n[guide-remote-react-app.md](guide-remote-react-app.md)\n{% endcontent-ref %}\n\n## Local Example\n\nIdentical to the remote example in almost every way, the local example pulls the data from Zesty.io before each build and stores it locally. It takes advantage of a simple script that pulls the data from Zesty.io\n\n{% content-ref url=\"guide-local-react-app.md\" %}\n[guide-local-react-app.md](guide-local-react-app.md)\n{% endcontent-ref %}\n","category":"guides","service":"tools"},{"name":"Salesforce Commerce Cloud","url":"/tools/guides/salesforce-commerce-cloud","objectId":"-LMIvwnSnOXlumI0TV3_","item":[],"content":"---\ndescription: >-\n  This article uses a standardized XML output to generate a Custom content\n  experience served with Commerce Cloud loaded from Zesty.io.\n---\n\n# Salesforce Commerce Cloud\n\n### Building out the Content Experience\n\nThe first step is to build out the HTML, Javascript and CSS for the content experience you want to serve from your Commerce Cloud website. You can do this in any environment, including locally or within your Zesty.io instance.&#x20;\n\nOnce built, configure the experience in Zesty.io for content editing by building out content models and fields to replace the dynamic pieces with [Parsley](../../webengine/guides/web-engine/view-templating.md#zesty-ios-templating-language-parsley) references.&#x20;\n\n### Starting the XML <a href=\"#starting-the-xml\" id=\"starting-the-xml\"></a>\n\nThe next step is to set up a custom XML endpoint within your Zesty.io instance. Within that paste in this XML code:\n\n```markup\n<library xmlns=\"http://www.demandware.com/xml/impex/library/2006-10-31\" library-id=\"SiteGenesisSharedLibrary\">\n    <folder folder-id=\"root\">\n        <online-flag>true</online-flag>\n        <page-attributes>\n            <page-title xml:lang=\"x-default\">\n               [site name]\n            </page-title>\n            <page-description xml:lang=\"x-default\">\n                [page-description]\n            </page-description>\n        </page-attributes>\n        <refinement-definitions>\n            <refinement-definition type=\"folder\" bucket-type=\"none\">\n                <display-name xml:lang=\"x-default\">Folder</display-name>\n                <sort-mode>folder-position</sort-mode>\n                <cutoff-threshold>5</cutoff-threshold>\n            </refinement-definition>\n        </refinement-definitions>\n    </folder>\n    <folder folder-id=\"[folder id]\">\n        <display-name xml:lang=\"x-default\">[display-name]</display-name>\n        <description xml:lang=\"x-default\"/>\n        <online-flag>[boolean]</online-flag>\n\t\t<template>[template]</template>\n\t\t<parent>[parent folder id]</parent>\n\t\t<position>[position]</position>\n        <page-attributes/>\n    </folder>\n    <content content-id=\"[content id]\">\n        <display-name xml:lang=\"x-default\">[display-name]</display-name>\n        <description xml:lang=\"x-default\"/>\n        <online-flag>true</online-flag>\n        <searchable-flag>[boolean]</searchable-flag>\n        <template>\n            [template]        \n        </template>\n        <page-attributes>\n            <page-title xml:lang=\"x-default\">[page-title]</page-title>\n            <page-description xml:lang=\"x-default\"/>\n        </page-attributes>\n        <custom-attributes>\n            <custom-attribute attribute-id=\"body\" xml:lang=\"x-default\"> \n                [custom html template]\n            </custom-attribute>\n        </custom-attributes>\n        <folder-links>\n            <classification-link folder-id=\"[folder id]\"/>\n        </folder-links>\n    </content>\n </library>\n```\n\n&#x20;Content marked with single brackets, `[]`, will be replaced with Parsley references.\n\n### Building out the content models. <a href=\"#building-out-the-content-models\" id=\"building-out-the-content-models\"></a>\n\nTo update this XML with dynamic content calls we need to build out the Content Models and fields to replace the variable content pieces in the XML.\n\n#### Folders <a href=\"#folders\" id=\"folders\"></a>\n\nFirst we need a top-level page group for the `Folders`. This content model needs six fields and it needs one entry for `Root`, which will act as a top-level indicator.\n\n| Field Name   | Field Type                                                                  |\n| ------------ | --------------------------------------------------------------------------- |\n| Display Name | Text                                                                        |\n| Description  | Textarea                                                                    |\n| Online Flag  | Yes/No                                                                      |\n| Template     | Text                                                                        |\n| Parent       | <p>One to Many <br><em>(Relate to: Folders, Display: Display Name)</em></p> |\n| Position     | Text                                                                        |\n\n#### Content Pages\n\nNext we need to modify all the page type content models created in the first step for generating the content experience. These content models requires 5 fields for the Meta info and any additional fields specific to the html template being created. The 5 required fields are:\n\n| Field Name            | Field Type                                                                  |\n| --------------------- | --------------------------------------------------------------------------- |\n| Display Name          | Text                                                                        |\n| Description           | Textarea                                                                    |\n| Online Flag           | Yes/No                                                                      |\n| Searchable Flag       | Yes/No                                                                      |\n| Folder Classification | <p>One to Many <br><em>(Relate to: Folders, Display: Display Name)</em></p> |\n\n### Updating the XML with Parsley\n\nThe next step is putting it all together in Zesty.io. We need to modify the XML to dynamically generate based on the entries available in the Content Models. The new XML Should look something like this.&#x20;\n\n```markup\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<library xmlns=\"http://www.demandware.com/xml/impex/library/2006-10-31\" library-id=\"SiteGenesisSharedLibrary\">\n\t{{ each folders as folder  }}\n\t{{ if {folder.path_part} == root }}\n\t<folder folder-id=\"root\">\n\t\t<online-flag>true</online-flag>\n\t\t<page-attributes>\n\t\t\t<page-title xml:lang=\"x-default\">{{ folder.display_name }}</page-title>\n\t\t\t<page-description xml:lang=\"x-default\">{{ folder.description }}</page-description>\n\t\t</page-attributes>\n\t\t<refinement-definitions>\n\t\t\t<refinement-definition type=\"folder\" bucket-type=\"none\">\n\t\t\t\t<sort-mode>folder-position</sort-mode>\n\t\t\t\t<cutoff-threshold>5</cutoff-threshold>\n\t\t\t</refinement-definition>\n\t\t</refinement-definitions>\n\t</folder>\n\t{{ else }}\n\t<folder folder-id=\"{{ folder.path_part }}\">\n\t\t<display-name xml:lang=\"x-default\">{{ folder.display_name }}</display-name>\n\t\t<description xml:lang=\"x-default\">{{ folder.description }}</description>\n\t\t<online-flag>{{ if {ofolderne.online_flag} == 1 }}true{{else}}false{{ end-if }}</online-flag>\n\t\t{{ if {folder.template} }}\n\t\t<template>{{ folder.template }}</template>\n\t\t{{ end-if }}\n\t\t{{ if {folder.parent} }}\n\t\t<parent>{{ folders.filter(z.zuid = '{folder.parent}').path_part }}</parent>\n\t\t{{ end-if }}\n\t\t{{ if {folder.position} }}\n\t\t<position>{{ folder.position }}</position>\n\t\t{{ end-if }}\n\t\t<page-attributes/>\n\t</folder>\n\t{{ end-if }}\n\t{{ end-each }}\t\n\t{{ each standard_pages as one }}\n\t<content content-id=\"{{ one.path_part }}\">\n\t\t<display-name xml:lang=\"x-default\">{{ one.display_name }}</display-name>\n\t\t{{ if {one.description} }}\n\t\t<description xml:lang=\"x-default\">{{ one.description }}</description>\n\t\t{{ end-if }}\n\t\t<online-flag>{{ if {one.online_flag} == 1 }}true{{else}}false{{ end-if }}</online-flag>\n\t\t<searchable-flag>{{ if {one.searchable_flag} == 1 }}true{{else}}false{{ end-if }}</searchable-flag>\n\t\t<page-attributes/>\n\t\t<custom-attributes>\n\t\t\t<custom-attribute attribute-id=\"body\" xml:lang=\"x-default\"><![CDATA[{{ include standard_pages }}]]></custom-attribute>\n\t\t</custom-attributes>\n\t\t{{ if {one.folder_classification} }}\n\t\t<folder-links>\n\t\t\t<classification-link folder-id=\"{{ folders.filter(z.zuid = '{one.folder_classification}').display_name }}\"/>\n\t\t</folder-links>\n\t\t{{ end-if }}\n\t</content>\n\t{{ end-each }}\n</library>\n```\n\nNotice in this example, we are only generating a custom content experience based on one content model, called `Standard Pages`. Within the `custom-attribute` element we include the view file for this content model. The HTML markup for this custom element needs to be written on the `standard_pages` view file in order for it to be included in the XML. You will want to repeat the loop used for `standard_pages` in this example for each Content Model that generates a custom content experience. \\\n\n\n### Importing into Commerce Cloud\n\nThe final step is to prompt your Commerce Cloud account to crawl the Zesty.io XML endpoint from your instance. You will want to copy the endpoint URL and paste it into the content import field in Commerce Cloud and submit. This will prompt any new pages or folders to be created and any changes to existing content to be updated.&#x20;\n","category":"guides","service":"tools"},{"name":"Node SDK","url":"/tools/guides/node-sdk","objectId":"-M4yumwFfjPYPwIQriwl","item":[],"content":"---\ndescription: Zesty.io Software developer kit (SDK) with Node SDK\n---\n\n# Node SDK\n\nThis is a basic example of how to setup an authenticated SDK instance and request data.\n\n\\*Requires [Nodejs](https://nodejs.org/) installed on your system.\n\n1\\) Use a package manager to install the SDK. e.g. `npm install @zesty-io/sdk`\n\n2\\) Create an example file\n\n```javascript\n// example/basic/index.js\n\nconst SDK = require(\"@zesty-io/sdk\");\n\n// !!! Do not commit your password to a repository. This needs to stay secret.\n// We only have you enter it here for simplicity of the example.\n// Add your user email, password and instance ZUID\nconst ZESTY_USER_EMAIL = \"\";\nconst ZESTY_USER_PASSWORD = \"\";\nconst ZESTY_INSTANCE_ZUID = \"\";\n\nasync function main() {\n  // Get authenticated session\n  const auth = new SDK.Auth();\n  const session = await auth.login(ZESTY_USER_EMAIL, ZESTY_USER_PASSWORD);\n\n  // Instantiate sdk instance with instance ZUID and authenticated session token\n  const sdk = new SDK(ZESTY_INSTANCE_ZUID, session.token);\n\n  // Request instance data\n  const res = await sdk.instance.getModels();\n\n  // View our response data in the console\n  console.log(res.data);\n}\n\n// Run the function\nmain();\n```\n\n3\\) Run the example with `node index.js`\n\n{% content-ref url=\"instantiation.md\" %}\n[instantiation.md](instantiation.md)\n{% endcontent-ref %}\n\n## Further explanations of the example code\n\n1. [Instantiation of an authenticated instance](instantiation.md)\n2. [Requesting instance data](instantiation.md)\n","category":"guides","service":"tools"},{"name":"node-sdk","url":"/tools/guides/node-sdk","item":[{"name":"Instantiation","url":"/tools/guides/node-sdk/instantiation","objectId":"-M4yxJe4sDfZ-HQoJvVd","item":[],"content":"# Instantiation\n\nThe first step in using the SDK is setting up an authenticated instance.\n\nWe use an `async` function since we need to `await` the asynchronus authentication service response. Internally the `login` function will cache the returned the authentication token and use it for subsequent requests. As well as it will handle re-issuing a token when the one in use expires.\n\n_All API requests must be authenticated_\n\n## User Level Authentication\n\nThe SDK has user level authentication meaning the actions allowed against the instance will depend on the role and privileges of the user account you authenticate with.\n\nFor example; If the user account you instantiate the SDK with has a role of contributor you will be able to create and update content items but **will not** be able to delete or publish content items.\n\n**When using the SDK we recommend these 2 things for authenticating.**\n\n1. An account created specifically for using with the SDK&#x20;\n2. The role of `developer` for the SDK user\n\n### [async/await syntax](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async\\_await)\n\n```javascript\nasync function authedSDK() {\n  try {\n    const auth = new SDK.Auth();\n    const session = await auth.login(\n      process.env.ZESTY_USER_EMAIL,\n      process.env.ZESTY_USER_PASSWORD\n    );\n\n    return new SDK(process.env.ZESTY_INSTANCE_ZUID, session.token);\n  } catch (err) {\n    console.error(err)\n    // Handle errors. e.g. send to logging service\n    // re throw error\n    throw err\n  }\n}\nconst instance = await authedSDK()\n```\n\n### [Promise syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using\\_promises)\n\n```javascript\nconst auth = new SDK.Auth();\nconst sdk = auth.login(\n  process.env.ZESTY_USER_EMAIL,\n  process.env.ZESTY_USER_PASSWORD\n).then(session => {\n  return new SDK(process.env.ZESTY_INSTANCE_ZUID, session.token);\n}).catch(err => {\n  console.error(err)\n  // Handle errors. e.g. send to logging service\n  // re throw error\n  throw err\n})\n```\n","category":"guides","service":"tools"},{"name":"Instance","url":"/tools/guides/node-sdk/instance","objectId":"-M4yxJe5CHN_G9ar2Xyh","item":[],"content":"# Instance\n\nThis is the largest API and most likely the one you will need to interact with the most. It allows for CRUD (Create, Read, Update, Delete) operations on all the content and resources within your instance.\n\nA few examples of it's usage are to programmatically insert content into an instance, integrate into a CI/CD release pipeline, pull data into external sources (e.g. apps, video games, t.v., etc). With this API it comes down to your needs and imagination.\n\nOnce you have an [authenticated SDK instance](../instantiation.md) you can begin requesting and/or writing data from your instance. All of the provided functionality uses the underlying [Zesty.io REST `instance-api`](https://instances-api.zesty.org/).\n\nIf needed these REST endpoints can be consumed directly. The `node-sdk` simply provides some basic functionality and a structured codebase all in a tested state.\n\n## Learn more about the available resources within an instance\n\n* [Content](instance-content.md)\n* [Model & Fields](instance-model.md)\n* [Stylesheet](instance-stylesheet.md)\n* [Views](instance-view.md)\n* [Audit Trail](instance-audit-trail.md)\n* [Head Tags](instance-head-tags.md)\n","category":"guides","service":"tools"},{"name":"instance","url":"/tools/guides/node-sdk/instance","item":[{"name":"Content","url":"/tools/guides/node-sdk/instance/instance-content","objectId":"-M4z7QDKfpEFSZo-1rlm","item":[],"content":"# Content\n\nContent items are always accessed relative to their model, so a model ZUID is required for each call. [API documentation](https://instances-api.zesty.org/#74adb209-9eea-0561-e98b-75a2a1b9882b).\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\n**Get all content items for a model:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\"; // Model ZUIDs begin with 6\n  const res = await sdk.instance.getItems(modelZUID);\n  console.log(res);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get a specific content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\"; // Item ZUIDs begin with 7\n  const res = await sdk.instance.getItem(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Create a content item:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const res = await sdk.instance.createItem(modelZUID, {\n    data: {\n      // Values here will depent on content model\n      text_field_one: \"hello\",\n      text_field_two: \"world\"\n    },\n    meta: {\n      createdByUserZUID: \"5-...\", // User ZUIDs begin with 5\n      contentModelZUID: modelZUID\n    },\n    web: {\n      canonicalTagMode: 1,\n      metaDescription: \"This is the description.\",\n      metaKeywords: \"these,are,some,keywords\",\n      metaLinkText: \"This is the meta link text.\",\n      metaTitle: \"This is the meta title.\"\n    }\n  });\n} catch (err) {\n  console.log(err);\n}\n```\n\nThis will return the ZUID of the created item in the response.\n\n**Save a content item:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n\n  const res = await sdk.instance.updateItem(modelZUID, itemZUID, {\n    data: {\n      text_field_one: \"updated\",\n      text_field_two: \"item\"\n    },\n    meta: {\n      masterZUID: itemZUID\n    }\n  });\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get all versions for a specific content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.getItemVersions(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get a specific version of a content item by version ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.getItemVersion(modelZUID, itemZUID, 2);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Delete a content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.deleteItem(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\nExample response:\n\n```javascript\n{ _meta:\n   { timestamp: '2019-02-20T23:25:37.556Z',\n     totalResults: 1,\n     start: 0,\n     offset: 0,\n     limit: 1 },\n  message: 'Item deleted',\n  data: {}\n}\n```\n\n> **Note:** this response format may change in future.\n\n## Item Publishing and Unpublishing\n\n**Publish a version of an item immediately:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const versionNumber = 1;\n  const res = await sdk.instance.publishItem(\n    modelZUID,\n    itemZUID,\n    versionNumber\n  );\n} catch (err) {\n  console.log(err);\n}\n```\n\nThe expected response looks like this:\n\n```javascript\n{\n  _meta: {\n    timestamp: '2019-02-20T23:28:25.487Z',\n    totalResults: 1,\n    start: 0,\n    offset: 0,\n    limit: 1\n  },\n  message: 'Published',\n  data: {\n    item_zuid: '7-...',\n    version_zuid: '9-...',\n    version_num: '1'\n  }\n}\n```\n\n> **Note:** this response format may change in future.\n\n**Unpublish a published item immediately:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const publishingZUID = \"18-...\";\n  const res = await sdk.instance.unpublishItem(\n    modelZUID,\n    itemZUID,\n    publishingZUID\n  );\n} catch (err) {\n  console.log(err);\n}\n```\n\nThe expected response looks like this:\n\n```javascript\n{\n  _meta: {\n    timestamp: '2019-02-20T23:46:14.423Z',\n    totalResults: 1,\n    start: 0,\n    offset: 0,\n    limit: 1\n  },\n  message: 'Entry updated',\n  data: {}\n}\n```\n\n> **Note:** this response format may change in future.\n\n**Get all publishing records for a specific content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.getItemPublishings(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get specific publishing record by publishing ZUID for a content item:**\n\n```javascript\ntry {\n  const modelZUID = \"6-3029e8-x4cbhh\";\n  const itemZUID = \"7-9cd6d2cdf9-spmszq\";\n  const publishingZUID = \"18-7c02d25-rpzw1v\"; // Publishing ZUIDs begin with 18\n  const res = await sdk.instance.getItemPublishing(\n    modelZUID,\n    itemZUID,\n    publishingZUID\n  );\n} catch (err) {\n  console.log(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Model & Fields","url":"/tools/guides/node-sdk/instance/instance-model","objectId":"-M4z7QDLd58LAMCSwYp9","item":[],"content":"# Model & Fields\n\nRetrieval of content models and model fields.\n\nThese functions use these `instances-api` endpoints:\n\n* [Content Models](https://instances-api.zesty.org/#5f8c1a85-1775-f67b-c5e0-a061f69e7ddb)\n* [Fields](https://instances-api.zesty.org/#689c935d-a46c-8eef-cf20-df60f55c38d3)\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\n**Get all content models:**\n\n```javascript\ntry {\n  const res = await sdk.instance.getModels();\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get a content model by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\"; // Model ZUIDs begin with 6\n  const res = await sdk.instance.getModel(modelZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get all fields for a content model:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const res = await sdk.instance.getModelFields(modelZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get a specific field by field ZUID for a content model:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const fieldZUID = \"12-...\"; // Field ZUIDs begin 12\n  const res = await sdk.instance.getModelField(modelZUID, fieldZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Stylesheet","url":"/tools/guides/node-sdk/instance/instance-stylesheet","objectId":"-M4z7QDM2gTUkMaP-zOo","item":[],"content":"# Stylesheet\n\nCRUD on Zesty.io stylesheet files.\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\nGet all stylesheets:\n\n```javascript\ntry {\n  const res = await sdk.instance.getStylesheets();\n} catch (err) {\n  console.error(err);\n}\n```\n\nGet a stylesheet by ZUID:\n\n```javascript\ntry {\n  const stylesheetZUID = \"10-...\"; // Stylesheet ZUIDs begin with 10\n  const res = await sdk.instance.getStylesheet(stylesheetZUID);\n} catch (err) {\n  console.error(err);\n}\n```\n\nCreate a stylesheet:\n\n```javascript\nconst fileName = \"styles.less\";\nconst code = \".myClass { text-align: left; }\";\nconst stylesheetType = \"text/less\"; // Can also use text/css, text/sass or text/scss\nconst payload = {\n  code: code,\n  fileName: fileName,\n  type: stylesheetType\n};\n\ntry {\n  const res = await sdk.instance.createStylesheet(payload);\n} catch (err) {\n  console.error(err);\n}\n```\n\nSave a stylesheet: Change the contents of a stylesheet, while retaining the filename and file type.\n\n```javascript\nconst stylesheetZUID = \"10-...\";\nconst code = \".anotherClass { text-align: center; }\";\n\nconst payload = {\n  code: code\n};\n\ntry {\n  const res = await sdk.instance.saveStylesheet(stylesheetZUID, payload);\n} catch (err) {\n  console.error(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Views","url":"/tools/guides/node-sdk/instance/instance-view","objectId":"-M4z7QDNHWY-ty_TcKzw","item":[],"content":"# Views\n\nCRUD on view files.\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\nGet all views: (returns an array of view objects)\n\n```javascript\ntry {\n  const res = await sdk.instance.getViews();\n} catch (err) {\n  console.error(err);\n}\n```\n\nGet a view by ZUID:\n\n```javascript\ntry {\n  const viewZUID = \"11=...\"; // View ZUIDS begin with 11\n  const res = await sdk.instance.getView(viewZUID);\n} catch (err) {\n  console.error(err);\n}\n```\n\nCreate a view (snippet):\n\n```javascript\nconst type = \"snippet\";\nconst fileName = \"navigation\";\nconst code = \"my view content\";\nconst payload = {\n  type: type,\n  fileName: fileName,\n  code: code\n};\n\ntry {\n  const res = await sdk.instance.createView(payload);\n} catch (err) {\n  console.error(err);\n}\n```\n\nCreate a view (endpoint):\n\n```javascript\nconst type = \"ajax-json\";\nconst fileName = \"/special-endpoint.json\";\nconst code = JSON.stringify({ foo: \"bar\" });\nconst payload = {\n  type: type,\n  fileName: fileName,\n  code: code\n};\n\ntry {\n  const res = await sdk.instance.createView(payload);\n} catch (err) {\n  console.error(err);\n}\n```\n\nUpdate a view: This will only updated view and **will not** publish it.\n\n```javascript\nconst viewZUID = \"11-...\";\nconst code = \"my view content\";\nconst payload = {\n  code: code\n};\n\ntry {\n  const res = await sdk.instance.updateView(viewZUID, payload);\n} catch (err) {\n  console.error(err);\n}\n```\n\nPublish a view:\n\n```javascript\nconst viewZUID = \"11-...\";\nconst version = 1\n\ntry {\n  const res = await sdk.instance.publishView(viewZUID, version);\n} catch (err) {\n  console.error(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Audit Trail","url":"/tools/guides/node-sdk/instance/instance-audit-trail","objectId":"-M4z7QDOqjDokt8_VbJb","item":[],"content":"# Audit Trail\n\nAn instances AuditTrail is a collection of records that catalogs the actions taken within an instance. e.g. Creating, Publishing, Deleting a content item. This provides insight into how or why a peice of content is in a specific state.\n\nAuditTrail entries can only be retrived. Creation is reserved for internal Zesty.io usage, which is done at the individual API endpoint. **Deletion and updating do not exist, as this acts as an immutable record of the actions taken in an instance.**\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\nGet all audit trail entries:\n\n```javascript\ntry {\n  const res = await sdk.instance.getAuditLogs();\n} catch (err) {\n  console.error(err);\n}\n```\n\nGet a specific audit trail entry by ZUID:\n\n```javascript\nconst auditZUID = \"15-...\"; // Audit trail entry ZUIDs begin with 15\n\ntry {\n  const res = await sdk.instance.getAuditLog(auditZUID);\n} catch (err) {\n  console.error(err);\n}\n```\n\nGet audit trail entries having specific properties: [Further filtering documentation and examples](https://instances-api.zesty.org/?version=latest#fc78edce-069d-4948-8209-733a3c02e8dc)\n\n```javascript\nconst filterProps = {\n  // Object keys can be:\n  // order\n  // dir\n  // start_date\n  // end_date\n  // limit\n  // page\n  // action\n  // affectedZUID\n  // userZUID\n  // See documentation for examples.\n};\n\ntry {\n  res = await sdk.instance.searchAuditLogs({\n    limit: 5,\n    order: \"created\",\n    dir: \"desc\"\n  });\n} catch (err) {\n  console.error(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Head Tags","url":"/tools/guides/node-sdk/instance/instance-head-tags","objectId":"-M4z7QDP9Fz24Dqfj6-W","item":[],"content":"# Head Tags\n\nHTML documents contain a `<head>` tag which allows for child `<meta>`, `<link>`, `<stylesheet>` and `<script>` tags. The HeadTags SDK allows for CRUD operations to manage the available tags on a per content item basis.\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\nGet all head tags:\n\n```javascript\ntry {\n  const res = await sdk.instance.getHeadTags();\n} catch (err) {\n  console.error(err);\n}\n```\n\nGet a single head tag by ZUID: :\n\n```javascript\nconst headTagZUID = `21-...`; // Head Tag ZUIDs begin with 21\n\ntry {\n  const res = await sdk.instance.getHeadTag(headTagZUID);\n} catch (err) {\n  console.error(err);\n}\n```\n","category":"guides","service":"tools"}],"content":"# Content\n\nContent items are always accessed relative to their model, so a model ZUID is required for each call. [API documentation](https://instances-api.zesty.org/#74adb209-9eea-0561-e98b-75a2a1b9882b).\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\n**Get all content items for a model:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\"; // Model ZUIDs begin with 6\n  const res = await sdk.instance.getItems(modelZUID);\n  console.log(res);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get a specific content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\"; // Item ZUIDs begin with 7\n  const res = await sdk.instance.getItem(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Create a content item:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const res = await sdk.instance.createItem(modelZUID, {\n    data: {\n      // Values here will depent on content model\n      text_field_one: \"hello\",\n      text_field_two: \"world\"\n    },\n    meta: {\n      createdByUserZUID: \"5-...\", // User ZUIDs begin with 5\n      contentModelZUID: modelZUID\n    },\n    web: {\n      canonicalTagMode: 1,\n      metaDescription: \"This is the description.\",\n      metaKeywords: \"these,are,some,keywords\",\n      metaLinkText: \"This is the meta link text.\",\n      metaTitle: \"This is the meta title.\"\n    }\n  });\n} catch (err) {\n  console.log(err);\n}\n```\n\nThis will return the ZUID of the created item in the response.\n\n**Save a content item:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n\n  const res = await sdk.instance.updateItem(modelZUID, itemZUID, {\n    data: {\n      text_field_one: \"updated\",\n      text_field_two: \"item\"\n    },\n    meta: {\n      masterZUID: itemZUID\n    }\n  });\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get all versions for a specific content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.getItemVersions(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get a specific version of a content item by version ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.getItemVersion(modelZUID, itemZUID, 2);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Delete a content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.deleteItem(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\nExample response:\n\n```javascript\n{ _meta:\n   { timestamp: '2019-02-20T23:25:37.556Z',\n     totalResults: 1,\n     start: 0,\n     offset: 0,\n     limit: 1 },\n  message: 'Item deleted',\n  data: {}\n}\n```\n\n> **Note:** this response format may change in future.\n\n## Item Publishing and Unpublishing\n\n**Publish a version of an item immediately:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const versionNumber = 1;\n  const res = await sdk.instance.publishItem(\n    modelZUID,\n    itemZUID,\n    versionNumber\n  );\n} catch (err) {\n  console.log(err);\n}\n```\n\nThe expected response looks like this:\n\n```javascript\n{\n  _meta: {\n    timestamp: '2019-02-20T23:28:25.487Z',\n    totalResults: 1,\n    start: 0,\n    offset: 0,\n    limit: 1\n  },\n  message: 'Published',\n  data: {\n    item_zuid: '7-...',\n    version_zuid: '9-...',\n    version_num: '1'\n  }\n}\n```\n\n> **Note:** this response format may change in future.\n\n**Unpublish a published item immediately:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const publishingZUID = \"18-...\";\n  const res = await sdk.instance.unpublishItem(\n    modelZUID,\n    itemZUID,\n    publishingZUID\n  );\n} catch (err) {\n  console.log(err);\n}\n```\n\nThe expected response looks like this:\n\n```javascript\n{\n  _meta: {\n    timestamp: '2019-02-20T23:46:14.423Z',\n    totalResults: 1,\n    start: 0,\n    offset: 0,\n    limit: 1\n  },\n  message: 'Entry updated',\n  data: {}\n}\n```\n\n> **Note:** this response format may change in future.\n\n**Get all publishing records for a specific content item by ZUID:**\n\n```javascript\ntry {\n  const modelZUID = \"6-...\";\n  const itemZUID = \"7-...\";\n  const res = await sdk.instance.getItemPublishings(modelZUID, itemZUID);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get specific publishing record by publishing ZUID for a content item:**\n\n```javascript\ntry {\n  const modelZUID = \"6-3029e8-x4cbhh\";\n  const itemZUID = \"7-9cd6d2cdf9-spmszq\";\n  const publishingZUID = \"18-7c02d25-rpzw1v\"; // Publishing ZUIDs begin with 18\n  const res = await sdk.instance.getItemPublishing(\n    modelZUID,\n    itemZUID,\n    publishingZUID\n  );\n} catch (err) {\n  console.log(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Media","url":"/tools/guides/node-sdk/media","objectId":"-M4yxJe67qG6sP1MIGRJ","item":[],"content":"# Media\n\nThe media API is your entrance way into the global cached asset delivery infrastructure that is automaticaly provisioned for every instance created in Zesty.io\n\nUsing the `media-api` you can make CRUD operations against the media assets within your instance.\n\n## Learn more about the available media functions\n\n* [Files](media-file.md)\n* [Groups](media-group.md)\n","category":"guides","service":"tools"},{"name":"media","url":"/tools/guides/node-sdk/media","item":[{"name":"Files","url":"/tools/guides/node-sdk/media/media-file","objectId":"-M4z7QDRICWgNm1x0i5u","item":[],"content":"# Files\n\nMedia is how you can manage assets for an instance. Using media you can upload any type of file to get a globally cached URL for that asset.\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\n**Create a file:**\n\n```javascript\ntry {\n  // Use your instances bin ZUID\n  const binZUID = \"1-...\";\n\n  // Get a read stream to the file you want to upload to your instance\n  const stream = fs.createReadStream(\n    path.resolve(__dirname, \"path/to/file/image.jpg\")\n  );\n\n  const opts = {\n    title: \"File title used for alt and/or title attribute text\",\n    fileName: \"image.jpg\",\n  };\n\n  const file = await sdk.media.createFile(binZUID, stream, opts);\n\n  console.log(file);\n} catch (err) {\n  console.log(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Groups","url":"/tools/guides/node-sdk/media/media-group","objectId":"-M4z7QDSusis76Mw-ZEC","item":[],"content":"# Groups\n\nGroups act as a way to organize media assets into related collections. They can also be parented to create related group hierarchies.\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\n**Get all groups from a bin:**\n\n```javascript\ntry {\n  const binZUID = \"1-...\"; // bin ZUIDs begin with 1\n  const res = await sdk.instance.getGroups(binZUID);\n  console.log(res);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Get an individual group:**\n\n```javascript\ntry {\n  const groupZUID = \"2-...\"; // group ZUIDs begin with 2\n  const res = await sdk.instance.getGroup(groupZUID);\n  console.log(res);\n} catch (err) {\n  console.log(err);\n}\n```\n\n**Create a group:**\n\n` ``javascript try { const binZUID = \"1-...\" const group = await sdk.media.createGroup({ name: `My New Group\\`, binZUID, }); console.log(group) } catch (err) { console.log(err); }\n","category":"guides","service":"tools"}],"content":"# Files\n\nMedia is how you can manage assets for an instance. Using media you can upload any type of file to get a globally cached URL for that asset.\n\n_All examples assume a properly_ [_authenticated SDK instance_](../instantiation.md)\n\n**Create a file:**\n\n```javascript\ntry {\n  // Use your instances bin ZUID\n  const binZUID = \"1-...\";\n\n  // Get a read stream to the file you want to upload to your instance\n  const stream = fs.createReadStream(\n    path.resolve(__dirname, \"path/to/file/image.jpg\")\n  );\n\n  const opts = {\n    title: \"File title used for alt and/or title attribute text\",\n    fileName: \"image.jpg\",\n  };\n\n  const file = await sdk.media.createFile(binZUID, stream, opts);\n\n  console.log(file);\n} catch (err) {\n  console.log(err);\n}\n```\n","category":"guides","service":"tools"},{"name":"Accounts","url":"/tools/guides/node-sdk/account","objectId":"-M4yxJe7eJzgbNrGMteS","item":[],"content":"# Accounts\n\nOnce you have an authenticated SDK instance you can begin requesting and/or writing data for your user account. All of the provided functionality uses the underlying [Zesty.io REST accounts-api](https://accounts-api.zesty.org).\n\n_All examples assume a properly_ [_authenticated SDK instance_](instantiation.md)\n","category":"guides","service":"tools"},{"name":"Auth","url":"/tools/guides/node-sdk/auth","objectId":"-M4yxJe8NyT9kvbJfazZ","item":[],"content":"# Auth\n\n> Most of the time you will not need to interact with the `auth-api` directly. The process of authentication and re-authentication is handle internally in the SDK.\n\n## `login`\n\nThe login function takes 2 parameters a user email and password. It then talks to the `auth-api` to get a session token for the provided user credentials.\n\n### parameters\n\n* `email`\n* `password`\n\n### response\n\n```\n```\n\n## `verifyToken`\n\nGiven a session `token` this function will talk with the `auth-api` to ensure the provide token is a valid session.\n\n### parameters\n\n* `token`&#x20;\n\n### response\n\n```\n```\n","category":"guides","service":"tools"}],"content":"# Instantiation\n\nThe first step in using the SDK is setting up an authenticated instance.\n\nWe use an `async` function since we need to `await` the asynchronus authentication service response. Internally the `login` function will cache the returned the authentication token and use it for subsequent requests. As well as it will handle re-issuing a token when the one in use expires.\n\n_All API requests must be authenticated_\n\n## User Level Authentication\n\nThe SDK has user level authentication meaning the actions allowed against the instance will depend on the role and privileges of the user account you authenticate with.\n\nFor example; If the user account you instantiate the SDK with has a role of contributor you will be able to create and update content items but **will not** be able to delete or publish content items.\n\n**When using the SDK we recommend these 2 things for authenticating.**\n\n1. An account created specifically for using with the SDK&#x20;\n2. The role of `developer` for the SDK user\n\n### [async/await syntax](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async\\_await)\n\n```javascript\nasync function authedSDK() {\n  try {\n    const auth = new SDK.Auth();\n    const session = await auth.login(\n      process.env.ZESTY_USER_EMAIL,\n      process.env.ZESTY_USER_PASSWORD\n    );\n\n    return new SDK(process.env.ZESTY_INSTANCE_ZUID, session.token);\n  } catch (err) {\n    console.error(err)\n    // Handle errors. e.g. send to logging service\n    // re throw error\n    throw err\n  }\n}\nconst instance = await authedSDK()\n```\n\n### [Promise syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using\\_promises)\n\n```javascript\nconst auth = new SDK.Auth();\nconst sdk = auth.login(\n  process.env.ZESTY_USER_EMAIL,\n  process.env.ZESTY_USER_PASSWORD\n).then(session => {\n  return new SDK(process.env.ZESTY_INSTANCE_ZUID, session.token);\n}).catch(err => {\n  console.error(err)\n  // Handle errors. e.g. send to logging service\n  // re throw error\n  throw err\n})\n```\n","category":"guides","service":"tools"},{"name":"Setting up Google Analytics for GDPR","url":"/tools/guides/setting-up-google-analytics-for-gdpr","objectId":"-LbczW3hl6W4UQVMTCGh","item":[],"content":"---\ndescription: >-\n  How to be GDPR compliant with Google Analytics and Tag Manager using cookies\n  and Javascript\n---\n\n# Setting up Google Analytics for GDPR\n\nWe are going to check for a cookie named trackMe, if that cookie is null, we will show a popup asking the user if its ok to run GA, if the cookie value is true, we will run the GA script. If it is false, we do not run the GA script.\n\n### Step 1: Prepare Javascript to Check and Set Cookies\n\nJavascript can access cookies, use these handy functions to set and check a cookie value. You'll want to load this function up first. This is vanilla Javascript, no framework needed.\n\n```javascript\nfunction setCookie(name,value,days=30) {\n    var expires = \"\";\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days*24*60*60*1000));\n        expires = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\n}\n\nfunction getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i < ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\n\nfunction eraseCookie(name) {   \n    document.cookie = name+'=; Max-Age=-99999999;';  \n}\n```\n\n### Step 2a: Remove the GA (analytics) and GTM (tag manager) auto loading\n\nRemove all the GA and GTM script tags stuff from the `loader` view file in the editor and save it. If you are using Zesty.io GA auto loader, you need to delete the setting. You can delete the GA settings in config > settings > analytics.\n\n### Step 2b: Create an Analytics Loading Function\n\nWe will want to setup a function to run Google Analytics, that way we can run it as a user accepts, and run it when we check the `trackMe` cookie.\n\n```javascript\n function loadGoogleAnalytics(){\n    var UACODE = \"UA-XXXXXXX-X\";\n    var GTMCODE = \"GTM-XXXXXXX\";\n\t// run GA tracking scripts\n\t(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n                                })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n        \n        ga('create', UACODE, 'auto');\n        ga('send', 'pageview');\n        \n        document.write('<script async src=\"https://www.googletagmanager.com/gtag/js?id='+UACODE+'\"><\\/script>');\n        \n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n        gtag('config', UACODE);\n        \n        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer',GTMCODE);\n        \n        document.write('<noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-5RKTZZ4\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>');\n  }\n```\n\n### Step 3: Create CSS/HTML popup for unrecognized visits.\n\nIn your theme, create a page or panel with language about the cookies and some toggle buttons. You will check a cookie using the `getCookie` function to load or not load this.\n\n```javascript\nif (getCookie('trackMe') == null) {\n\t// run popup code\n} \n```\n\n![HTML/CSS popup, connect the buttons to your javascript functions.](<../../.gitbook/assets/Screen Shot 2019-04-04 at 8.46.31 AM.png>)\n\n### Step 4: Connect buttons to set a preference on a cookie&#x20;\n\n&#x20;Setup on clicks to the buttons that setup a cookie `trackMe` to store the user's preference.\n\n```javascript\ndocument.getElementById(\"myAcceptBtn\").addEventListener(\n    \"click\", \n    setCookieAndLoad()\n);\n\n// this function is set this way so we do not have to reload the page\nfunction setCookieAndLoad(){\n    setCookie('trackMe',true,356);\n    loadGoogleAnalytics();\n}\n\ndocument.getElementById(\"myRejectBtn\").addEventListener(\n    \"click\", \n    setCookie('trackMe',false,356)\n);\n```\n\n### Step 5: Check the `trackMe` Cookie\n\nIf the trackMe cookie is true, we will want to run the load\n\n```javascript\nif (getCookie('trackMe') == true) {\n   loadGoogleAnalytics();\n} \n```\n\n### Testing Cookies\n\nUse Google Chrome and [download the EditThisCookie plugin](https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en).  Once installed, a cookie icon will appear on your toolbar. Use that to check if the `trackMe` cookie is there, you can also delete the cookie there.\n","category":"guides","service":"tools"}],"content":"---\ndescription: >-\n  The Layouts App allows you to drag and drop components and work with Zesty\n  content in a codeless environment.\n---\n\n# Layouts App\n\nThis documentation is an overview of Zesty’s new Layouts app which covers the installation, usage, and creation of custom components.\n\n### Installing the Layouts App\n\nZesty’s Layouts app is available for download in Zesty’s Marketplace > Apps > [Layouts](https://www.zesty.io/marketplace/apps/page-layout-designer/)\n\nYou may also access it from the UI by clicking the +Marketplace tab.\n\n*   Start the installation by selecting an Instance (in Search bar dropdown) that you will be working on with the Layouts app.\\\\\n\n    <figure><img src=\"https://lh6.googleusercontent.com/5X2sasJp-Hstlnww2Psne0kDw6e6XN3mrBj3tYUKvgFUwUbb5HdnijD40a1iK_iAHkbSS1g4ttBIk2s5j-Kugdy02hN9dRApK2Pj6MgbwgHYln055zNbstC3pwEGo3rE0e5W4JU0ICXe2rjgtC6V8eicWmYO8tiKe5CsdbD6aD-Tz_dpesSBjz9qcVGjiQ\" alt=\"\"><figcaption></figcaption></figure>\n*   Click “Install Layouts in \\[Instance Name]” and wait for it to be installed in your selected Instance.\\\\\n\n    <figure><img src=\"https://lh4.googleusercontent.com/Aex2ibZYJ10Ueccd0Z28Wdc8Z8Frh0pKz1rrCkVLi2AbGj_5hxI7YE-aXoWa7R_jEin5g-jeIkxthOJBzw_h_LSS_Z1NC1wjF6Luz6XEGk7eZL6Papz1-7gZlS5PlIfhu2jffRSO28a_dWxM7IZHiuse_mmRUROX1zYPbHfdRb3rk49qGfDt3CSe32spdg\" alt=\"\"><figcaption></figcaption></figure>\n* Once installed, the Layouts app will be shown at the left navigation pane of your Instance. See below image for reference.\n\n<figure><img src=\"https://lh4.googleusercontent.com/RsAwFYGZHU1UWnUK28vEKqQ5h79Cl3yE-fgoFB7zc6iXEhRGjtPQjFj4XDwTK2knX_8FItDLxm5TBezQDAGfmZCd0ZgMq7ll9d8lf-KwL7EBIRqY_LhO1FKpzZHGOGvxKJxk9SvQDDlKELviJzeoUy4hpRdloQlm-FbWow0Cfd3219p4F5cw6naX3bpJKQ\" alt=\"\"><figcaption></figcaption></figure>\n\n### Layouts UI Overview\n\nThe Layouts interface is mainly of file toolbars, canvas/layout preview, content selector, layout design tools, and components tool.\n\n* File - hotkeys\n  * Change Model - Ctrl+M / Command+M\n  * Save - Ctrl+S / Command+S\n  * Publish - Ctrl+P / Command+P\n\n<figure><img src=\"https://lh6.googleusercontent.com/PQveFlCxsp7LxoRota5_52hcnssBMgni1nnvFJSdSMLCGS4TXgduabHHWXw2azp48WNh36z_yQNprYs8AO2IJls5h7P4t0Pa_OlMSxVvODuqhc5Pbz1Mm-RhFyGoHIczGZOlpdZakqAfzcf5Mjp2U003SXzKF42ogiaCR41aMjzenNlPXXpxjAETEnBsQQ\" alt=\"\"><figcaption></figcaption></figure>\n\n* Edit - hotkeys\n  * Undo - Ctrl+Z / Command+Z\n  * Redo - Ctrl+Y / Command+Y\n\n<figure><img src=\"https://lh3.googleusercontent.com/vhTr2gw_rDK-zP3GEGahUzazj4z8frp-ozpnp9V7kHmQXbRRA2ICONB8vqtkOKU12suql-lbXaNKYjMNwgCvbcPnVW6Tl4LMeQr5ZMGfHACvGpidTmjHx0LYzKcbNBF3FqdQhpmNVfcOxL32R-1MxFH8d3vZ3rMsqurdX0dgDE5j9tmTozOX52PZbxnlnA\" alt=\"\"><figcaption></figcaption></figure>\n\n* View - hotkeys\n  * Visual Layout - Ctrl+1 / Command+1\n  * ZHTML Output - Ctrl+2 / Command+2\n  * JSON Output - Ctrl+3 / Command+3\n  * Layout Preview - Ctrl+4 / Command+4\n  * Page Preview - Ctrl+5 / Command+5\n  * Toggle Sidebar - Ctrl+B / Command+B\n* Help\n  *   Hotkeys\n\n      <figure><img src=\"../../../.gitbook/assets/layouts - hotkeys.png\" alt=\"\"><figcaption></figcaption></figure>\n  *   How it works\n\n      <figure><img src=\"../../../.gitbook/assets/layouts - how it works.png\" alt=\"\"><figcaption></figcaption></figure>\n  *   About\n\n      <figure><img src=\"../../../.gitbook/assets/layouts - about.png\" alt=\"\"><figcaption></figcaption></figure>\n\n      <figure><img src=\"https://lh6.googleusercontent.com/eW4oKnlN2ItPuKZc53iyg_YKr_rRg4R4ns83zG1pkQnjnd1KQ4o0eyKumrmiJd4HWD3pvw3gfaPodgmZI62KQ4kNMQ3usGAcPBJ_yhMZSh_O1GdSkffj9CqagXxA1xyp4E8J9rF_M3Nuetg5rByoyTzp3rB_qkiBtZuaN4TS0KevWeaC970w_5bGbS32Dg\" alt=\"\"><figcaption></figcaption></figure>\n* Components\n  * Add Component (component / design type)\n  * Edit / Delete a component\n  *   Manage Model\\\n      `To manage a model you'll get redirected to the schema route of your instance in order to manager your model.`\n\n      <figure><img src=\"https://lh6.googleusercontent.com/PcI9bd3VsLS9UQtqutRGR9fBc1iICba3CN9Ki1hymImloq4dfDK4bfg1s8EE1_2OyPm6ZK0vRoxAq1DYs8IOlXHYeXAloqBQrsVufhagz0qqUamZ8VqArxMdBjNhNpzs0HXRm2tia-3s5nyiOsryp3HbGG1l53dQY51I8MgdWNimdry58s2WMQV58WksfA\" alt=\"\"><figcaption></figcaption></figure>\n*   Content Model Selector\\\n    `Helpful for quick search and selection of your model.`\n\n    <figure><img src=\"https://lh3.googleusercontent.com/j8oS7BEqpLFSdG51biSMAyxIGIqy7d4miL13X5E29FQ3U7YE9QnNyQ5CTXTR2BD5eUQI-ZA8K19RIcc6yn4UwqQ_2t4pnRLEvGt3tTp5Fyy63OnWOQO9BZlFs38C2tvVVOE0NToZuzAvY3LvWX428GwrC5nGz5eBoy2nvc2BKGohVsUb4YhBpvG9qE_ycg\" alt=\"\"><figcaption></figcaption></figure>\n*   Layout Design Tools\\\n    `These helps to group your content or put additional design.`\n\n    <figure><img src=\"https://lh6.googleusercontent.com/lCbS7vq2RxM3yz0LFkfvBOuGG-ZIl8GHamReX4C6trdSNOLHePzFZZF345avU_5-hHbFYaDTfR36f57AL8gH0bWhJjC4fcLAirAvzI8QclBFW0FUkHFwkf7DjtvqniAWsOhfajBhHPmPFZhIGkCOqiBecc4x2ZEuxeHIcsKwFDrhE-XFDNBrSJv2CE0_mg\" alt=\"\"><figcaption></figcaption></figure>\n*   Component Design Tools\\\n    `Lists of your created components`\n\n    <figure><img src=\"https://lh6.googleusercontent.com/Js-V-WHSZRLiFFfdi3Y3UuLT6s5pXAZ0jncXl-Qn2UmUSHZfs0EX33WtStdpNnTm3Ad1Y_oTxnTKv9J3vOKDi5N_eoDCnCoQHcp7voOgIr_xTfTI0a4iqWKUtUElmHE2_FXJasulcJLns25y1E92Okw3g_pwwuIM11ZeJehnNsxCHq1DXvq-ujGv2aFXaw\" alt=\"\"><figcaption></figcaption></figure>\n* Layout Canvas\n\n1.  Default view - user may collapse each sidebar for a wider canvas.\n\n    <figure><img src=\"https://lh4.googleusercontent.com/SoKSRZdsPoG92bC4_zPQ-TgkfXUfOX1uVUh5ketDuTePjnnaHk-4X2_wPBHvkfaCX3kZUf3J-Lus6MYuCxwzPKsPo8kOsU8sX_I3UFLvebjfN8rQKRcLihMNoIYpq7OmAiOCycIkjDg9qV7ifKcW1fEEcYkcZFcOGNjqCtNnkwpxpdW4rJiEl8pXs-xmOA\" alt=\"\"><figcaption></figcaption></figure>\n2.  Collapsed view - canvas when each sidebar is collapsed.\n\n    <figure><img src=\"https://lh4.googleusercontent.com/-CPiqEXcY2Pu8a0DcHKw2LsAGxmD8OryZ6my4aJfXgCjzAyMqDYvzbhMcuiQ3uFJpQfzyO5J8qprz1sal7DjdYKFQQ41Il_UKcKzDIjD-1pVf7c_Y3VLlZODYF-yQnNq_2SpMQ83eyM5Q-PMPTjXKBYMMbbt51bJGH9guE-Vm1Kytd7Uf6JDv1OLG-GiBQ\" alt=\"\"><figcaption></figcaption></figure>\n\nTip: `Ctrl+B` to toggle the view.\n\n### Building Pages using Layouts\n\nUsing the Layouts app, you can easily create/design web pages with the pre-built Layout Design Tools\\\\\n\n* Start by selecting a Content Model in the dropdown selection (eg. Articles) to work with Layouts.\n* Select a layout design available in the Layout Design Tools which you can drag and drop into your canvas/page view.\n* You can use all the items in sidebar to drag in your canvas to layout your page\n* You can create your custom component, drag design tools.\n* There are available shortcuts to make your creation of layout seamless.\n","category":"guides","service":"tools"}],"content":"---\ndescription: >-\n  Our guides will help you build out different aspects of your instance from\n  adding forms to coding in one-to-many field relationships.\n---\n\n# Guides\n\n","category":"guides","service":"tools"}]